#ifndef PRIVATE_MEMORY
#include "ParamInfo.h"
#include "ParamDefineMgr.h"
#include "Log.h"
#include "stdarg.h"
#include "CommonMacro.h"
#include "fee_shm.h"
#undef DEBUG

#define CAL_COUNT(count) \
        (\
        (int ) \
                ( \
                        (count)>1000000 ? \
                        ((count)*1.05) : \
                        ( \
                                (count)>100000? \
                                ((count)*1.1): \
                                (\
                                        (count)>10000? \
                                        ((count)*1.15) : \
                                        ( \
                                                (count)>1000? \
                                                10100 : \
                                                2000 \
                                        ) \
                                ) \
                        )\
                ) \
         ) 


void ShmParamInfo::dprintf(const char *sfmt, ...)
{
#define DEBUG
#ifdef DEBUG
    va_list ap;
    va_start(ap, sfmt);
    vprintf(sfmt, ap);
    va_end(ap);
#endif
}

ShmParamInfo::ShmParamInfo()
{
    m_bAttached= false; 
   m_bdetached = false;
   //prep
   m_poTemplateMapSwitchList = 0;
   m_poObjectDefineList = 0;
   m_poEventParserGroupList = 0;
   m_poMergeRuleData = 0;
   m_poMergeRuleAssociateData = 0;
   m_poMergeRuleStrIndex = 0;
   m_poMergeRuleAssociateStrIndex = 0;
   m_poMergeRuleOutData = 0;
   m_poMergeRuleOutIndex = 0;
   m_poMergeKeyRuleData = 0;
   m_poMergeKeyRuleIndex = 0;
}

ShmParamInfo::~ShmParamInfo()
{

}

//绑定参数信息块对应的共享内存key,包括数据区和索引区
//需要区分信息块的需要A或B
void ShmParamInfo::bindKey(int iShmIdx)
{
    memset(m_lDataKey, 0, PARAM_SHM_NUMBER*sizeof(long));
    memset(m_lIndexKey, 0, PARAM_SHM_NUMBER*sizeof(long));
    if (iShmIdx == PARAM_SHM_INDEX_A) {
		m_lDataKey[PARAM_M_SERVACCT_INFO] = M_SERVACCT_INFO_DATA_A;
        m_lIndexKey[PARAM_M_SERVACCT_INFO] = M_SERVACCT_INFO_INDEX_A;
        m_lDataKey[LOGICSTATEMENT_INFO] = LOGICSTATE_INFO_DATA_A;
        m_lIndexKey[LOGICSTATEMENT_INFO] = LOGICSTATE_INFO_INDEX_A;
        m_lDataKey[ASSIGNSTATEMENT_INFO] = ASSIGNSTATE_INFO_DATA_A;
        m_lIndexKey[ASSIGNSTATEMENT_INFO] = ASSIGNSTATE_INFO_INDEX_A;
        m_lDataKey[FORMULA_INFO] = FORMULA_INFO_DATA_A;
        m_lIndexKey[FORMULA_INFO] = FORMULA_INFO_INDEX_A;

        m_lDataKey[ATTR_FORMAT_GROUP_INFO] = FORMAT_GROUP_INFO_DATA_A;
        m_lDataKey[ATTR_FORMAT_STEP_INFO] = FORMAT_STEP_INFO_DATA_A;
        m_lDataKey[ATTR_FORMAT_RULE_INFO] = FORMAT_RULE_INFO_DATA_A;
        m_lDataKey[ATTR_FORMAT_COMB_INFO] = FORMAT_COMB_INFO_DATA_A;

        m_lDataKey[TRUNK_INFO] = TRUNK_INFO_DATA_A;
        m_lIndexKey[TRUNK_INFO] = TRUNK_INFO_INDEX_A;
        m_lIndexKey[AREACODE_INFO] = AREACODE_INFO_INDEX_A;
        m_lDataKey[HLR_INFO]  = HLR_INFO_DATA_A;
        m_lIndexKey[HLR_INFO] = HLR_INFO_INDEX_A;
	
		m_lDataKey[VISIT_AREACODE_RULE_INFO] = VISITAREACODERULE_INFO_DATA_A;
		m_lIndexKey[VISIT_AREACODE_RULE_INFO] = VISITAREACODERULE_INFO_INDEX_A;
		
		m_lDataKey[EDGEROAM_RULE_INFO] = EDGEROAMRULE_INFO_DATA_A;
		m_lIndexKey[EDGEROAM_RULE_INFO] = EDGEROAMRULE_INFO_INDEX_A;
		//
		m_lDataKey[PNSEGBILLINGEX_INFO] = PNSEGBILLINGEX_INFO_DATA_A;
		m_lDataKey[PNSEGBILLING_INFO] = PNSEGBILLING_INFO_DATA_A;
		//
        m_lIndexKey[CARRIER_INFO] = CARRIER_INFO_INDEX_A;
		//new
		m_lDataKey[PNNOTBILLING_INFO] = PNNOTBILLING_INFO_DATA_A;
		m_lIndexKey[PNNOTBILLING_INFO] = PNNOTBILLING_INFO_INDEX_A;
		
		m_lDataKey[TRUNKTREENODE_INFO] = TRUNKTREENODE_INFO_DATA_A;
		m_lIndexKey[TRUNKTREENODE_INFO] = TRUNKTREENODE_INFO_INDEX_A;
		
        //m_lDataKey[SERVICE_INFO]  = SERVICE_INFO_DATA_A;
		
		m_lDataKey[TSERVICEINFO2_INFO] = TSERVICEINFO2_INFO_DATA_A;
		m_lIndexKey[TSERVICEINFO2_INFO] = TSERVICEINFO2_INFO_INDEX_A;
		
		m_lIndexKey[SPEC_TRUNK_PRODUCT_INFO] = SPEC_TRUNK_PRODUCT_INFO_INDEX_A;
		
		m_lDataKey[SWITCHITEMTYPE_INFO] = SWITCHITEMTYPE_DATA_A;
		m_lIndexKey[SWITCHITEMTYPE_INFO] = SWITCHITEMTYPE_INDEX_A;
		
		m_lDataKey[STR_LOCALAREACODE_INFO] = STR_LOCALAREACODE_INFO_DATA_A;
		
        m_lDataKey[SWITCH_INFO]   = SWITCH_INFO_DATA_A;
        m_lIndexKey[SWITCH_INFO]  = SWITCH_INFO_INDEX_A;
        m_lIndexKey[SWITCH_OPC_INFO]= SWITCH_INFO_OPC_INDEX_A;
        m_lDataKey[TRUNKBILLING_INFO] = TRUNKBILLING_INFO_DATA_A;
        m_lIndexKey[TRUNKBILLING_INFO] = TRUNKBILLING_INFO_INDEX_A;
		
        m_lIndexKey[TIMESTYPE_INFO] = TIMESTYPE_INFO_INDEX_A;
		
		m_lDataKey[FILTER_RULE_RESULT_INFO] = FILTER_RULE_RESULT_INFO_DATA_A;
		
        m_lIndexKey[FILTER_RULE_RESULT_CALLING_INFO] = FILTER_RULE_RESULT_CALLING_INFO_INDEX_A;
		m_lIndexKey[FILTER_RULE_RESULT_CALLED_INFO] = FILTER_RULE_RESULT_CALLED_INFO_INDEX_A;
		m_lIndexKey[FILTER_RULE_RESULT_AREACODE_INFO] = FILTER_RULE_RESULT_AREACODE_INFO_INDEX_A;
		m_lIndexKey[FILTER_RULE_RESULT_GATHERPOT_INFO] = FILTER_RULE_RESULT_GATHERPOT_INFO_INDEX_A;
		m_lIndexKey[FILTER_RULE_RESULT_TRUNCKIN_INFO] = FILTER_RULE_RESULT_TRUNCKIN_INFO_INDEX_A;
		m_lIndexKey[FILTER_RULE_RESULT_TRUNCKOUT_INFO] = FILTER_RULE_RESULT_TRUNCKOUT_INFO_INDEX_A;
		m_lIndexKey[FILTER_RULE_RESULT_SWITCHID_INFO] = FILTER_RULE_RESULT_SWITCHID_INFO_INDEX_A;
		//
        m_lDataKey[CITY_INFO] = CITY_INFO_DATA_A;
        m_lIndexKey[CITY_INFO] = CITY_INFO_INDEX_A;
        m_lIndexKey[CITY_AREA_INFO] = CITY_AREA_INFO_INDEX_A;

        m_lDataKey[ORG_INFO] = ORG_INFO_DATA_A;
        m_lIndexKey[ORG_INFO] = ORG_INFO_INDEX_A;
        m_lDataKey[ORGEX_INFO] = ORGEX_INFO_DATA_A;
        m_lIndexKey[ORGEX_INFO] = ORGEX_INFO_INDEX_A;
        m_lDataKey[ORGLONGTYPE_INFO] = ORGLONGTYPE_INFO_DATA_A;
        m_lIndexKey[ORGLONGTYPE_INFO] = ORGLONGTYPE_INFO_INDEX_A;
        m_lDataKey[HEADEX_INFO] = HEADEX_INFO_DATA_A;
        m_lIndexKey[HEADEX_INFO] = HEADEX_INFO_INDEX_A;
        m_lDataKey[LOCALHEAD_INFO] = LOCALHEAD_INFO_DATA_A;
        m_lIndexKey[LOCALHEAD_INFO] = LOCALHEAD_INFO_INDEX_A;

        m_lDataKey[EVENTTYPE_INFO] = EVENTTYPE_INFO_DATA_A;
        m_lIndexKey[EVENTTYPE_INFO] = EVENTTYPE_INFO_INDEX_A;
        m_lDataKey[EVENTTYPEGROUP_INFO] = EVENTTYPEGROUP_INFO_DATA_A;
        m_lIndexKey[EVENTTYPEGROUP_INFO] = EVENTTYPEGROUP_INFO_INDEX_A;

        m_lDataKey[OFFER_INFO] = OFFER_INFO_DATA_A;
        m_lIndexKey[OFFER_INFO] = OFFER_INFO_INDEX_A;
        m_lIndexKey[OFFER_SPECATTR_INFO] = OFFER_INFO_SPECATTR_INDEX_A;
        m_lIndexKey[OFFER_NUMATTR_INFO] = OFFER_INFO_NUMATTR_INDEX_A;
        m_lIndexKey[OFFER_FREE_INFO] = OFFER_INFO_FREE_INDEX_A;

        m_lDataKey[NBR_MAP_INFO] = NBR_MAP_INFO_DATA_A;
        m_lIndexKey[NBR_MAP_INDEX1_INFO] = NBR_MAP_INDEX1_INDEX_A;
        m_lIndexKey[NBR_MAP_INDEX2_INFO] = NBR_MAP_INDEX2_INDEX_A;
        m_lIndexKey[NBR_MAP_INDEX4_INFO] = NBR_MAP_INDEX4_INDEX_A;
        m_lIndexKey[NBR_MAP_INDEX8_INFO] = NBR_MAP_INDEX8_INDEX_A;

        m_lDataKey[ACCTITEM_INFO] = ACCTITEM_INFO_DATA_A;
        m_lIndexKey[ACCTITEM_INFO] = ACCTITEM_INFO_INDEX_A;
        m_lDataKey[ACCTITEM_GROUP_INFO] = ACCTITEM_GROUP_INFO_DATA_A;
        m_lIndexKey[ACCTITEM_GROUP_INFO] = ACCTITEM_GROUP_INFO_INDEX_A;
        m_lDataKey[ACCTITEM_GROUPB_INFO] = ACCTITEM_GROUPB_INFO_DATA_A;
        m_lIndexKey[ACCTITEM_GROUPB_INFO] = ACCTITEM_GROUPB_INFO_INDEX_A;
        m_lDataKey[ACCTITEM_BASICGROUPB_INFO] = ACCTITEM_BASICGROUPB_INFO_DATA_A;
        m_lIndexKey[ACCTITEM_BASICGROUPB_INFO] = ACCTITEM_BASICGROUPB_INFO_INDEX_A;
        m_lDataKey[ACCTITEM_DISCTGROUPB_INFO] = ACCTITEM_DISCTGROUPB_INFO_DATA_A;
        // 重     m_lDataKey[ACCTITEM_DISCTGROUPB_INFO] = ACCTITEM_DISCTGROUPB_INFO_DATA_A;
        m_lIndexKey[ACCTITEM_DISCTGROUPB_INFO] = ACCTITEM_DISCTGROUPB_INFO_INDEX_A;
        m_lIndexKey[ACCTITEM_INCLUDEDISCT_INFO] = ACCTITEM_INCLUDEDISCT_INFO_INDEX_A;

        m_lDataKey[LONGEVENTTYPERULE_INFO] = LONGEVENTTYPERULE_INFO_DATA_A;
        m_lDataKey[LONGEVENTTYPERULEEX_INFO] = LONGEVENTTYPERULEEX_INFO_DATA_A;

        m_lIndexKey[PRICINGPLANTYPE_INFO] = PRICINGPLANTYPE_INFO_INDEX_A;

        m_lDataKey[STATECONVERT_INFO] = STATECONVERT_INFO_DATA_A;
        m_lIndexKey[STATECONVERT_INFO] = STATECONVERT_INFO_INDEX_A;

        m_lDataKey[VALUEMAP_INFO] = VALUEMAP_INFO_DATA_A;
        m_lIndexKey[VALUEMAP_INFO] = VALUEMAP_INFO_INDEX_A;

        m_lDataKey[ZONE_ITEM_INFO] = ZONE_ITEM_INFO_DATA_A;
        m_lIndexKey[ZONE_ITEM_INFO] = ZONE_ITEM_INFO_INDEX_A;
        m_lIndexKey[PARAM_ZONEITEM_STR_INFO] = ZONE_ITEM_STR_INDEX_A;

        m_lDataKey[SPLITACCTITEMGROUP_INFO] = SPLITACCTITEMGROUP_DATA_A;
        m_lIndexKey[SPLITACCTITEMGROUP_INFO] = SPLITACCTITEMGROUP_INDEX_A;
        m_lDataKey[SPLITACCTGROUPEVENT_INFO] = SPLITACCTGROUPEVENT_DATA_A;
        m_lIndexKey[SPLITACCTGROUPEVENT_INFO] = SPLITACCTGROUPEVENT_INDEX_A;

        m_lDataKey[DISTANCETYPE_INFO] = DISTANCETYPE_DATA_A;
        m_lIndexKey[DISTANCETYPE_INFO] = DISTANCETYPE_INDEX_A;

        m_lDataKey[EDGEROAMRULEEX_INFO] = EDGEROAMRULEEX_DATA_A;
        m_lIndexKey[EDGEROAMRULEEX_TYPEA_INFO] = EDGEROAMRULEEX_TYPEA_INDEX_A;
        m_lIndexKey[EDGEROAMRULEEX_TYPEB_INFO] = EDGEROAMRULEEX_TYPEB_INDEX_A;
        m_lIndexKey[EDGEROAMRULEEX_MSC_INFO] = EDGEROAMRULEEX_MSC_INDEX_A;

        m_lDataKey[PRICINGSECTION_INFO] = PRICINGSECTION_INFO_DATA_A;
        m_lIndexKey[PRICINGSECTION_INFO] = PRICINGSECTION_INFO_INDEX_A;        
        m_lIndexKey[SECTIONSTRATEGY_INFO] = SECTIONSTRATEGY_INFO_INDEX_A;

        m_lDataKey[TARIFF_INFO] = TARIFF_INFO_DATA_A;
        m_lIndexKey[TARIFF_INFO] = TARIFF_INFO_INDEX_A;

        m_lDataKey[DISCOUNT_INFO] = DISCOUNT_INFO_DATA_A;
        m_lIndexKey[DISCOUNT_INFO] = DISCOUNT_INFO_INDEX_A;

        m_lDataKey[DISCTAPPLYER_INFO] = DISCTAPPLYER_INFO_DATA_A;
        m_lIndexKey[DISCTAPPLYER_INFO] = DISCTAPPLYER_INFO_INDEX_A;

        m_lDataKey[DISCTAPPLYEROBJ_INFO] = DISCTAPPLYEROBJ_INFO_DATA_A;
        m_lIndexKey[DISCTAPPLYEROBJ_INFO] = DISCTAPPLYEROBJ_INFO_INDEX_A;

        m_lDataKey[PARAM_PERCENTINFO] = PERCENT_INFO_DATA_A;
        m_lIndexKey[PARAM_PERCENTINFO] = PERCENT_INFO_INDEX_A;

        m_lDataKey[PARAM_LIFECYCLEINFO] = LIFECYCLE_INFO_DATA_A;
        m_lIndexKey[PARAM_LIFECYCLEINFO] = LIFECYCLE_INFO_INDEX_A;

        m_lDataKey[PARAM_MEASUREINFO] = MEASURE_INFO_DATA_A;
        m_lIndexKey[PARAM_MEASUREINFO] = MEASURE_INFO_INDEX_A;
        m_lIndexKey[PARAM_STRATEGYMEASUREINFO] = STRATEGYMEASURE_INFO_INDEX_A;

        m_lDataKey[PARAM_COMBINETINFO] = COMBINE_INFO_DATA_A;
        m_lIndexKey[PARAM_COMBINETINFO] = COMBINE_INFO_INDEX_A;
        m_lIndexKey[PARAM_PLAN_COMBINETINFO] = PLAN_COMBINE_INFO_INDEX_A;
        m_lIndexKey[PARAM_STRATEGY_COMBINETINFO] = STRATEGY_COMBINE_INFO_INDEX_A;

        m_lDataKey[PARAM_FILTERCONDINFO] = FILTERCOND_INFO_DATA_A;
        m_lIndexKey[PARAM_FILTERCONDINFO] = FILTERCOND_INFO_INDEX_A;

        m_lDataKey[PARAM_CONDITIONPOINTINFO] = CONDITIONPOINT_INFO_DATA_A;

        m_lDataKey[PARAM_USAGETYPEINFO] = USAGETYPE_INFO_DATA_A;
        m_lIndexKey[PARAM_USAGETYPEINFO] = USAGETYPE_INFO_INDEX_A;

        m_lDataKey[PARAM_TIMECONDINFO] = ACCTTYPECFG_TIMECOND_INFO_DATA_A; 
        m_lIndexKey[PARAM_TIMECONDINFO] = ACCTTYPECFG_TIMECOND_INFO_INDEX_A;

        m_lDataKey[PARAM_EVENTTYPECONDINFO] = ACCTTYPECFG_EVENTTYPECOND_INFO_DATA_A; 
        m_lIndexKey[PARAM_EVENTTYPECONDINFO] = ACCTTYPECFG_EVENTTYPECOND_INFO_INDEX_A;

        m_lDataKey[PARAM_CYCLETYPEINFO] = ACCTTYPECFG_CYCLETYPE_INFO_DATA_A; 
        m_lIndexKey[PARAM_CYCLETYPEINFO] = ACCTTYPECFG_CYCLETYPE_INFO_INDEX_A;

        m_lDataKey[PARAM_ACCTTYPEINFO] = ACCTTYPECFG_ACCTTYPE_INFO_DATA_A; 
        m_lIndexKey[PARAM_ACCTTYPEINFO] = ACCTTYPECFG_ACCTTYPE_INFO_INDEX_A;

        m_lDataKey[PARAM_OFFERACCTRELATIONINFO] = ACCTTYPECFG_OFFERACCTRELATION_INFO_DATA_A; 
        m_lIndexKey[PARAM_OFFERACCTRELATIONINFO] = ACCTTYPECFG_OFFERACCTRELATION_INFO_INDEX_A;

        m_lIndexKey[PARAM_OFFERACCTEXISTINFO] = ACCTTYPECFG_OFFERACCTEXIST_INFO_INDEX_A;

#ifdef EVENT_AGGR_RECYCLE_USE           
		m_lDataKey[PARAM_CYCLETYPEIDINFO]  = ACCTTYPECFG_CYCLETYPEID_INFO_DATA_A;    
        m_lIndexKey[PARAM_CYCLETYPEIDINFO] = ACCTTYPECFG_CYCLETYPEID_INFO_INDEX_A;
#endif

        m_lIndexKey[PARAM_OFFERCOMBINEINFO] = OFFERCOMBINE_INFO_INDEX_A;
        m_lIndexKey[PARAM_OFFERDISCTINFO] = OFFERDISCT_INFO_INDEX_A;

        m_lIndexKey[PARAM_PRODUCTCOMBINEINFO] = PRODUCTCOMBINE_INFO_INDEX_A;

        m_lDataKey[PARAM_SPLITCFGINFO] = SPLITCFG_INFO_DATA_A;
        m_lIndexKey[PARAM_SPLITCFGINFO] = SPLITCFG_INFO_INDEX_A;

        m_lDataKey[PARAM_VIRTUAL_STRATEGY_COMBINETINFO] = VIRTUAL_STRATEGY_COMBINE_INFO_DATA_A; 
        m_lIndexKey[PARAM_VIRTUAL_STRATEGY_COMBINETINFO] = VIRTUAL_STRATEGY_COMBINE_INFO_INDEX_A;

#ifdef WHOLE_DISCOUNT
        m_lDataKey[PARAM_WHOLEDISCOUNTINFO] = WHOLEDISCOUNT_INFO_DATA_A; 
#endif

#ifdef GROUP_CONTROL
        m_lDataKey[PARAM_CGCOMBINEINFO] = CGCOMBINE_INFO_DATA_A;
        m_lIndexKey[PARAM_CGCOMBINEINFO] = CGCOMBINE_INFO_INDEX_A;
#endif

        m_lDataKey[PARAM_COMBINERELATIONINFO] = COMBINERELATION_INFO_DATA_A;
        m_lIndexKey[PARAM_COMBINERELATIONINFO] = COMBINERELATION_INFO_INDEX_A;

        //m_lDataKey[PARAM_DIRECTORYINFO] = DIRECTORY_INFO_DATA_A;
        //m_lIndexKey[PARAM_DIRECTORYINFO] = DIRECTORY_INFO_INDEX_A;

        m_lDataKey[PARAM_SPECIALNBRSTRATEGYINFO] = SPECIALNBRSTRATEGY_INFO_DATA_A; 
        m_lIndexKey[PARAM_SPECIALNBRSTRATEGYINFO] = SPECIALNBRSTRATEGY_INFO_INDEX_A;
        m_lIndexKey[PARAM_SPECIALNBROFFERINFO] = SPECIALNBROFFER_INFO_INDEX_A;

//重了          m_lIndexKey[PARAM_OFFERCOMBINEINFO] = OFFERCOMBINE_INFO_INDEX_A;

//重了          m_lIndexKey[PARAM_PRODUCTCOMBINEINFO] = PRODUCTCOMBINE_INFO_INDEX_A;

        m_lDataKey[PARAM_HOSTINFO] = HOSTINFO_INFO_DATA_A;
        m_lIndexKey[PARAM_HOSTINFO] = HOSTINFO_INFO_INDEX_A;

        m_lDataKey[PARAM_GATHERTESKINFO] = GATHERTESK_INFO_DATA_A;
        m_lIndexKey[PARAM_GATHERTESKINFO] = GATHERTESK_INFO_INDEX_A;
        m_lIndexKey[PARAM_ORGGATHERTESKINFO] = ORGGATHERTESK_INFO_INDEX_A;

        m_lIndexKey[PARAM_PRODUCTIDINFO] = PRODUCTID_INFO_INDEX_A;
        m_lIndexKey[PARAM_PRODUCTACCITEMINFO] = PRODUCTACCTITEMS_INFO_INDEX_A;

        m_lDataKey[PARAM_SPECIALTRIFFINFO] = SPECIALTRIFF_INFO_DATA_A; 
        m_lIndexKey[PARAM_SPECIALTRIFFINFO] = SPECIALTRIFF_INFO_INDEX_A;
        m_lDataKey[PARAM_SPECIALTRIFFCHECKINFO] = SPECIALTRIFFCHECK_INFO_DATA_A; 
        m_lIndexKey[PARAM_SPECIALTRIFFCHECKINFO] = SPECIALTRIFFCHECK_INFO_INDEX_A;

        m_lDataKey[PARAM_SPINFODATAINFO] = SPINFODATA_INFO_DATA_A; 
        m_lIndexKey[PARAM_SPINFODATAINFO] = SPINFODATA_INFO_INDEX_A;

        m_lDataKey[PARAM_GATHERTASKLISTINFO] = GATHERTASKLISTINFO_INFO_DATA_A; 
        m_lIndexKey[PARAM_GATHERTASKLISTINFO] = GATHERTASKLISTINFO_INFO_INDEX_A;

        m_lDataKey[PARAM_SEGMENTINFO] = SEGMENTINFO_INFO_DATA_A; 
        m_lIndexKey[PARAM_SEGMENTINFO] = SEGMENTINFO_INFO_INDEX_A;
        m_lIndexKey[PARAM_SEGMENTTYPEINFO] = SEGMENTTYPEINFO_INFO_INDEX_A;

        m_lIndexKey[PARAM_LONGTYPEINFO] = LONGTYPE_INFO_INDEX_A;
        m_lDataKey[PARAM_CHECKRULE_RULE_INFO] = CHECKRULE_RULE_INFO_DATA_A; 
        m_lIndexKey[PARAM_CHECKRULE_RULE_INFO] = CHECKRULE_RULE_INFO_INDEX_A;
        m_lDataKey[PARAM_CHECKRULE_SUBRULE_INFO] = CHECKRULE_SUBRULE_INFO_DATA_A; 
        m_lIndexKey[PARAM_CHECKRULE_SUBRULE_INFO] = CHECKRULE_SUBRULE_INFO_INDEX_A;
        m_lDataKey[PARAM_CHECKARGUMENT_INFO] = CHECKARGUMENT_INFO_DATA_A; 
        m_lDataKey[PARAM_CHECKRELATION_INFO] = CHECKRELATION_INFO_DATA_A; 
        m_lDataKey[PARAM_TRANSFILE_INFO] = TRANSFILETYPE_INFO_DATA_A; 
        m_lIndexKey[PARAM_TRANSFILE_INFO] = TRANSFILETYPE_INFO_INDEX_A;
        m_lDataKey[PARAM_PARSERULE_INFO] = PARSERULE_INFO_DATA_A; 
        m_lIndexKey[PARAM_PARSERULE_INFO] = PARSERULE_INFO_INDEX_A;
        m_lDataKey[PARAM_PARSECOMB_INFO] = PARSECOMB_INFO_DATA_A;
        m_lIndexKey[PARAM_PARSECOMB_INFO] = PARSECOMB_INFO_INDEX_A;
        m_lDataKey[PARAM_INSTTABLELIST_INFO] = INSTTABLELIST_INFO_DATA_A;
        m_lIndexKey[PARAM_INSTTABLELIST_INFO] = INSTTABLELIST_INFO_INDEX_A;
        m_lDataKey[PARAM_TABLETYPE_INFO] = TABLETYPE_INFO_DATA_A;
        m_lIndexKey[PARAM_TABLETYPE_INFO] = TABLETYPE_INFO_INDEX_A;
        m_lIndexKey[PARAM_RENT_CONFIG_INFO] = RENT_CONFIG_INFO_INDEX_A;
        m_lDataKey[PARAM_NETWORKPRIORITY_INFO] = NETWORKPRIORITY_INFO_DATA_A;
        m_lIndexKey[PARAM_NETWORKPRIORITY_INFO] = NETWORKPRIORITY_INFO_INDEX_A;
        m_lDataKey[PARAM_TRUNKTOBENBR_INFO] = TRUNKTOBENBR_INFO_DATA_A; 
        m_lIndexKey[PARAM_TRUNKTOBENBR_INFO] = TRUNKTOBENBR_INFO_INDEX_A;

        m_lDataKey[PARAM_CHECKDUPCFG_INFO] = CHECKDUPCFG_INFO_DATA_A;
        m_lIndexKey[PARAM_CHECKDUPCFG_INFO] = CHECKDUPCFG_INFO_INDEX_A;
        m_lDataKey[PARAM_CHECKDUPTYPE_INFO] = CHECKDUPTYPE_INFO_DATA_A;
        m_lIndexKey[PARAM_CHECKDUPTYPE_INFO] = CHECKDUPTYPE_INFO_INDEX_A;
        m_lDataKey[PARAM_CHECKDUPSTEP_INFO] = CHECKDUPSTEP_INFO_DATA_A;
        m_lIndexKey[PARAM_CHECKDUPSTEP_INFO] = CHECKDUPSTEP_INFO_INDEX_A;
        m_lDataKey[PARAM_CHECKSHOTTICKET_INFO] = CHECKSHOTTICKET_INFO_DATA_A;
        m_lIndexKey[PARAM_CHECKSHOTTICKET_INFO] = CHECKSHOTTICKET_INFO_INDEX_A;
        m_lDataKey[PARAM_UNDOPROCESSDUP_INFO] = UNDOPROCESSDUP_INFO_DATA_A;
        m_lIndexKey[PARAM_UNDOPROCESSDUP_INFO] = UNDOPROCESSDUP_INFO_INDEX_A;
        m_lDataKey[PARAM_UNDOPROCESSSHOT_INFO] = UNDOPROCESSSHOT_INFO_DATA_A;
        m_lIndexKey[PARAM_UNDOPROCESSSHOT_INFO] = UNDOPROCESSSHOT_INFO_INDEX_A;
        m_lDataKey[PARAM_UNDOSERVDUP_INFO] = UNDOSERVDUP_INFO_DATA_A;
        m_lDataKey[PARAM_UNDOPRODUCTDUP_INFO] = UNDOPRODUCTDUP_INFO_DATA_A;
        m_lIndexKey[PARAM_PRODUCTCFG_INFO] = PRODUCT_CONFIG_INFO_INDEX_A;

        m_lDataKey[PARAM_ORGPATH_INFO] = PARAM_ORGPATH_INFO_DATA_A;
        m_lIndexKey[PARAM_ORGPATH_INFO] = PARAM_ORGPATH_INFO_INDEX_A;
        m_lDataKey[PARAM_LOCALEVENTTYPERULE_INFO] = PARAM_LOCALEVENTTYPERULE_INFO_DATA_A;
        m_lIndexKey[PARAM_LOCALEVENTTYPERULE_INFO] = PARAM_LOCALEVENTTYPERULE_INFO_INDEX_A;



        //2010.11.17
        m_lDataKey[FILEPOOL_INFO] = FILEPOOL_DATA_A;
        m_lIndexKey[FILEPOOL_INFO] = FILEPOOL_INDEX_A;
        m_lDataKey[FILEPOOL_COND_INFO] = FILEPOOL_COND_DATA_A;
        m_lIndexKey[FILEPOOL_COND_INFO] = FILEPOOL_COND_INDEX_A;
        m_lIndexKey[FILETYPE_INFO] = FILETYPE_INDEX_A;
        m_lDataKey[TLVENCODE_INFO] = TLVENCODE_DATA_A;
        m_lIndexKey[TLVENCODE_INFO] = TLVENCODE_INDEX_A;
        m_lDataKey[TLVDECODE_INFO] = TLVDECODE_DATA_A;
        m_lIndexKey[TLVDECODE_INFO] = TLVDECODE_INDEX_A;
        m_lDataKey[BILLINGNODE_INFO] = BILLINGNODE_DATA_A;
        m_lIndexKey[BILLINGNODE_INFO] = BILLINGNODE_INDEX_A;
                m_lIndexKey[FILEPARSERULE_INFO] = FILEPARSERULE_INDEX_A;
        m_lDataKey[SWITCHCODE_INFO] = SWITCHCODE_DATA_A;
        m_lIndexKey[SWITCHCODE_INFO] = SWITCHCODE_INDEX_A;
        //2010.12.20
        m_lDataKey[ROAMTARIFF_INFO] = ROAMTARIFF_DATA_A;
        m_lIndexKey[ROAMTARIFF_INFO] = ROAMTARIFF_INDEX_A;
        m_lDataKey[ROAMCARRIER_INFO] = ROAMCARRIER_DATA_A;
        m_lIndexKey[ROAMCARRIER_INFO] = ROAMCARRIER_INDEX_A;
        m_lIndexKey[TARIFFSECTOR_INFO] = TARIFFSECTOR_INDEX_A;
        m_lDataKey[COUNTRY_INFO_A] = COUNTRY_DATA_A;
        m_lIndexKey[COUNTRY_INFO_A] = COUNTRY_CODE_INDEX_A;
        m_lIndexKey[COUNTRY_INFO_B] = COUNTRY_AREA_INDEX_A;
        m_lDataKey[ROAMSPONSOR_INFO] = ROAMSPONSOR_DATA_A;
        m_lIndexKey[ROAMSPONSOR_INFO] = ROAMSPONSOR_INDEX_A;
        m_lDataKey[SPECIALGROUPMEMBER_INFO] = SPECIALGROUPMEMBER_DATA_A;
        m_lIndexKey[SPECIALGROUPMEMBER_INFO] = SPECIALGROUPMEMBER_INDEX_A;
                //std
                /*m_lDataKey[PARAM_STD_STRUCT_INFO] = STD_STRUCT_DATA_A;
                m_lIndexKey[PARAM_STD_STRUCT_INFO] = STD_STRUCT_TYPE_INDEX_A;
                m_lDataKey[PARAM_STRUCT_INFO_DESC] = STD_STRUCT_DATA_DESC_A;*/
                //prep
                m_lDataKey[PARAM_TEMPLATEMAPSWITCH_INFO] = TEMPLATEMAPSWITCH_DATA_A;
                m_lIndexKey[PARAM_TEMPLATEMAPSWITCH_INFO] = TEMPLATEMAPSWITCH_INDEX_A;
                
                m_lDataKey[PARAM_OBJECTDEFINE_INFO] = OBJECTDEFINE_DATA_A;
                m_lIndexKey[PARAM_OBJECTDEFINE_INFO] = OBJECTDEFINE_INDEX_A;
                
                m_lDataKey[PARAM_EVENTPARSERGROUP_INFO] = EVENTPARSERGROUP_DATA_A;
                m_lIndexKey[PARAM_EVENTPARSERGROUP_INFO] = EVENTPARSERGROUP_INDEX_A;
                
                m_lDataKey[PARAM_TEMPLATE_RELATION_INFO] = TEMPLATE_RELATION_DATA_A;
                m_lIndexKey[PARAM_TEMPLATE_RELATION_INFO] = TEMPLATE_RELATION_INDEX_A;          
                m_lDataKey[PARAM_FIELD_SHM_INFO] = FIELD_SHM_DATA_A;
                m_lIndexKey[PARAM_FIELD_SHM_INFO] = FIELD_TEMPLATE_INDEX_A;
				m_lIndexKey[PARAM_FIELD_UNIONINDEX_INFO] = FIELD_UNION_INDEX_A;
                        
                m_lDataKey[PARAM_SWITCH_TYPE_INFO] = SWITCH_TYPE_INFO_DATA_A;
                m_lIndexKey[PARAM_SWITCH_TYPE_INFO] = SWITCH_TYPE_INFO_INDEX_A;
                /*
                m_lDataKey[PARAM_EPGGROUP_INFO] = EPGGROUP_DATA_A;
                m_lIndexKey[PARAM_EPGGROUP_INFO] = EPGGROUP_INDEX_A;*/
                
                m_lDataKey[PARAM_EVENT_ATTR_INFO] = EVENT_ATTR_DATA_A;
                m_lIndexKey[PARAM_EVENT_ATTR_INFO] = EVENT_ATTR_INDEX_A;
                
                //m_lDataKey[PARAM_FILE_INFO_INFO] = FILE_INFO_DATA_A;
                //m_lIndexKey[PARAM_FILE_INFO_INFO] = FILE_INFO_INDEX_A;
                
                m_lDataKey[PARAM_EVENT_HEAD_COLUMNS_INFO] = EVENT_HEAD_COLUMNS_CFG_A;
                m_lIndexKey[PARAM_EVENT_HEAD_COLUMNS_INFO] = EVENT_HEAD_COLUMNS_INDEX_A;
                
                m_lDataKey[PARAM_SWITCHID_MAP_SWITCH_INFO] = SWITCHID_MAP_SWITCH_DATA_A;
                m_lIndexKey[PARAM_SWITCHID_MAP_SWITCH_INFO] = SWITCHID_MAP_SWITCH_INDEX_A;
                
                m_lDataKey[PARAM_FIELD_CHECK_METHOD_INFO] = FIELD_CHECK_METHOD_DATA_A;
                m_lIndexKey[PARAM_FIELD_CHECK_METHOD_INFO] = FIELD_CHECK_METHOD_INDEX_A;
                
                m_lDataKey[PARAM_FIELD_VALUE_MAP_INFO] = FIELD_VALUE_MAP_DATA_A;
                m_lIndexKey[PARAM_FIELD_VALUE_MAP_INFO] = FIELD_VALUE_MAP_INDEX_A;
                
                m_lDataKey[PARAM_FIELD_MERGE_INFO] = FIELD_MERGE_DATA_A;
                m_lIndexKey[PARAM_FIELD_MERGE_INFO] = FIELD_MERGE_INDEX_A;
                
                m_lDataKey[PARAM_TAP3FILE_INFO] = TAP3FILE_DATA_A;
                m_lDataKey[PARAM_TAP3BLOCK_INFO] = TAP3_BLOCK_DATA_A;
		//m_lIndexKey[PARAM_TAP3BLOCK_INFO] = TAP3_BLOCK_INDEX_A;
                
                m_lDataKey[PARAM_SEPFILE_INFO] = SEP_FILE_DATA_A;
                m_lDataKey[PARAM_SEPBLOCK_INFO] = SEP_BLOCK_DATA_A;
		//m_lIndexKey[PARAM_SEPBLOCK_INFO] = SEP_BLOCK_INDEX_A;
                
                m_lDataKey[PARAM_MERGE_RULE_INFO] = MERGE_RULE_DATA_A;
                m_lIndexKey[PARAM_MERGE_RULE_INFO] = MERGE_RULE_INDEX_A;
		m_lDataKey[PARAM_MERGE_ASSOCIATE_RULE_INFO] = MERGE_ASSCOCIATE_RULE_DATA_A;
		m_lIndexKey[PARAM_MERGE_ASSOCIATE_RULE_INFO] = MERGE_ASSCOCIATE_RULE_INDEX_A;
                m_lDataKey[PARAM_MERGE_OUT_INFO] = MERGE_OUT_DATA_A;
                m_lIndexKey[PARAM_MERGE_OUT_INFO] = MERGE_OUT_INDEX_A;
                
                m_lDataKey[PARAM_MERGE_KEY_INFO] = MERGE_KEY_DATA_A;
                m_lIndexKey[PARAM_MERGE_KEY_INFO] = MERGE_KEY_INDEX_A;
		//
		m_lIndexKey[PARAM_ACCT_GROUP_STR_INFO] = ACCTITEM_GROUP_STR_INFO_INDEX_A;
		m_lIndexKey[PARAM_ACCT_GROUPB_STR_INFO] = ACCTITEM_GROUPB_STR_INFO_INDEX_A;
		m_lIndexKey[PARAM_ACCT_STR_INFO] = ACCTITEM_STR_INFO_INDEX_A;
    } else {
		m_lDataKey[PARAM_M_SERVACCT_INFO] = M_SERVACCT_INFO_DATA_B;
        m_lIndexKey[PARAM_M_SERVACCT_INFO] = M_SERVACCT_INFO_INDEX_B;
        m_lDataKey[LOGICSTATEMENT_INFO] = LOGICSTATE_INFO_DATA_B;
        m_lIndexKey[LOGICSTATEMENT_INFO] = LOGICSTATE_INFO_INDEX_B;
        m_lDataKey[ASSIGNSTATEMENT_INFO] = ASSIGNSTATE_INFO_DATA_B;
        m_lIndexKey[ASSIGNSTATEMENT_INFO] = ASSIGNSTATE_INFO_INDEX_B;
        m_lDataKey[FORMULA_INFO] = FORMULA_INFO_DATA_B;
        m_lIndexKey[FORMULA_INFO] = FORMULA_INFO_INDEX_B;

        m_lDataKey[ATTR_FORMAT_GROUP_INFO] = FORMAT_GROUP_INFO_DATA_B;
        m_lDataKey[ATTR_FORMAT_STEP_INFO] = FORMAT_STEP_INFO_DATA_B;
        m_lDataKey[ATTR_FORMAT_RULE_INFO] = FORMAT_RULE_INFO_DATA_B;
        m_lDataKey[ATTR_FORMAT_COMB_INFO] = FORMAT_COMB_INFO_DATA_B;

        m_lDataKey[TRUNK_INFO] = TRUNK_INFO_DATA_B;
        m_lIndexKey[TRUNK_INFO] = TRUNK_INFO_INDEX_B;
        m_lIndexKey[AREACODE_INFO] = AREACODE_INFO_INDEX_B;
        m_lDataKey[HLR_INFO]  = HLR_INFO_DATA_B;
        m_lIndexKey[HLR_INFO] = HLR_INFO_INDEX_B;
		//
		m_lDataKey[VISIT_AREACODE_RULE_INFO] = VISITAREACODERULE_INFO_DATA_B;
		m_lIndexKey[VISIT_AREACODE_RULE_INFO] = VISITAREACODERULE_INFO_INDEX_B;
		
		m_lDataKey[EDGEROAM_RULE_INFO] = EDGEROAMRULE_INFO_DATA_B;
		m_lIndexKey[EDGEROAM_RULE_INFO] = EDGEROAMRULE_INFO_INDEX_B;
		//
		m_lDataKey[PNSEGBILLINGEX_INFO] = PNSEGBILLINGEX_INFO_DATA_B;
		m_lDataKey[PNSEGBILLING_INFO] = PNSEGBILLING_INFO_DATA_B;
		//
        m_lIndexKey[CARRIER_INFO] = CARRIER_INFO_INDEX_B;
		//new
		m_lDataKey[PNNOTBILLING_INFO] = PNNOTBILLING_INFO_DATA_B;
		m_lIndexKey[PNNOTBILLING_INFO] = PNNOTBILLING_INFO_INDEX_B;
		
		m_lDataKey[TRUNKTREENODE_INFO] = TRUNKTREENODE_INFO_DATA_B;
		m_lIndexKey[TRUNKTREENODE_INFO] = TRUNKTREENODE_INFO_INDEX_B;
		
        //m_lDataKey[SERVICE_INFO]  = SERVICE_INFO_DATA_B;
		
		m_lDataKey[TSERVICEINFO2_INFO] = TSERVICEINFO2_INFO_DATA_B;
		m_lIndexKey[TSERVICEINFO2_INFO] = TSERVICEINFO2_INFO_INDEX_B;
		
		m_lIndexKey[SPEC_TRUNK_PRODUCT_INFO] = SPEC_TRUNK_PRODUCT_INFO_INDEX_B;
		
		m_lDataKey[SWITCHITEMTYPE_INFO] = SWITCHITEMTYPE_DATA_B;
		m_lIndexKey[SWITCHITEMTYPE_INFO] = SWITCHITEMTYPE_INDEX_B;
		
		m_lDataKey[STR_LOCALAREACODE_INFO] = STR_LOCALAREACODE_INFO_DATA_B;
		
        m_lDataKey[SWITCH_INFO]   = SWITCH_INFO_DATA_B;
        m_lIndexKey[SWITCH_INFO]  = SWITCH_INFO_INDEX_B;
        m_lIndexKey[SWITCH_OPC_INFO]= SWITCH_INFO_OPC_INDEX_B;
		
        m_lDataKey[TRUNKBILLING_INFO] = TRUNKBILLING_INFO_DATA_B;
        m_lIndexKey[TRUNKBILLING_INFO] = TRUNKBILLING_INFO_INDEX_B;
		
        m_lIndexKey[TIMESTYPE_INFO] = TIMESTYPE_INFO_INDEX_B;

		m_lDataKey[FILTER_RULE_RESULT_INFO] = FILTER_RULE_RESULT_INFO_DATA_B;
        m_lIndexKey[FILTER_RULE_RESULT_CALLING_INFO] = FILTER_RULE_RESULT_CALLING_INFO_INDEX_B;
		m_lIndexKey[FILTER_RULE_RESULT_CALLED_INFO] = FILTER_RULE_RESULT_CALLED_INFO_INDEX_B;
		m_lIndexKey[FILTER_RULE_RESULT_AREACODE_INFO] = FILTER_RULE_RESULT_AREACODE_INFO_INDEX_B;
		m_lIndexKey[FILTER_RULE_RESULT_GATHERPOT_INFO] = FILTER_RULE_RESULT_GATHERPOT_INFO_INDEX_B;
		m_lIndexKey[FILTER_RULE_RESULT_TRUNCKIN_INFO] = FILTER_RULE_RESULT_TRUNCKIN_INFO_INDEX_B;
		m_lIndexKey[FILTER_RULE_RESULT_TRUNCKOUT_INFO] = FILTER_RULE_RESULT_TRUNCKOUT_INFO_INDEX_B;
		m_lIndexKey[FILTER_RULE_RESULT_SWITCHID_INFO] = FILTER_RULE_RESULT_SWITCHID_INFO_INDEX_B;
		//
        m_lDataKey[CITY_INFO] = CITY_INFO_DATA_B;
        m_lIndexKey[CITY_INFO] = CITY_INFO_INDEX_B;
        m_lIndexKey[CITY_AREA_INFO] = CITY_AREA_INFO_INDEX_B;

        m_lDataKey[ORG_INFO] = ORG_INFO_DATA_B;
        m_lIndexKey[ORG_INFO] = ORG_INFO_INDEX_B;
        m_lDataKey[ORGEX_INFO] = ORGEX_INFO_DATA_B;
        m_lIndexKey[ORGEX_INFO] = ORGEX_INFO_INDEX_B;
        m_lDataKey[ORGLONGTYPE_INFO] = ORGLONGTYPE_INFO_DATA_B;
        m_lIndexKey[ORGLONGTYPE_INFO] = ORGLONGTYPE_INFO_INDEX_B;
        m_lDataKey[HEADEX_INFO] = HEADEX_INFO_DATA_B;
        m_lIndexKey[HEADEX_INFO] = HEADEX_INFO_INDEX_B;
        m_lDataKey[LOCALHEAD_INFO] = LOCALHEAD_INFO_DATA_B;
        m_lIndexKey[LOCALHEAD_INFO] = LOCALHEAD_INFO_INDEX_B;

        m_lDataKey[EVENTTYPE_INFO] = EVENTTYPE_INFO_DATA_B;
        m_lIndexKey[EVENTTYPE_INFO] = EVENTTYPE_INFO_INDEX_B;
        m_lDataKey[EVENTTYPEGROUP_INFO] = EVENTTYPEGROUP_INFO_DATA_B;
        m_lIndexKey[EVENTTYPEGROUP_INFO] = EVENTTYPEGROUP_INFO_INDEX_B;

        m_lDataKey[OFFER_INFO] = OFFER_INFO_DATA_B;
        m_lIndexKey[OFFER_INFO] = OFFER_INFO_INDEX_B;
        m_lIndexKey[OFFER_SPECATTR_INFO] = OFFER_INFO_SPECATTR_INDEX_B;
        m_lIndexKey[OFFER_NUMATTR_INFO] = OFFER_INFO_NUMATTR_INDEX_B;
        m_lIndexKey[OFFER_FREE_INFO] = OFFER_INFO_FREE_INDEX_B;

        m_lDataKey[NBR_MAP_INFO] = NBR_MAP_INFO_DATA_B;
        m_lIndexKey[NBR_MAP_INDEX1_INFO] = NBR_MAP_INDEX1_INDEX_B;
        m_lIndexKey[NBR_MAP_INDEX2_INFO] = NBR_MAP_INDEX2_INDEX_B;
        m_lIndexKey[NBR_MAP_INDEX4_INFO] = NBR_MAP_INDEX4_INDEX_B;
        m_lIndexKey[NBR_MAP_INDEX8_INFO] = NBR_MAP_INDEX8_INDEX_B;

        m_lDataKey[ACCTITEM_INFO] = ACCTITEM_INFO_DATA_B;
        m_lIndexKey[ACCTITEM_INFO] = ACCTITEM_INFO_INDEX_B;
        m_lDataKey[ACCTITEM_GROUP_INFO] = ACCTITEM_GROUP_INFO_DATA_B;
        m_lIndexKey[ACCTITEM_GROUP_INFO] = ACCTITEM_GROUP_INFO_INDEX_B;
        m_lDataKey[ACCTITEM_GROUPB_INFO] = ACCTITEM_GROUPB_INFO_DATA_B;
        m_lIndexKey[ACCTITEM_GROUPB_INFO] = ACCTITEM_GROUPB_INFO_INDEX_B;
        m_lDataKey[ACCTITEM_BASICGROUPB_INFO] = ACCTITEM_BASICGROUPB_INFO_DATA_B;
        m_lIndexKey[ACCTITEM_BASICGROUPB_INFO] = ACCTITEM_BASICGROUPB_INFO_INDEX_B;
        m_lDataKey[ACCTITEM_DISCTGROUPB_INFO] = ACCTITEM_DISCTGROUPB_INFO_DATA_B;
        m_lIndexKey[ACCTITEM_DISCTGROUPB_INFO] = ACCTITEM_DISCTGROUPB_INFO_INDEX_B;
        m_lIndexKey[ACCTITEM_INCLUDEDISCT_INFO] = ACCTITEM_INCLUDEDISCT_INFO_INDEX_B;

        m_lDataKey[LONGEVENTTYPERULE_INFO] = LONGEVENTTYPERULE_INFO_DATA_B;
        m_lDataKey[LONGEVENTTYPERULEEX_INFO] = LONGEVENTTYPERULEEX_INFO_DATA_B;

        m_lIndexKey[PRICINGPLANTYPE_INFO] = PRICINGPLANTYPE_INFO_INDEX_B;

        m_lDataKey[STATECONVERT_INFO] = STATECONVERT_INFO_DATA_B;
        m_lIndexKey[STATECONVERT_INFO] = STATECONVERT_INFO_INDEX_B;

        m_lDataKey[VALUEMAP_INFO] = VALUEMAP_INFO_DATA_B;
        m_lIndexKey[VALUEMAP_INFO] = VALUEMAP_INFO_INDEX_B;

        m_lDataKey[ZONE_ITEM_INFO] = ZONE_ITEM_INFO_DATA_B;
        m_lIndexKey[ZONE_ITEM_INFO] = ZONE_ITEM_INFO_INDEX_B;
        m_lIndexKey[PARAM_ZONEITEM_STR_INFO] = ZONE_ITEM_STR_INDEX_B;

        m_lDataKey[SPLITACCTITEMGROUP_INFO] = SPLITACCTITEMGROUP_DATA_B;
        m_lIndexKey[SPLITACCTITEMGROUP_INFO] = SPLITACCTITEMGROUP_INDEX_B;
        m_lDataKey[SPLITACCTGROUPEVENT_INFO] = SPLITACCTGROUPEVENT_DATA_B;
        m_lIndexKey[SPLITACCTGROUPEVENT_INFO] = SPLITACCTGROUPEVENT_INDEX_B;

        m_lDataKey[DISTANCETYPE_INFO] = DISTANCETYPE_DATA_B;
        m_lIndexKey[DISTANCETYPE_INFO] = DISTANCETYPE_INDEX_B;

        m_lDataKey[EDGEROAMRULEEX_INFO] = EDGEROAMRULEEX_DATA_B;
        m_lIndexKey[EDGEROAMRULEEX_TYPEA_INFO] = EDGEROAMRULEEX_TYPEA_INDEX_B;
        m_lIndexKey[EDGEROAMRULEEX_TYPEB_INFO] = EDGEROAMRULEEX_TYPEB_INDEX_B;
        m_lIndexKey[EDGEROAMRULEEX_MSC_INFO] = EDGEROAMRULEEX_MSC_INDEX_B;

        m_lDataKey[PRICINGSECTION_INFO] = PRICINGSECTION_INFO_DATA_B;
        m_lIndexKey[PRICINGSECTION_INFO] = PRICINGSECTION_INFO_INDEX_B;
        m_lIndexKey[SECTIONSTRATEGY_INFO] = SECTIONSTRATEGY_INFO_INDEX_B;

        m_lDataKey[TARIFF_INFO] = TARIFF_INFO_DATA_B;
        m_lIndexKey[TARIFF_INFO] = TARIFF_INFO_INDEX_B;

        m_lDataKey[DISCOUNT_INFO] = DISCOUNT_INFO_DATA_B;
        m_lIndexKey[DISCOUNT_INFO] = DISCOUNT_INFO_INDEX_B;

        m_lDataKey[DISCTAPPLYER_INFO] = DISCTAPPLYER_INFO_DATA_B;
        m_lIndexKey[DISCTAPPLYER_INFO] = DISCTAPPLYER_INFO_INDEX_B;

        m_lDataKey[DISCTAPPLYEROBJ_INFO] = DISCTAPPLYEROBJ_INFO_DATA_B;
        m_lIndexKey[DISCTAPPLYEROBJ_INFO] = DISCTAPPLYEROBJ_INFO_INDEX_B;

        m_lDataKey[PARAM_PERCENTINFO] = PERCENT_INFO_DATA_B;
        m_lIndexKey[PARAM_PERCENTINFO] = PERCENT_INFO_INDEX_B;

        m_lDataKey[PARAM_LIFECYCLEINFO] = LIFECYCLE_INFO_DATA_B;
        m_lIndexKey[PARAM_LIFECYCLEINFO] = LIFECYCLE_INFO_INDEX_B;

        m_lDataKey[PARAM_MEASUREINFO] = MEASURE_INFO_DATA_B;
        m_lIndexKey[PARAM_MEASUREINFO] = MEASURE_INFO_INDEX_B;
        m_lIndexKey[PARAM_STRATEGYMEASUREINFO] = STRATEGYMEASURE_INFO_INDEX_B;

        m_lDataKey[PARAM_COMBINETINFO] = COMBINE_INFO_DATA_B;
        m_lIndexKey[PARAM_COMBINETINFO] = COMBINE_INFO_INDEX_B;
        m_lIndexKey[PARAM_PLAN_COMBINETINFO] = PLAN_COMBINE_INFO_INDEX_B;
        m_lIndexKey[PARAM_STRATEGY_COMBINETINFO] = STRATEGY_COMBINE_INFO_INDEX_B;

        m_lDataKey[PARAM_FILTERCONDINFO] = FILTERCOND_INFO_DATA_B;
        m_lIndexKey[PARAM_FILTERCONDINFO] = FILTERCOND_INFO_INDEX_B;

        m_lDataKey[PARAM_CONDITIONPOINTINFO] = CONDITIONPOINT_INFO_DATA_B;

        m_lDataKey[PARAM_USAGETYPEINFO] = USAGETYPE_INFO_DATA_B;
        m_lIndexKey[PARAM_USAGETYPEINFO] = USAGETYPE_INFO_INDEX_B;

        m_lDataKey[PARAM_TIMECONDINFO] = ACCTTYPECFG_TIMECOND_INFO_DATA_B; 
        m_lIndexKey[PARAM_TIMECONDINFO] = ACCTTYPECFG_TIMECOND_INFO_INDEX_B;

        m_lDataKey[PARAM_EVENTTYPECONDINFO] = ACCTTYPECFG_EVENTTYPECOND_INFO_DATA_B; 
        m_lIndexKey[PARAM_EVENTTYPECONDINFO] = ACCTTYPECFG_EVENTTYPECOND_INFO_INDEX_B;

        m_lDataKey[PARAM_CYCLETYPEINFO] = ACCTTYPECFG_CYCLETYPE_INFO_DATA_B; 
        m_lIndexKey[PARAM_CYCLETYPEINFO] = ACCTTYPECFG_CYCLETYPE_INFO_INDEX_B;

        m_lDataKey[PARAM_ACCTTYPEINFO] = ACCTTYPECFG_ACCTTYPE_INFO_DATA_B; 
        m_lIndexKey[PARAM_ACCTTYPEINFO] = ACCTTYPECFG_ACCTTYPE_INFO_INDEX_B;

        m_lDataKey[PARAM_OFFERACCTRELATIONINFO] = ACCTTYPECFG_OFFERACCTRELATION_INFO_DATA_B; 
        m_lIndexKey[PARAM_OFFERACCTRELATIONINFO] = ACCTTYPECFG_OFFERACCTRELATION_INFO_INDEX_B;

        m_lIndexKey[PARAM_OFFERACCTEXISTINFO] = ACCTTYPECFG_OFFERACCTEXIST_INFO_INDEX_B;

#ifdef EVENT_AGGR_RECYCLE_USE           
		m_lDataKey[PARAM_CYCLETYPEIDINFO]  = ACCTTYPECFG_CYCLETYPEID_INFO_DATA_B;          
        m_lIndexKey[PARAM_CYCLETYPEIDINFO] = ACCTTYPECFG_CYCLETYPEID_INFO_INDEX_B;
#endif

        m_lIndexKey[PARAM_OFFERCOMBINEINFO] = OFFERCOMBINE_INFO_INDEX_B;
        m_lIndexKey[PARAM_OFFERDISCTINFO] = OFFERDISCT_INFO_INDEX_B;

        m_lIndexKey[PARAM_PRODUCTCOMBINEINFO] = PRODUCTCOMBINE_INFO_INDEX_B;

        m_lDataKey[PARAM_SPLITCFGINFO] = SPLITCFG_INFO_DATA_B;
        m_lIndexKey[PARAM_SPLITCFGINFO] = SPLITCFG_INFO_INDEX_B;

        m_lDataKey[PARAM_VIRTUAL_STRATEGY_COMBINETINFO] = VIRTUAL_STRATEGY_COMBINE_INFO_DATA_B; 
        m_lIndexKey[PARAM_VIRTUAL_STRATEGY_COMBINETINFO] = VIRTUAL_STRATEGY_COMBINE_INFO_INDEX_B;

#ifdef WHOLE_DISCOUNT
        m_lDataKey[PARAM_WHOLEDISCOUNTINFO] = WHOLEDISCOUNT_INFO_DATA_B; 
#endif

#ifdef GROUP_CONTROL
        m_lDataKey[PARAM_CGCOMBINEINFO] = CGCOMBINE_INFO_DATA_B;
        m_lIndexKey[PARAM_CGCOMBINEINFO] = CGCOMBINE_INFO_INDEX_B;
#endif



        m_lDataKey[PARAM_COMBINERELATIONINFO] = COMBINERELATION_INFO_DATA_B;
        m_lIndexKey[PARAM_COMBINERELATIONINFO] = COMBINERELATION_INFO_INDEX_B;

        //m_lDataKey[PARAM_DIRECTORYINFO] = DIRECTORY_INFO_DATA_B;
        //m_lIndexKey[PARAM_DIRECTORYINFO] = DIRECTORY_INFO_INDEX_B;

        m_lDataKey[PARAM_SPECIALNBRSTRATEGYINFO] = SPECIALNBRSTRATEGY_INFO_DATA_B; 
        m_lIndexKey[PARAM_SPECIALNBRSTRATEGYINFO] = SPECIALNBRSTRATEGY_INFO_INDEX_B;        
        m_lIndexKey[PARAM_SPECIALNBROFFERINFO] = SPECIALNBROFFER_INFO_INDEX_B;

//重了          m_lIndexKey[PARAM_OFFERCOMBINEINFO] = OFFERCOMBINE_INFO_INDEX_B;

//重了          m_lIndexKey[PARAM_PRODUCTCOMBINEINFO] = PRODUCTCOMBINE_INFO_INDEX_B;

        m_lDataKey[PARAM_HOSTINFO] = HOSTINFO_INFO_DATA_B;
        m_lIndexKey[PARAM_HOSTINFO] = HOSTINFO_INFO_INDEX_B;

        m_lDataKey[PARAM_GATHERTESKINFO] = GATHERTESK_INFO_DATA_B;
        m_lIndexKey[PARAM_GATHERTESKINFO] = GATHERTESK_INFO_INDEX_B;
        m_lIndexKey[PARAM_ORGGATHERTESKINFO] = ORGGATHERTESK_INFO_INDEX_B;

        m_lIndexKey[PARAM_PRODUCTIDINFO] = PRODUCTID_INFO_INDEX_B;
        m_lIndexKey[PARAM_PRODUCTACCITEMINFO] = PRODUCTACCTITEMS_INFO_INDEX_B;

        m_lDataKey[PARAM_SPECIALTRIFFINFO] = SPECIALTRIFF_INFO_DATA_B; 
        m_lIndexKey[PARAM_SPECIALTRIFFINFO] = SPECIALTRIFF_INFO_INDEX_B;
        m_lDataKey[PARAM_SPECIALTRIFFCHECKINFO] = SPECIALTRIFFCHECK_INFO_DATA_B; 
        m_lIndexKey[PARAM_SPECIALTRIFFCHECKINFO] = SPECIALTRIFFCHECK_INFO_INDEX_B;

        m_lDataKey[PARAM_SPINFODATAINFO] = SPINFODATA_INFO_DATA_B; 
        m_lIndexKey[PARAM_SPINFODATAINFO] = SPINFODATA_INFO_INDEX_B;

        m_lDataKey[PARAM_GATHERTASKLISTINFO] = GATHERTASKLISTINFO_INFO_DATA_B; 
        m_lIndexKey[PARAM_GATHERTASKLISTINFO] = GATHERTASKLISTINFO_INFO_INDEX_B;

        m_lDataKey[PARAM_SEGMENTINFO] = SEGMENTINFO_INFO_DATA_B; 
        m_lIndexKey[PARAM_SEGMENTINFO] = SEGMENTINFO_INFO_INDEX_B;
        m_lIndexKey[PARAM_SEGMENTTYPEINFO] = SEGMENTTYPEINFO_INFO_INDEX_B;

        m_lIndexKey[PARAM_LONGTYPEINFO] = LONGTYPE_INFO_INDEX_B;
        m_lDataKey[PARAM_CHECKRULE_RULE_INFO] = CHECKRULE_RULE_INFO_DATA_B; 
        m_lIndexKey[PARAM_CHECKRULE_RULE_INFO] = CHECKRULE_RULE_INFO_INDEX_B;
        m_lDataKey[PARAM_CHECKRULE_SUBRULE_INFO] = CHECKRULE_SUBRULE_INFO_DATA_B; 
        m_lIndexKey[PARAM_CHECKRULE_SUBRULE_INFO] = CHECKRULE_SUBRULE_INFO_INDEX_B;
        m_lDataKey[PARAM_CHECKARGUMENT_INFO] = CHECKARGUMENT_INFO_DATA_B; 
        m_lDataKey[PARAM_CHECKRELATION_INFO] = CHECKRELATION_INFO_DATA_B; 
        m_lDataKey[PARAM_TRANSFILE_INFO] = TRANSFILETYPE_INFO_DATA_B; 
        m_lIndexKey[PARAM_TRANSFILE_INFO] = TRANSFILETYPE_INFO_INDEX_B;
        m_lDataKey[PARAM_PARSERULE_INFO] = PARSERULE_INFO_DATA_B; 
        m_lIndexKey[PARAM_PARSERULE_INFO] = PARSERULE_INFO_INDEX_B;
        m_lDataKey[PARAM_PARSECOMB_INFO] = PARSECOMB_INFO_DATA_B;
        m_lIndexKey[PARAM_PARSECOMB_INFO] = PARSECOMB_INFO_INDEX_B;
        m_lDataKey[PARAM_INSTTABLELIST_INFO] = INSTTABLELIST_INFO_DATA_B;
        m_lIndexKey[PARAM_INSTTABLELIST_INFO] = INSTTABLELIST_INFO_INDEX_B;
        m_lDataKey[PARAM_TABLETYPE_INFO] = TABLETYPE_INFO_DATA_B;
        m_lIndexKey[PARAM_TABLETYPE_INFO] = TABLETYPE_INFO_INDEX_B;
        m_lIndexKey[PARAM_RENT_CONFIG_INFO] = RENT_CONFIG_INFO_INDEX_B;
        m_lDataKey[PARAM_NETWORKPRIORITY_INFO] = NETWORKPRIORITY_INFO_DATA_B;
        m_lIndexKey[PARAM_NETWORKPRIORITY_INFO] = NETWORKPRIORITY_INFO_INDEX_B;
        m_lDataKey[PARAM_TRUNKTOBENBR_INFO] = TRUNKTOBENBR_INFO_DATA_B; 
        m_lIndexKey[PARAM_TRUNKTOBENBR_INFO] = TRUNKTOBENBR_INFO_INDEX_B;

        m_lDataKey[PARAM_CHECKDUPCFG_INFO] = CHECKDUPCFG_INFO_DATA_B;
        m_lIndexKey[PARAM_CHECKDUPCFG_INFO] = CHECKDUPCFG_INFO_INDEX_B;
        m_lDataKey[PARAM_CHECKDUPTYPE_INFO] = CHECKDUPTYPE_INFO_DATA_B;
        m_lIndexKey[PARAM_CHECKDUPTYPE_INFO] = CHECKDUPTYPE_INFO_INDEX_B;
        m_lDataKey[PARAM_CHECKDUPSTEP_INFO] = CHECKDUPSTEP_INFO_DATA_B;
        m_lIndexKey[PARAM_CHECKDUPSTEP_INFO] = CHECKDUPSTEP_INFO_INDEX_B;
        m_lDataKey[PARAM_CHECKSHOTTICKET_INFO] = CHECKSHOTTICKET_INFO_DATA_B;
        m_lIndexKey[PARAM_CHECKSHOTTICKET_INFO] = CHECKSHOTTICKET_INFO_INDEX_B;
        m_lDataKey[PARAM_UNDOPROCESSDUP_INFO] = UNDOPROCESSDUP_INFO_DATA_B;
        m_lIndexKey[PARAM_UNDOPROCESSDUP_INFO] = UNDOPROCESSDUP_INFO_INDEX_B;
        m_lDataKey[PARAM_UNDOPROCESSSHOT_INFO] = UNDOPROCESSSHOT_INFO_DATA_B;
        m_lIndexKey[PARAM_UNDOPROCESSSHOT_INFO] = UNDOPROCESSSHOT_INFO_INDEX_B;
        m_lDataKey[PARAM_UNDOSERVDUP_INFO] = UNDOSERVDUP_INFO_DATA_B;
        m_lDataKey[PARAM_UNDOPRODUCTDUP_INFO] = UNDOPRODUCTDUP_INFO_DATA_B;
        m_lIndexKey[PARAM_PRODUCTCFG_INFO] = PRODUCT_CONFIG_INFO_INDEX_B;

        m_lDataKey[PARAM_ORGPATH_INFO] = PARAM_ORGPATH_INFO_DATA_B;
        m_lIndexKey[PARAM_ORGPATH_INFO] = PARAM_ORGPATH_INFO_INDEX_B;
        m_lDataKey[PARAM_LOCALEVENTTYPERULE_INFO] = PARAM_LOCALEVENTTYPERULE_INFO_DATA_B;
        m_lIndexKey[PARAM_LOCALEVENTTYPERULE_INFO] = PARAM_LOCALEVENTTYPERULE_INFO_INDEX_B;

        //2010.11.17
        m_lDataKey[FILEPOOL_INFO] = FILEPOOL_DATA_B;
        m_lIndexKey[FILEPOOL_INFO] = FILEPOOL_INDEX_B;
        m_lDataKey[FILEPOOL_COND_INFO] = FILEPOOL_COND_DATA_B;
        m_lIndexKey[FILEPOOL_COND_INFO] = FILEPOOL_COND_INDEX_B;
        m_lIndexKey[FILETYPE_INFO] = FILETYPE_INDEX_B;
        m_lDataKey[TLVENCODE_INFO] = TLVENCODE_DATA_B;
        m_lIndexKey[TLVENCODE_INFO] = TLVENCODE_INDEX_B;
        m_lDataKey[TLVDECODE_INFO] = TLVDECODE_DATA_B;
        m_lIndexKey[TLVDECODE_INFO] = TLVDECODE_INDEX_B;

        m_lDataKey[BILLINGNODE_INFO] = BILLINGNODE_DATA_B;
        m_lIndexKey[BILLINGNODE_INFO] = BILLINGNODE_INDEX_B;
                m_lIndexKey[FILEPARSERULE_INFO] = FILEPARSERULE_INDEX_B;
        m_lDataKey[SWITCHCODE_INFO] = SWITCHCODE_DATA_B;
        m_lIndexKey[SWITCHCODE_INFO] = SWITCHCODE_INDEX_B;
        //2010.12.20
        m_lDataKey[ROAMTARIFF_INFO] = ROAMTARIFF_DATA_B;
        m_lIndexKey[ROAMTARIFF_INFO] = ROAMTARIFF_INDEX_B;
        m_lDataKey[ROAMCARRIER_INFO] = ROAMCARRIER_DATA_B;
        m_lIndexKey[ROAMCARRIER_INFO] = ROAMCARRIER_INDEX_B;
        m_lIndexKey[TARIFFSECTOR_INFO] = TARIFFSECTOR_INDEX_B;
        m_lDataKey[COUNTRY_INFO_A] = COUNTRY_DATA_B;
        m_lIndexKey[COUNTRY_INFO_A] = COUNTRY_CODE_INDEX_B;
        m_lIndexKey[COUNTRY_INFO_B] = COUNTRY_AREA_INDEX_B;
        m_lDataKey[ROAMSPONSOR_INFO] = ROAMSPONSOR_DATA_B;
        m_lIndexKey[ROAMSPONSOR_INFO] = ROAMSPONSOR_INDEX_B;
        m_lDataKey[SPECIALGROUPMEMBER_INFO] = SPECIALGROUPMEMBER_DATA_B;
        m_lIndexKey[SPECIALGROUPMEMBER_INFO] = SPECIALGROUPMEMBER_INDEX_B;
                //std
                /*m_lDataKey[PARAM_STD_STRUCT_INFO] = STD_STRUCT_DATA_B;
                m_lIndexKey[PARAM_STD_STRUCT_INFO] = STD_STRUCT_TYPE_INDEX_B;
                m_lDataKey[PARAM_STRUCT_INFO_DESC] = STD_STRUCT_DATA_DESC_B;*/
                //prep
                m_lDataKey[PARAM_TEMPLATEMAPSWITCH_INFO] = TEMPLATEMAPSWITCH_DATA_B;
                m_lIndexKey[PARAM_TEMPLATEMAPSWITCH_INFO] = TEMPLATEMAPSWITCH_INDEX_B;
                
                m_lDataKey[PARAM_OBJECTDEFINE_INFO] = OBJECTDEFINE_DATA_B;
                m_lIndexKey[PARAM_OBJECTDEFINE_INFO] = OBJECTDEFINE_INDEX_B;
                
                m_lDataKey[PARAM_EVENTPARSERGROUP_INFO] = EVENTPARSERGROUP_DATA_B;
                m_lIndexKey[PARAM_EVENTPARSERGROUP_INFO] = EVENTPARSERGROUP_INDEX_B;
                
                m_lDataKey[PARAM_TEMPLATE_RELATION_INFO] = TEMPLATE_RELATION_DATA_B;
                m_lIndexKey[PARAM_TEMPLATE_RELATION_INFO] = TEMPLATE_RELATION_INDEX_B;          
                m_lDataKey[PARAM_FIELD_SHM_INFO] = FIELD_SHM_DATA_B;
                m_lIndexKey[PARAM_FIELD_SHM_INFO] = FIELD_TEMPLATE_INDEX_B;
				m_lIndexKey[PARAM_FIELD_UNIONINDEX_INFO] = FIELD_UNION_INDEX_B;
				/*
                m_lDataKey[PARAM_SWITCH_SHM_INFO] = SWITCH_SHM_INFO_DATA_B;
                m_lIndexKey[PARAM_SWITCH_SHM_INFO] = SWITCH_SHM_INFO_INDEX_B;*/         
                m_lDataKey[PARAM_SWITCH_TYPE_INFO] = SWITCH_TYPE_INFO_DATA_B;
                m_lIndexKey[PARAM_SWITCH_TYPE_INFO] = SWITCH_TYPE_INFO_INDEX_B;
                /*
                m_lDataKey[PARAM_EPGGROUP_INFO] = EPGGROUP_DATA_B;
                m_lIndexKey[PARAM_EPGGROUP_INFO] = EPGGROUP_INDEX_B;
                */
                m_lDataKey[PARAM_EVENT_ATTR_INFO] = EVENT_ATTR_DATA_B;
                m_lIndexKey[PARAM_EVENT_ATTR_INFO] = EVENT_ATTR_INDEX_B;
                
                //m_lDataKey[PARAM_FILE_INFO_INFO] = FILE_INFO_DATA_B;
                //m_lIndexKey[PARAM_FILE_INFO_INFO] = FILE_INFO_INDEX_B;
                
                m_lDataKey[PARAM_EVENT_HEAD_COLUMNS_INFO] = EVENT_HEAD_COLUMNS_CFG_B;
                m_lIndexKey[PARAM_EVENT_HEAD_COLUMNS_INFO] = EVENT_HEAD_COLUMNS_INDEX_B;
                
                m_lDataKey[PARAM_SWITCHID_MAP_SWITCH_INFO] = SWITCHID_MAP_SWITCH_DATA_B;
                m_lIndexKey[PARAM_SWITCHID_MAP_SWITCH_INFO] = SWITCHID_MAP_SWITCH_INDEX_B;
                
                m_lDataKey[PARAM_FIELD_CHECK_METHOD_INFO] = FIELD_CHECK_METHOD_DATA_B;
                m_lIndexKey[PARAM_FIELD_CHECK_METHOD_INFO] = FIELD_CHECK_METHOD_INDEX_B;
                
                m_lDataKey[PARAM_FIELD_VALUE_MAP_INFO] = FIELD_VALUE_MAP_DATA_B;
                m_lIndexKey[PARAM_FIELD_VALUE_MAP_INFO] = FIELD_VALUE_MAP_INDEX_B;
                
                m_lDataKey[PARAM_FIELD_MERGE_INFO] = FIELD_MERGE_DATA_B;
                m_lIndexKey[PARAM_FIELD_MERGE_INFO] = FIELD_MERGE_INDEX_B;
                
                m_lDataKey[PARAM_TAP3FILE_INFO] = TAP3FILE_DATA_B;
                m_lDataKey[PARAM_TAP3BLOCK_INFO] = TAP3_BLOCK_DATA_B;
		//m_lIndexKey[PARAM_TAP3BLOCK_INFO] = TAP3_BLOCK_INDEX_B;
                
                m_lDataKey[PARAM_SEPFILE_INFO] = SEP_FILE_DATA_B;
                m_lDataKey[PARAM_SEPBLOCK_INFO] = SEP_BLOCK_DATA_B;
		//m_lIndexKey[PARAM_SEPBLOCK_INFO] = SEP_BLOCK_INDEX_B;
                
                m_lDataKey[PARAM_MERGE_RULE_INFO] = MERGE_RULE_DATA_B;
		m_lDataKey[PARAM_MERGE_ASSOCIATE_RULE_INFO] = MERGE_ASSCOCIATE_RULE_DATA_B;
		m_lIndexKey[PARAM_MERGE_ASSOCIATE_RULE_INFO] = MERGE_ASSCOCIATE_RULE_INDEX_B;
                m_lIndexKey[PARAM_MERGE_RULE_INFO] = MERGE_RULE_INDEX_B;
                
                m_lDataKey[PARAM_MERGE_OUT_INFO] = MERGE_OUT_DATA_B;
                m_lIndexKey[PARAM_MERGE_OUT_INFO] = MERGE_OUT_INDEX_B;
                
                m_lDataKey[PARAM_MERGE_KEY_INFO] = MERGE_KEY_DATA_B;
                m_lIndexKey[PARAM_MERGE_KEY_INFO] = MERGE_KEY_INDEX_B;
		//
		m_lIndexKey[PARAM_ACCT_GROUP_STR_INFO] = ACCTITEM_GROUP_STR_INFO_INDEX_B;
		m_lIndexKey[PARAM_ACCT_GROUPB_STR_INFO] = ACCTITEM_GROUPB_STR_INFO_INDEX_B;
		m_lIndexKey[PARAM_ACCT_STR_INFO] = ACCTITEM_STR_INFO_INDEX_B;
		
    }
}

//分配参数对应的数据区和索引区的共享内存
void ShmParamInfo::attachAll()
{
#undef ATTACH_DATA
#undef ATTACH_INT_INDEX
#undef ATTACH_STRING_INDEX 
#undef ATTACH_STRING_INDEXEX

#define ATTACH_DATA(X, Y, Z) \
    X = new SHMData<Y> (Z); \
    if (!(X)) { \
        freeAll (); \
        THROW(MBC_ParamShmMgr+4); \
    } \
    if (!(X->exist())) { \
        m_bAttached = false; \
        dprintf("%s:%d:%ld: ATTACE_DATA failed!\n",__FILE__, __LINE__,(long)Z); \
    }

#define ATTACH_INT_INDEX(X, Z) \
    X = new SHMIntHashIndex (Z); \
    if (!(X)) { \
        freeAll (); \
        THROW(MBC_ParamShmMgr+4); \
    } \
    if (!(X->exist())) { \
        m_bAttached = false; \
        dprintf("%s:%d:%ld: ATTACE_DATA failed!\n",__FILE__, __LINE__,(long)Z); \
    }

#define ATTACH_STRING_INDEX(X, Z) \
    X = new SHMStringTreeIndex (Z); \
    if (!(X)) { \
        freeAll (); \
        THROW(MBC_ParamShmMgr+4); \
    } \
    if (!(X->exist())) { \
        m_bAttached = false; \
        dprintf("%s:%d:%ld: ATTACE_DATA failed!\n",__FILE__, __LINE__,(long)Z); \
    }

#define ATTACH_STRING_INDEXEX(X, Z) \
    X = new SHMStringTreeIndexEx (Z); \
    if (!(X)) { \
        freeAll (); \
        THROW(MBC_ParamShmMgr+4); \
    } \
    if (!(X->exist())) { \
        m_bAttached = false; \
        dprintf("%s:%d:%ld: ATTACE_DATA failed!\n",__FILE__, __LINE__,(long)Z); \
    }

    if (m_bAttached)
        return;
    else
        m_bAttached = true;

    ATTACH_DATA(m_poLogicStatementData, LogicStatement, m_lDataKey[LOGICSTATEMENT_INFO]);
    ATTACH_INT_INDEX(m_poLogicStatementIndex,m_lIndexKey[LOGICSTATEMENT_INFO]);
    ATTACH_DATA(m_poAssignStatementData, AssignStatement, m_lDataKey[ASSIGNSTATEMENT_INFO]);
    ATTACH_INT_INDEX(m_poAssignStatementIndex, m_lIndexKey[ASSIGNSTATEMENT_INFO]);
    ATTACH_DATA(m_poFormulaData, Formula, m_lDataKey[FORMULA_INFO]);
    ATTACH_INT_INDEX(m_poFormulaIndex, m_lIndexKey[FORMULA_INFO]);

    ATTACH_DATA(m_poFormatGroupData, FormatGroup, m_lDataKey[ATTR_FORMAT_GROUP_INFO]);
    ATTACH_DATA(m_poFormatStepData, FormatStep, m_lDataKey[ATTR_FORMAT_STEP_INFO]);
    ATTACH_DATA(m_poFormatRuleData, FormatRule, m_lDataKey[ATTR_FORMAT_RULE_INFO]);
    ATTACH_DATA(m_poFormatCombData, FormatComb, m_lDataKey[ATTR_FORMAT_COMB_INFO]);

    ATTACH_DATA(m_poTrunkData, Trunk, m_lDataKey[TRUNK_INFO]);
    ATTACH_STRING_INDEX(m_poTrunkIndex, m_lIndexKey[TRUNK_INFO]);
	//AreaCode
    ATTACH_STRING_INDEX(m_poAreaCodeIndex, m_lIndexKey[AREACODE_INFO]);
	//HLR
    ATTACH_DATA(m_poHLRData, HLR, m_lDataKey[HLR_INFO]);
    ATTACH_STRING_INDEX(m_poHLRIndex, m_lIndexKey[HLR_INFO]);
	
	//VisitAreaCode
    ATTACH_DATA(m_poVisitAreaCodeRuleData, VisitAreaCodeRule, m_lDataKey[VISIT_AREACODE_RULE_INFO]);
    ATTACH_STRING_INDEX(m_pVisitAreaCodeIndex, m_lIndexKey[VISIT_AREACODE_RULE_INFO]);
	//EdgeRoamRule
    ATTACH_DATA(m_poEdgeRoamRuleData, EdgeRoamRule, m_lDataKey[EDGEROAM_RULE_INFO]);
    ATTACH_STRING_INDEX(m_pEdgeRoamIndex, m_lIndexKey[EDGEROAM_RULE_INFO]);
    ATTACH_STRING_INDEX(m_poCarrierIndex, m_lIndexKey[CARRIER_INFO]);
	//new
	ATTACH_DATA(m_poPNNotBillingData, strPNNotBilling, m_lDataKey[PNNOTBILLING_INFO]);
	ATTACH_STRING_INDEX(m_poPNNotBillingIndex, m_lIndexKey[PNNOTBILLING_INFO]);
	
	ATTACH_DATA(m_poTrunkTreeNodeData, TrunkTreeNode, m_lDataKey[TRUNKTREENODE_INFO]);
	ATTACH_STRING_INDEX(m_pSwtichTrunkTree, m_lIndexKey[TRUNKTREENODE_INFO]);
	
    //ATTACH_DATA(m_poServiceData, TServiceInfo2, m_lDataKey[SERVICE_INFO]);
	
	ATTACH_DATA(m_poServiceInfo2Data, TServiceInfo2, m_lDataKey[TSERVICEINFO2_INFO]);
	ATTACH_STRING_INDEX(m_poServiceInfo2Index, m_lIndexKey[TSERVICEINFO2_INFO]);
	
	ATTACH_INT_INDEX(m_poSpecTrunkProductIndex,m_lIndexKey[SPEC_TRUNK_PRODUCT_INFO]);
	
	ATTACH_DATA(m_poSwitchItemTypeData, SwitchItemType, m_lDataKey[SWITCHITEMTYPE_INFO]);
	ATTACH_STRING_INDEX(m_poSwitchItemTypeIndex, m_lIndexKey[SWITCHITEMTYPE_INFO]);
	//ATTACH_MIX_INDEX(m_poSwitchItemTypeIndex, m_lIndexKey[SWITCHITEMTYPE_INFO],0);
		
	ATTACH_DATA(m_poStrLocalAreaCodeData, strLocalAreaCode,m_lDataKey[STR_LOCALAREACODE_INFO]);
	//
	ATTACH_DATA(m_aPNSegBillingData,PNSegBilling,m_lDataKey[PNSEGBILLINGEX_INFO]);
	//
	ATTACH_DATA(m_poPNSegBillingData,PNSegBilling,m_lDataKey[PNSEGBILLING_INFO]);
	
    ATTACH_DATA(m_poSwitchData, TSwitchInfo, m_lDataKey[SWITCH_INFO]);
    ATTACH_INT_INDEX(m_poSwitchIndex, m_lIndexKey[SWITCH_INFO]);
    ATTACH_STRING_INDEX(m_poSwitchOPCIndex, m_lIndexKey[SWITCH_OPC_INFO]);
	
    ATTACH_DATA(m_poTrunkBillingData, TrunkBilling, m_lDataKey[TRUNKBILLING_INFO]);
    ATTACH_STRING_INDEX(m_poTrunkBillingIndex, m_lIndexKey[TRUNKBILLING_INFO]);
	
    ATTACH_INT_INDEX(m_poTimesTypeIndex, m_lIndexKey[TIMESTYPE_INFO]);
	// 
	ATTACH_DATA(m_poFilterRuleResultData, FilterRuleResult, m_lDataKey[FILTER_RULE_RESULT_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckCallingIndex,m_lIndexKey[FILTER_RULE_RESULT_CALLING_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckCalledIndex,m_lIndexKey[FILTER_RULE_RESULT_CALLED_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckAreaCodeIndex,m_lIndexKey[FILTER_RULE_RESULT_AREACODE_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckGatherPotIndex,m_lIndexKey[FILTER_RULE_RESULT_GATHERPOT_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckTrunkOutIndex,m_lIndexKey[FILTER_RULE_RESULT_TRUNCKIN_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckTrunkInIndex,m_lIndexKey[FILTER_RULE_RESULT_TRUNCKOUT_INFO]);
	ATTACH_STRING_INDEX(m_poRuleCheckSwitchIDIndex,m_lIndexKey[FILTER_RULE_RESULT_SWITCHID_INFO]);
	//
    ATTACH_DATA(m_poCityInfoData, CityInfo, m_lDataKey[CITY_INFO]);
    ATTACH_STRING_INDEX(m_poCityInfoIndex, m_lIndexKey[CITY_INFO]);
    ATTACH_STRING_INDEX(m_poCityAreaIndex, m_lIndexKey[CITY_AREA_INFO]);

    ATTACH_DATA(m_poOrgData, Org, m_lDataKey[ORG_INFO]);
    ATTACH_INT_INDEX(m_poOrgIndex, m_lIndexKey[ORG_INFO]);
    ATTACH_DATA(m_poOrgExData, OrgEx, m_lDataKey[ORGEX_INFO]);
    ATTACH_STRING_INDEX(m_poOrgExIndex, m_lIndexKey[ORGEX_INFO]);
    ATTACH_DATA(m_poOrgLongTypeData, OrgLongType, m_lDataKey[ORGLONGTYPE_INFO]);
    ATTACH_INT_INDEX(m_poOrgLongTypeIndex, m_lIndexKey[ORGLONGTYPE_INFO]);
    ATTACH_DATA(m_poHeadExData, HeadEx, m_lDataKey[HEADEX_INFO]);
    ATTACH_STRING_INDEX(m_poHeadExIndex, m_lIndexKey[HEADEX_INFO]);
    ATTACH_DATA(m_poLocalHeadData, LocalHead, m_lDataKey[LOCALHEAD_INFO]);
    ATTACH_STRING_INDEX(m_poLocalHeadIndex, m_lIndexKey[LOCALHEAD_INFO]);

    ATTACH_DATA(m_poEventTypeData, EventType, m_lDataKey[EVENTTYPE_INFO]);
    ATTACH_INT_INDEX(m_poEventTypeIndex, m_lIndexKey[EVENTTYPE_INFO]);
    ATTACH_DATA(m_poEventTypeGroupData, EventTypeGroup, m_lDataKey[EVENTTYPEGROUP_INFO]);
    ATTACH_INT_INDEX(m_poEventTypeGroupIndex, m_lIndexKey[EVENTTYPEGROUP_INFO]); 

    ATTACH_DATA(m_poOfferData, Offer, m_lDataKey[OFFER_INFO]);
    ATTACH_INT_INDEX(m_poOfferIndex, m_lIndexKey[OFFER_INFO]);
    ATTACH_INT_INDEX(m_poOfferSpecAttrIndex, m_lIndexKey[OFFER_SPECATTR_INFO]);
    ATTACH_INT_INDEX(m_poOfferNumAttrIndex, m_lIndexKey[OFFER_NUMATTR_INFO]);
    ATTACH_INT_INDEX(m_poOfferFreeIndex, m_lIndexKey[OFFER_FREE_INFO]);

    ATTACH_DATA(m_poNbrMapData, NbrMapData, m_lDataKey[NBR_MAP_INFO]);
    ATTACH_STRING_INDEX(m_poNbrMapType1Index, m_lIndexKey[NBR_MAP_INDEX1_INFO]);
    ATTACH_STRING_INDEX(m_poNbrMapType2Index, m_lIndexKey[NBR_MAP_INDEX2_INFO]);
    ATTACH_STRING_INDEX(m_poNbrMapType4Index, m_lIndexKey[NBR_MAP_INDEX4_INFO]);
    ATTACH_STRING_INDEX(m_poNbrMapType8Index, m_lIndexKey[NBR_MAP_INDEX8_INFO]);

    ATTACH_DATA(m_poAcctItemData, AcctItem, m_lDataKey[ACCTITEM_INFO]);
    ATTACH_INT_INDEX(m_poAcctItemIndex, m_lIndexKey[ACCTITEM_INFO]);

    ATTACH_DATA(m_poAcctItemGroupData, ItemGroupMember, m_lDataKey[ACCTITEM_GROUP_INFO]);
    ATTACH_INT_INDEX(m_poAcctItemGroupIndex, m_lIndexKey[ACCTITEM_GROUP_INFO]);

    ATTACH_DATA(m_poAcctItemGroupBData, ItemGroupMember, m_lDataKey[ACCTITEM_GROUPB_INFO]);
    ATTACH_INT_INDEX(m_poAcctItemGroupBIndex, m_lIndexKey[ACCTITEM_GROUPB_INFO]);

    ATTACH_DATA(m_poAcctItemBasicGroupBData, ItemGroupMember, m_lDataKey[ACCTITEM_BASICGROUPB_INFO]);
    ATTACH_INT_INDEX(m_poAcctItemBasicGroupBIndex, m_lIndexKey[ACCTITEM_BASICGROUPB_INFO]);

    ATTACH_DATA(m_poAcctItemDisctGroupBData, ItemGroupMember, m_lDataKey[ACCTITEM_DISCTGROUPB_INFO]);
    ATTACH_INT_INDEX(m_poAcctItemDisctGroupBIndex, m_lIndexKey[ACCTITEM_DISCTGROUPB_INFO]);

    ATTACH_INT_INDEX(m_poAcctItemIncludeDisctIndex, m_lIndexKey[ACCTITEM_INCLUDEDISCT_INFO]);

    ATTACH_DATA(m_poLongEventTypeRuleData, LongEventTypeRule, m_lDataKey[LONGEVENTTYPERULE_INFO]);
    ATTACH_DATA(m_poLongEventTypeRuleExData, LongEventTypeRuleEx, m_lDataKey[LONGEVENTTYPERULEEX_INFO]);

    ATTACH_INT_INDEX(m_poPricingPlanTypeIndex, m_lIndexKey[PRICINGPLANTYPE_INFO]);

    ATTACH_DATA(m_poStateConvertData, StateConvert, m_lDataKey[STATECONVERT_INFO]);
    ATTACH_INT_INDEX(m_poStateConvertIndex, m_lIndexKey[STATECONVERT_INFO]);

    ATTACH_DATA(m_poValueMapData, ValueMapData, m_lDataKey[VALUEMAP_INFO]);
    ATTACH_STRING_INDEX(m_poValueMapIndex, m_lIndexKey[VALUEMAP_INFO]);

    ATTACH_DATA(m_poZoneItemData, ZoneItem, m_lDataKey[ZONE_ITEM_INFO]);
    ATTACH_INT_INDEX(m_poZoneItemIndex, m_lIndexKey[ZONE_ITEM_INFO]);
    ATTACH_STRING_INDEXEX(m_poZoneItemStrIndex,m_lIndexKey[PARAM_ZONEITEM_STR_INFO]);

    ATTACH_DATA(m_poSplitAcctItemGroupData, SplitAcctItemGroup, m_lDataKey[SPLITACCTITEMGROUP_INFO]);
    ATTACH_INT_INDEX(m_poSplitAcctItemGroupIndex,m_lIndexKey[SPLITACCTITEMGROUP_INFO]);
    ATTACH_DATA(m_poSplitAcctGroupEventData, SplitAcctGroupEvent, m_lDataKey[SPLITACCTGROUPEVENT_INFO]);
    ATTACH_INT_INDEX(m_poSplitAcctGroupEventIndex, m_lIndexKey[SPLITACCTGROUPEVENT_INFO]);

    ATTACH_DATA(m_poDistanceTypeData, DistanceType, m_lDataKey[DISTANCETYPE_INFO]);
    ATTACH_INT_INDEX(m_poDistanceTypeIndex,m_lIndexKey[DISTANCETYPE_INFO]);

    ATTACH_DATA(m_poEdgeRoamRuleExData, EdgeRoamRuleEx, m_lDataKey[EDGEROAMRULEEX_INFO]);
    ATTACH_STRING_INDEXEX(m_poEdgeRoamRuleExTypeAIndex, m_lIndexKey[EDGEROAMRULEEX_TYPEA_INFO]);
    ATTACH_STRING_INDEXEX(m_poEdgeRoamRuleExTypeBIndex, m_lIndexKey[EDGEROAMRULEEX_TYPEB_INFO]);
    ATTACH_STRING_INDEX(m_poEdgeRoamRuleExMSCIndex, m_lIndexKey[EDGEROAMRULEEX_MSC_INFO]);

    ATTACH_DATA(m_poPricingSectionInfoData, PricingSection, m_lDataKey[PRICINGSECTION_INFO]);
    ATTACH_INT_INDEX(m_poSectionIndex,m_lIndexKey[PRICINGSECTION_INFO]);   
    ATTACH_INT_INDEX(m_poStrategyIndex,m_lIndexKey[SECTIONSTRATEGY_INFO]);

    ATTACH_DATA(m_poTariffInfoData, Tariff, m_lDataKey[TARIFF_INFO]);
    ATTACH_INT_INDEX(m_poTariffIndex,m_lIndexKey[TARIFF_INFO]);

    ATTACH_DATA(m_poDiscountInfoData, Discount, m_lDataKey[DISCOUNT_INFO]);
    ATTACH_INT_INDEX(m_poDiscountIndex,m_lIndexKey[DISCOUNT_INFO]);

    ATTACH_DATA(m_poDisctApplyerInfoData, DisctApplyer, m_lDataKey[DISCTAPPLYER_INFO]);
    ATTACH_INT_INDEX(m_poDisctApplyerIndex,m_lIndexKey[DISCTAPPLYER_INFO]);

    ATTACH_DATA(m_poDisctApplyObjectInfoData, DisctApplyer::DisctApplyObject, m_lDataKey[DISCTAPPLYEROBJ_INFO]);
    ATTACH_INT_INDEX(m_poDisctApplyObjectIndex,m_lIndexKey[DISCTAPPLYEROBJ_INFO]);

    ATTACH_DATA(m_poPercentInfoData, Percent, m_lDataKey[PARAM_PERCENTINFO]);
    ATTACH_INT_INDEX(m_poPercentIndex,m_lIndexKey[PARAM_PERCENTINFO]);

    ATTACH_DATA(m_poLifeCycleData, LifeCycle, m_lDataKey[PARAM_LIFECYCLEINFO]);
    ATTACH_INT_INDEX(m_poLifeCycleIndex,m_lIndexKey[PARAM_LIFECYCLEINFO]);

    ATTACH_DATA(m_poPricingMeasureData, PricingMeasure, m_lDataKey[PARAM_MEASUREINFO]);
    ATTACH_INT_INDEX(m_poPricingMeasureIndex,m_lIndexKey[PARAM_MEASUREINFO]);
    ATTACH_INT_INDEX(m_poStrategyIDMeasureIndex,m_lIndexKey[PARAM_STRATEGYMEASUREINFO]);

    ATTACH_DATA(m_poPricingCombineData, PricingCombine, m_lDataKey[PARAM_COMBINETINFO]);
    ATTACH_INT_INDEX(m_poPricingCombineIndex,m_lIndexKey[PARAM_COMBINETINFO]);
    ATTACH_INT_INDEX(m_poPlanIDIndex,m_lIndexKey[PARAM_PLAN_COMBINETINFO]);
    ATTACH_INT_INDEX(m_poStrategyCombineIndex,m_lIndexKey[PARAM_STRATEGY_COMBINETINFO]);

    ATTACH_DATA(m_poFilterConditionData, FilterCond, m_lDataKey[PARAM_FILTERCONDINFO]);
    ATTACH_INT_INDEX(m_poFilterConditionIndex,m_lIndexKey[PARAM_FILTERCONDINFO]);

    ATTACH_DATA(m_poConditionPointData, ConditionPoint, m_lDataKey[PARAM_CONDITIONPOINTINFO]);

    ATTACH_DATA(m_poUsageTypeInfoData, UsageTypeMgr::stUsageType, m_lDataKey[PARAM_USAGETYPEINFO]);
    ATTACH_INT_INDEX(m_poUsageTypeIndex,m_lIndexKey[PARAM_USAGETYPEINFO]);

    ATTACH_DATA(m_poTimeCondData, TimeCond, m_lDataKey[PARAM_TIMECONDINFO]);
    ATTACH_INT_INDEX(m_poTimeCondIndex,m_lIndexKey[PARAM_TIMECONDINFO]);

    ATTACH_DATA(m_poEventTypeCondData, EventTypeCond, m_lDataKey[PARAM_EVENTTYPECONDINFO]);
    ATTACH_INT_INDEX(m_poEventTypeCondIndex,m_lIndexKey[PARAM_EVENTTYPECONDINFO]);

    ATTACH_DATA(m_poCycleTypeData, CycleType, m_lDataKey[PARAM_CYCLETYPEINFO]);
    ATTACH_INT_INDEX(m_poCycleTypeIndex,m_lIndexKey[PARAM_CYCLETYPEINFO]);

    ATTACH_DATA(m_poAccuTypeData, AccuType, m_lDataKey[PARAM_ACCTTYPEINFO]);
    ATTACH_INT_INDEX(m_poAccuTypeIndex,m_lIndexKey[PARAM_ACCTTYPEINFO]);

    ATTACH_DATA(m_poOfferAccuRelationData, OfferAccuRelation, m_lDataKey[PARAM_OFFERACCTRELATIONINFO]);
    ATTACH_INT_INDEX(m_poOfferAccuRelationIndex,m_lIndexKey[PARAM_OFFERACCTRELATIONINFO]);

    ATTACH_STRING_INDEX(m_poOfferAccuExistIndex,m_lIndexKey[PARAM_OFFERACCTEXISTINFO]);     

        #ifdef EVENT_AGGR_RECYCLE_USE           
	ATTACH_DATA(m_poCycleTypeIDData, CycleTypeID, m_lDataKey[PARAM_CYCLETYPEIDINFO]);
    ATTACH_STRING_INDEX(m_poCycleTypeIDIndex,m_lIndexKey[PARAM_CYCLETYPEIDINFO]);
        #endif

    ATTACH_INT_INDEX(m_poOfferCombineIndex,m_lIndexKey[PARAM_OFFERCOMBINEINFO]);
    ATTACH_INT_INDEX(m_poOfferDisctIndex,m_lIndexKey[PARAM_OFFERDISCTINFO]);

    ATTACH_INT_INDEX(m_poProductCombineIndex, m_lIndexKey[PARAM_PRODUCTCOMBINEINFO]);

    ATTACH_DATA(m_poSplitData, SplitCfg, m_lDataKey[PARAM_SPLITCFGINFO]);
    ATTACH_INT_INDEX(m_poSplitIndex,m_lIndexKey[PARAM_SPLITCFGINFO]);

    ATTACH_DATA(m_poVirtualPricingCombineData, PricingCombine, m_lDataKey[PARAM_VIRTUAL_STRATEGY_COMBINETINFO]);
    ATTACH_INT_INDEX(m_poVirtualStrategyCombineIndex,m_lIndexKey[PARAM_VIRTUAL_STRATEGY_COMBINETINFO]);

    #ifdef WHOLE_DISCOUNT
    ATTACH_DATA(m_poWholeDiscountData, WholeDiscount, m_lDataKey[PARAM_WHOLEDISCOUNTINFO]);
        #endif

        #ifdef GROUP_CONTROL
    ATTACH_DATA(m_poCGPricingCombineData, PricingCombine, m_lDataKey[PARAM_CGCOMBINEINFO]);
    ATTACH_INT_INDEX(m_poCGStrategyCombineIndex,m_lIndexKey[PARAM_CGCOMBINEINFO]);
        #endif

    ATTACH_DATA(m_poCombineRelationData,CombineRelation, m_lDataKey[PARAM_COMBINERELATIONINFO]);
    ATTACH_INT_INDEX(m_poCombineRelationIndex,m_lIndexKey[PARAM_COMBINERELATIONINFO]);

    //ATTACH_DATA(m_poDirectoryData, Directory, m_lDataKey[PARAM_DIRECTORYINFO]);

    ATTACH_DATA(m_poSpecialNbrStrategyData, SpecialNbrStrategy, m_lDataKey[PARAM_SPECIALNBRSTRATEGYINFO]);
    ATTACH_STRING_INDEX(m_poSpecialNbrStrategyIndex,m_lIndexKey[PARAM_SPECIALNBRSTRATEGYINFO]);
    ATTACH_INT_INDEX(m_poSpecialNbrOfferIndex,m_lIndexKey[PARAM_SPECIALNBROFFERINFO]);

    ATTACH_DATA(m_poHostInfoData, HostInfo, m_lDataKey[PARAM_HOSTINFO]);
    ATTACH_INT_INDEX(m_poHostInfoIndex,m_lIndexKey[PARAM_HOSTINFO]);

    //ATTACH_DATA(m_poDirectoryData, Directory, m_lDataKey[PARAM_DIRECTORYINFO]);

    //重 ATTACH_DATA(m_poSpecialNbrStrategyData, SpecialNbrStrategy, m_lDataKey[PARAM_SPECIALNBRSTRATEGYINFO]);
    //重  ATTACH_STRING_INDEX(m_poSpecialNbrStrategyIndex,m_lIndexKey[PARAM_SPECIALNBRSTRATEGYINFO]);
    //重  ATTACH_INT_INDEX(m_poSpecialNbrOfferIndex,m_lIndexKey[PARAM_SPECIALNBROFFERINFO]);


    ATTACH_DATA(m_poGatherTaskData, GatherTaskInfo, m_lDataKey[PARAM_GATHERTESKINFO]);
    ATTACH_INT_INDEX(m_poGatherTaskIndex,m_lIndexKey[PARAM_GATHERTESKINFO]);
    ATTACH_INT_INDEX(m_poOrgGatherTaskIndex,m_lIndexKey[PARAM_ORGGATHERTESKINFO]);

    ATTACH_INT_INDEX(m_poProductIDIndex,m_lIndexKey[PARAM_PRODUCTIDINFO]);
    ATTACH_STRING_INDEX(m_poProIDAcctItemStringIndex,m_lIndexKey[PARAM_PRODUCTACCITEMINFO]);

    ATTACH_DATA(m_poSpecialTariffData, SpecialTariff, m_lDataKey[PARAM_SPECIALTRIFFINFO]);
    ATTACH_STRING_INDEX(m_poSpecialTariffIndex,m_lIndexKey[PARAM_SPECIALTRIFFINFO]);

    ATTACH_DATA(m_poSpecialTariffCheckData, SpecialTariff, m_lDataKey[PARAM_SPECIALTRIFFCHECKINFO]);
    ATTACH_STRING_INDEX(m_poSpecialTariffCheckIndex,m_lIndexKey[PARAM_SPECIALTRIFFCHECKINFO]);

    ATTACH_DATA(m_poSpInfoData, SpInfoData, m_lDataKey[PARAM_SPINFODATAINFO]);
    ATTACH_STRING_INDEX(m_pHSpInfoIndex,m_lIndexKey[PARAM_SPINFODATAINFO]);

    ATTACH_DATA(m_poGatherTaskListInfoData, GatherTaskListInfo, m_lDataKey[PARAM_GATHERTASKLISTINFO]);
    ATTACH_INT_INDEX(m_poGatherTaskListInfoIndex,m_lIndexKey[PARAM_GATHERTASKLISTINFO]);

    ATTACH_DATA(m_poSegmentInfoData, SegmentInfo, m_lDataKey[PARAM_SEGMENTINFO]);
    ATTACH_INT_INDEX(m_poSegmentIndex,m_lIndexKey[PARAM_SEGMENTINFO]);
    ATTACH_INT_INDEX(m_poSegmentTypeIndex,m_lIndexKey[PARAM_SEGMENTTYPEINFO]);

    ATTACH_INT_INDEX(m_poLongTypeIndex,m_lIndexKey[PARAM_LONGTYPEINFO]);

    ATTACH_DATA(m_poCheckRuleData, CheckRule, m_lDataKey[PARAM_CHECKRULE_RULE_INFO]);
    ATTACH_INT_INDEX(m_poCheckRuleIndex,m_lIndexKey[PARAM_CHECKRULE_RULE_INFO]);
    ATTACH_DATA(m_poCheckSubRuleData, CheckSubRule, m_lDataKey[PARAM_CHECKRULE_SUBRULE_INFO]);
    ATTACH_INT_INDEX(m_poCheckSubRuleIndex,m_lIndexKey[PARAM_CHECKRULE_SUBRULE_INFO]);
    ATTACH_DATA(m_poCheckArgumentData, CheckArgument, m_lDataKey[PARAM_CHECKARGUMENT_INFO]);
    ATTACH_DATA(m_poCheckRelationData, CheckRelation, m_lDataKey[PARAM_CHECKRELATION_INFO]);
    ATTACH_DATA(m_poTransFileTypeData, TransFileType, m_lDataKey[PARAM_TRANSFILE_INFO]);
    ATTACH_INT_INDEX(m_poTransFileTypeIndex,m_lIndexKey[PARAM_TRANSFILE_INFO]);
    ATTACH_DATA(m_poParseRuleData,ParseRule,m_lDataKey[PARAM_PARSERULE_INFO]);
    ATTACH_STRING_INDEX(m_poParseRuleIndex,m_lIndexKey[PARAM_PARSERULE_INFO]);
    ATTACH_DATA(m_poParseCombData,ParseComb,m_lDataKey[PARAM_PARSECOMB_INFO]);
    ATTACH_INT_INDEX(m_poParseCombIndex,m_lIndexKey[PARAM_PARSECOMB_INFO]);
    ATTACH_DATA(m_poInstTableData,InstTableList,m_lDataKey[PARAM_INSTTABLELIST_INFO]);
    ATTACH_STRING_INDEX(m_poInstTableIndex,m_lIndexKey[PARAM_INSTTABLELIST_INFO]);
    ATTACH_DATA(m_poTableTypeData,EventTableType,m_lDataKey[PARAM_TABLETYPE_INFO]);
    ATTACH_INT_INDEX(m_poTableTypeIndex,m_lIndexKey[PARAM_TABLETYPE_INFO]);
    ATTACH_INT_INDEX(m_poRentIndex,m_lIndexKey[PARAM_RENT_CONFIG_INFO]);
    ATTACH_DATA(m_poNetworkPriorData,NetworkPriority,m_lDataKey[PARAM_NETWORKPRIORITY_INFO]);
    ATTACH_INT_INDEX(m_poNetworkPriorIndex,m_lIndexKey[PARAM_NETWORKPRIORITY_INFO]);
    ATTACH_DATA(m_poTrunkToBeNBRData, TTrunkToNBR, m_lDataKey[PARAM_TRUNKTOBENBR_INFO]);
    ATTACH_STRING_INDEX(m_poTrunkToBeNBRIndex,m_lIndexKey[PARAM_TRUNKTOBENBR_INFO]);

    ATTACH_DATA(m_poCheckDupCfgData,struct CheckDupCfg,m_lDataKey[PARAM_CHECKDUPCFG_INFO]);
    ATTACH_INT_INDEX(m_poCheckDupCfgIndex,m_lIndexKey[PARAM_CHECKDUPCFG_INFO]);

    ATTACH_DATA(m_poCheckDupTypeData,struct CheckDupType,m_lDataKey[PARAM_CHECKDUPTYPE_INFO]);
    ATTACH_INT_INDEX(m_poCheckDupTypeIndex,m_lIndexKey[PARAM_CHECKDUPTYPE_INFO]);

    ATTACH_DATA(m_poCheckDupStepData,struct CheckDupStep,m_lDataKey[PARAM_CHECKDUPSTEP_INFO]);
    ATTACH_INT_INDEX(m_poCheckDupStepIndex,m_lIndexKey[PARAM_CHECKDUPSTEP_INFO]);

    ATTACH_DATA(m_poShotTicketData,struct CheckDupType,m_lDataKey[PARAM_CHECKSHOTTICKET_INFO]);
    ATTACH_INT_INDEX(m_poShotTicketIndex,m_lIndexKey[PARAM_CHECKSHOTTICKET_INFO]);

    ATTACH_DATA(m_poUndoProcessData,struct UndoProcess,m_lDataKey[PARAM_UNDOPROCESSDUP_INFO]);
    ATTACH_INT_INDEX(m_poUndoProcessIndex,m_lIndexKey[PARAM_UNDOPROCESSDUP_INFO]);

    ATTACH_DATA(m_poUndoProcShotData,struct UndoProcess,m_lDataKey[PARAM_UNDOPROCESSSHOT_INFO]);
    ATTACH_INT_INDEX(m_poUndoProcShotIndex,m_lIndexKey[PARAM_UNDOPROCESSSHOT_INFO]);

    ATTACH_DATA(m_poUndoServData,struct UndoServ,m_lDataKey[PARAM_UNDOSERVDUP_INFO]);
    ATTACH_DATA(m_poUndoProductData,struct UndoProductPackage,m_lDataKey[PARAM_UNDOPRODUCTDUP_INFO]);

    ATTACH_INT_INDEX(m_poProductIndex,m_lIndexKey[PARAM_PRODUCTCFG_INFO]);


    ATTACH_DATA(m_poOrgPathData,OrgPath,m_lDataKey[PARAM_ORGPATH_INFO]);
    ATTACH_INT_INDEX(m_poOrgPathIndex,m_lIndexKey[PARAM_ORGPATH_INFO]);

    ATTACH_DATA(m_poLocalEventTypeRuleData,LocalEventTypeRule,m_lDataKey[PARAM_LOCALEVENTTYPERULE_INFO]);
    ATTACH_STRING_INDEX(m_poLocalEventTypeRuleIndex,m_lIndexKey[PARAM_LOCALEVENTTYPERULE_INFO]);

    //2010.11.17
    ATTACH_DATA(m_poFilePoolInfoData, FilePoolInfo, m_lDataKey[FILEPOOL_INFO]);
    ATTACH_STRING_INDEX(m_poFilePoolInfoIndex, m_lIndexKey[FILEPOOL_INFO]);

    ATTACH_DATA(m_poFilePoolCondData, FilePoolCondition, m_lDataKey[FILEPOOL_COND_INFO]);
    ATTACH_STRING_INDEX(m_poFilePoolCondIndex, m_lIndexKey[FILEPOOL_COND_INFO]);

    ATTACH_STRING_INDEX(m_poFileTypeIndex, m_lIndexKey[FILETYPE_INFO]);

    ATTACH_DATA(m_poTLVEncodeData, FileAttr, m_lDataKey[TLVENCODE_INFO]);
    ATTACH_INT_INDEX(m_poTLVEncodeIndex, m_lIndexKey[TLVENCODE_INFO]);

    ATTACH_DATA(m_poTLVDecodeData, FileAttr, m_lDataKey[TLVDECODE_INFO]);
    ATTACH_STRING_INDEX(m_poTLVDecodeIndex, m_lIndexKey[TLVDECODE_INFO]);

    ATTACH_DATA(m_poBillingNodeData, BillingNodeInfo, m_lDataKey[BILLINGNODE_INFO]);
    ATTACH_INT_INDEX(m_poBillingNodeIndex, m_lIndexKey[BILLINGNODE_INFO]);
        ATTACH_STRING_INDEX(m_poFileParseRuleIndex, m_lIndexKey[FILEPARSERULE_INFO]);

    ATTACH_DATA(m_poSwitchCodeData, SwitchCode, m_lDataKey[SWITCHCODE_INFO]);
    ATTACH_STRING_INDEX(m_poSwitchCodeIndex, m_lIndexKey[SWITCHCODE_INFO]);
    //2010.12.20
    ATTACH_DATA(m_poRoamTariffData, TariffInfo, m_lDataKey[ROAMTARIFF_INFO]);
    ATTACH_INT_INDEX(m_poRoamTariffIndex, m_lIndexKey[ROAMTARIFF_INFO]);

    ATTACH_DATA(m_poRoamCarrierData, CarrierInfo, m_lDataKey[ROAMCARRIER_INFO]);
    ATTACH_STRING_INDEX(m_poRoamCarrierIndex, m_lIndexKey[ROAMCARRIER_INFO]);

    ATTACH_STRING_INDEX(m_poTariffSectorIndex, m_lIndexKey[TARIFFSECTOR_INFO]);

    ATTACH_DATA(m_poCountryData, CountryInfo, m_lDataKey[COUNTRY_INFO_A]);
    ATTACH_STRING_INDEX(m_poCountryCodeIndex, m_lIndexKey[COUNTRY_INFO_A]);
    ATTACH_STRING_INDEX(m_poCountryAreaIndex, m_lIndexKey[COUNTRY_INFO_B]);
    
    ATTACH_DATA(m_poSponsorData, SponsorInfo, m_lDataKey[ROAMSPONSOR_INFO]);
    ATTACH_STRING_INDEX(m_poSponsorIndex, m_lIndexKey[ROAMSPONSOR_INFO]);

    ATTACH_DATA(m_poMemberData, SpecialGroupMember, m_lDataKey[SPECIALGROUPMEMBER_INFO]);
    ATTACH_INT_INDEX(m_poMemberIndex, m_lIndexKey[SPECIALGROUPMEMBER_INFO]);

        //std
        /*ATTACH_DATA(m_poStdChar8Data,StdChar8,m_lDataKey[PARAM_STD_STRUCT_INFO]);
        ATTACH_INT_INDEX(m_poStdChar8Index,m_lIndexKey[PARAM_STD_STRUCT_INFO]);
        ATTACH_DATA(m_poStdChar8DataDesc,StdChar8DataDesc,m_lDataKey[PARAM_STRUCT_INFO_DESC]);*/
        //prep
        ATTACH_DATA(m_poTemplateMapSwitchData,TemplateMapSwitch,m_lDataKey[PARAM_TEMPLATEMAPSWITCH_INFO]);
        ATTACH_INT_INDEX(m_poTemplateMapSwitchIndex,m_lIndexKey[PARAM_TEMPLATEMAPSWITCH_INFO]);
        
        ATTACH_DATA(m_poObjectDefineData,ObjectDefine,m_lDataKey[PARAM_OBJECTDEFINE_INFO]);
        ATTACH_INT_INDEX(m_poObjectDefineIndex,m_lIndexKey[PARAM_OBJECTDEFINE_INFO]);
        
        ATTACH_DATA(m_poEventParserGroupData,EventParserGroup,m_lDataKey[PARAM_EVENTPARSERGROUP_INFO]);
        ATTACH_INT_INDEX(m_poEventParserGroupIndex,m_lIndexKey[PARAM_EVENTPARSERGROUP_INFO]);
        
        ATTACH_DATA(m_poTemplateRelationData,TemplateRelation,m_lDataKey[PARAM_TEMPLATE_RELATION_INFO]);
        ATTACH_INT_INDEX(m_poTemplateRelationIndex,m_lIndexKey[PARAM_TEMPLATE_RELATION_INFO]);
        ATTACH_DATA(m_poFieldData,Field,m_lDataKey[PARAM_FIELD_SHM_INFO]);
        ATTACH_INT_INDEX(m_poFieldTemplateIndex,m_lIndexKey[PARAM_FIELD_SHM_INFO]);
		ATTACH_STRING_INDEX(m_poFieldUnionStrIndex,m_lIndexKey[PARAM_FIELD_UNIONINDEX_INFO]);
        //ATTACH_DATA(m_poSwitchInfoData,SwitchInfo,m_lDataKey[PARAM_SWITCH_SHM_INFO]);
        //ATTACH_INT_INDEX(m_poSwitchInfoIndex,m_lIndexKey[PARAM_SWITCH_SHM_INFO]);
        ATTACH_DATA(m_poMapSwitchTypeData,TemplateMapSwitch,m_lDataKey[PARAM_SWITCH_TYPE_INFO]);
        ATTACH_INT_INDEX(m_poMapSwitchTypeIndex,m_lIndexKey[PARAM_SWITCH_TYPE_INFO]);
        
        //ATTACH_DATA(m_poObjectType6Data,ObjectDefine,m_lDataKey[PARAM_EPGGROUP_INFO]);
        //ATTACH_INT_INDEX(m_poObjectType6Index,m_lIndexKey[PARAM_EPGGROUP_INFO]);
        //ATTACH_DATA(m_poSepEPGData,EventParserGroup,m_lDataKey[PARAM_EPGGROUP_INFO]);
        //ATTACH_INT_INDEX(m_poSepEPGIndex,m_lIndexKey[PARAM_EPGGROUP_INFO]);
        
        ATTACH_DATA(m_poEventAttrData,EventAttr,m_lDataKey[PARAM_EVENT_ATTR_INFO]);
        ATTACH_INT_INDEX(m_poEventAttrIndex,m_lIndexKey[PARAM_EVENT_ATTR_INFO]);
        
        //ATTACH_DATA(m_poFileInfoData,prep_space::FileInfo,m_lDataKey[PARAM_FILE_INFO_INFO]);
        //ATTACH_INT_INDEX(m_poFileInfoIndex,m_lIndexKey[PARAM_FILE_INFO_INFO]);
        
        
        ATTACH_DATA(m_poEventHeadAndColumnsCfg,EventParserGroup,m_lDataKey[PARAM_EVENT_HEAD_COLUMNS_INFO]);
        ATTACH_INT_INDEX(m_poEventHeadAndColumnsIndex,m_lIndexKey[PARAM_EVENT_HEAD_COLUMNS_INFO]);      
        
        ATTACH_DATA(m_poSwitchIDMapSwitchData,TSwitchInfo,m_lDataKey[PARAM_SWITCHID_MAP_SWITCH_INFO]);
        ATTACH_INT_INDEX(m_poSwitchIDMapSwitchIndex,m_lIndexKey[PARAM_SWITCHID_MAP_SWITCH_INFO]);       
        
        ATTACH_DATA(m_poFieldCheckMethodData,FieldCheckMethod,m_lDataKey[PARAM_FIELD_CHECK_METHOD_INFO]);
        ATTACH_INT_INDEX(m_poFieldCheckMethodIndex,m_lIndexKey[PARAM_FIELD_CHECK_METHOD_INFO]);
        
        ATTACH_DATA(m_poFieldMapData,ValueMap,m_lDataKey[PARAM_FIELD_VALUE_MAP_INFO]);
        ATTACH_INT_INDEX(m_poFieldMapIndex,m_lIndexKey[PARAM_FIELD_VALUE_MAP_INFO]);
        
        ATTACH_DATA(m_poFieldMergeData,Field,m_lDataKey[PARAM_FIELD_MERGE_INFO]);
        ATTACH_INT_INDEX(m_poFieldMergeIndex,m_lIndexKey[PARAM_FIELD_MERGE_INFO]);
        
        ATTACH_DATA(m_poTap3FileData,Tap3File,m_lDataKey[PARAM_TAP3FILE_INFO]);
        ATTACH_DATA(m_poTap3BlockInfoData,Tap3BlockInfo,m_lDataKey[PARAM_TAP3BLOCK_INFO]);
        //ATTACH_INT_INDEX(m_poTap3BlockInfoIndex,m_lIndexKey[PARAM_TAP3BLOCK_INFO]);
        
        ATTACH_DATA(m_poSepFileData,SepFile,m_lDataKey[PARAM_SEPFILE_INFO]);
        ATTACH_DATA(m_poSepBlockInfoData,SepBlockInfo,m_lDataKey[PARAM_SEPBLOCK_INFO]); 
        //ATTACH_INT_INDEX(m_poSepBlockInfoIndex,m_lIndexKey[PARAM_SEPBLOCK_INFO]);
        
		ATTACH_DATA(m_poMServAcctInfoData,MServAcctInfo,m_lDataKey[PARAM_M_SERVACCT_INFO]); 
		ATTACH_INT_INDEX(m_poMServAcctIndex,m_lIndexKey[PARAM_M_SERVACCT_INFO]);
        ATTACH_DATA(m_poMergeRuleData,MergeRuleData,m_lDataKey[PARAM_MERGE_RULE_INFO]);
	ATTACH_DATA(m_poMergeRuleAssociateData,MergeRuleData,m_lDataKey[PARAM_MERGE_ASSOCIATE_RULE_INFO]);
        ATTACH_STRING_INDEX(m_poMergeRuleStrIndex,m_lIndexKey[PARAM_MERGE_RULE_INFO]);
	ATTACH_STRING_INDEX(m_poMergeRuleAssociateStrIndex,m_lIndexKey[PARAM_MERGE_ASSOCIATE_RULE_INFO]);
        
        ATTACH_DATA(m_poMergeRuleOutData,MergeRuleData::ruleOut,m_lDataKey[PARAM_MERGE_OUT_INFO]);      
        ATTACH_INT_INDEX(m_poMergeRuleOutIndex,m_lIndexKey[PARAM_MERGE_OUT_INFO]);
        
        ATTACH_DATA(m_poMergeKeyRuleData,MergeKeyRule,m_lDataKey[PARAM_MERGE_KEY_INFO]);        
        ATTACH_INT_INDEX(m_poMergeKeyRuleIndex,m_lIndexKey[PARAM_MERGE_KEY_INFO]);
        
	//
	ATTACH_STRING_INDEX(m_poAcctItemStrIndex,m_lIndexKey[PARAM_ACCT_STR_INFO]);
	ATTACH_STRING_INDEX(m_poAcctItemGroupStrIndex,m_lIndexKey[PARAM_ACCT_GROUP_STR_INFO]);
	ATTACH_STRING_INDEX(m_poAcctItemGroupBStrIndex,m_lIndexKey[PARAM_ACCT_GROUPB_STR_INFO]);
	
    if (m_bAttached)
        bindData();

#undef ATTACH_DATA
#undef ATTACH_INT_INDEX
#undef ATTACH_STRING_INDEX 

}

bool ShmParamInfo::SHMDetachShm(char * p)
{

        bool res = DetachShmNew(p);
        m_bdetached = res;
        return res;
}
bool ShmParamInfo::detachAll()
{
     #undef DETACH_ALL
     #define DETACH_ALL(X) \
                if ( X && X->exist() ) { \
                        SHMDetachShm( X->getMemAddr() ) ;\
                        if(!m_bdetached) \
                                dprintf("%s:%d: !DETACH_DATA FAILED!\n",__FILE__, __LINE__); \
            }
                        
    m_bdetached = true;
	DETACH_ALL(m_poMServAcctInfoData);
    DETACH_ALL(m_poMServAcctIndex);
    DETACH_ALL(m_poLogicStatementData);
    DETACH_ALL(m_poLogicStatementIndex);
    DETACH_ALL(m_poAssignStatementData);
    DETACH_ALL(m_poAssignStatementIndex);
    DETACH_ALL(m_poFormulaData);
    DETACH_ALL(m_poFormulaIndex);

    DETACH_ALL(m_poFormatGroupData);
    DETACH_ALL(m_poFormatStepData);
    DETACH_ALL(m_poFormatRuleData);
    DETACH_ALL(m_poFormatCombData);

    DETACH_ALL(m_poTrunkData);
    DETACH_ALL(m_poTrunkIndex);
	//AreaCode
    DETACH_ALL(m_poAreaCodeIndex);
	//HLR
    DETACH_ALL(m_poHLRData);
    DETACH_ALL(m_poHLRIndex);
	
	//VisitAreaCode
    DETACH_ALL(m_poVisitAreaCodeRuleData);
    DETACH_ALL(m_pVisitAreaCodeIndex);
	//EdgeRoamRule
    DETACH_ALL(m_poEdgeRoamRuleData);
    DETACH_ALL(m_pEdgeRoamIndex);
    DETACH_ALL(m_poCarrierIndex);
	//new
	DETACH_ALL(m_poPNNotBillingData);
	DETACH_ALL(m_poPNNotBillingIndex);
	
	DETACH_ALL(m_poTrunkTreeNodeData);
	DETACH_ALL(m_pSwtichTrunkTree);
	
    //DETACH_ALL(m_poServiceData);
	
	DETACH_ALL(m_poServiceInfo2Data);
	DETACH_ALL(m_poServiceInfo2Index);
	
	DETACH_ALL(m_poSpecTrunkProductIndex);
	
	DETACH_ALL(m_poSwitchItemTypeData);
	DETACH_ALL(m_poSwitchItemTypeIndex);
	//DETACH_ALL(m_poSwitchItemTypeIndex);
		
	DETACH_ALL(m_poStrLocalAreaCodeData);
	//
	DETACH_ALL(m_aPNSegBillingData);
	//
	DETACH_ALL(m_poPNSegBillingData);
	
    DETACH_ALL(m_poSwitchData);
    DETACH_ALL(m_poSwitchIndex);
    DETACH_ALL(m_poSwitchOPCIndex);
	
    DETACH_ALL(m_poTrunkBillingData); 
    DETACH_ALL(m_poTrunkBillingIndex);
	
    DETACH_ALL(m_poTimesTypeIndex);
	// 
	DETACH_ALL(m_poFilterRuleResultData);
	DETACH_ALL(m_poRuleCheckCallingIndex);
	DETACH_ALL(m_poRuleCheckCalledIndex);
	DETACH_ALL(m_poRuleCheckAreaCodeIndex);
	DETACH_ALL(m_poRuleCheckGatherPotIndex);
	DETACH_ALL(m_poRuleCheckTrunkOutIndex);
	DETACH_ALL(m_poRuleCheckTrunkInIndex);
	DETACH_ALL(m_poRuleCheckSwitchIDIndex);
	//
    DETACH_ALL(m_poCityInfoData);
    DETACH_ALL(m_poCityInfoIndex);
    DETACH_ALL(m_poCityAreaIndex);

    DETACH_ALL(m_poOrgData);
    DETACH_ALL(m_poOrgIndex);
    DETACH_ALL(m_poOrgExData);
    DETACH_ALL(m_poOrgExIndex);
    DETACH_ALL(m_poOrgLongTypeData);
    DETACH_ALL(m_poOrgLongTypeIndex);
    DETACH_ALL(m_poHeadExData);
    DETACH_ALL(m_poHeadExIndex);
    DETACH_ALL(m_poLocalHeadData);
    DETACH_ALL(m_poLocalHeadIndex);

    DETACH_ALL(m_poEventTypeData);
    DETACH_ALL(m_poEventTypeIndex);
    DETACH_ALL(m_poEventTypeGroupData);
    DETACH_ALL(m_poEventTypeGroupIndex);

    DETACH_ALL(m_poOfferData);
    DETACH_ALL(m_poOfferIndex);
    DETACH_ALL(m_poOfferSpecAttrIndex);
    DETACH_ALL(m_poOfferNumAttrIndex);
    DETACH_ALL(m_poOfferFreeIndex);

    DETACH_ALL(m_poNbrMapData);
    DETACH_ALL(m_poNbrMapType1Index);
    DETACH_ALL(m_poNbrMapType2Index);
    DETACH_ALL(m_poNbrMapType4Index);
    DETACH_ALL(m_poNbrMapType8Index);

    DETACH_ALL(m_poAcctItemData);
    DETACH_ALL(m_poAcctItemIndex);

    DETACH_ALL(m_poAcctItemGroupData);
    DETACH_ALL(m_poAcctItemGroupIndex);

    DETACH_ALL(m_poAcctItemGroupBData);
    DETACH_ALL(m_poAcctItemGroupBIndex);

    DETACH_ALL(m_poAcctItemBasicGroupBData);
    DETACH_ALL(m_poAcctItemBasicGroupBIndex);

    DETACH_ALL(m_poAcctItemDisctGroupBData);
    DETACH_ALL(m_poAcctItemDisctGroupBIndex);

    DETACH_ALL(m_poAcctItemIncludeDisctIndex);

    DETACH_ALL(m_poLongEventTypeRuleData);
    DETACH_ALL(m_poLongEventTypeRuleExData);

    DETACH_ALL(m_poPricingPlanTypeIndex);

    DETACH_ALL(m_poStateConvertData);
    DETACH_ALL(m_poStateConvertIndex);

    DETACH_ALL(m_poValueMapData);
    DETACH_ALL(m_poValueMapIndex);

    DETACH_ALL(m_poZoneItemData);
    DETACH_ALL(m_poZoneItemIndex);
    DETACH_ALL(m_poZoneItemStrIndex);

    DETACH_ALL(m_poSplitAcctItemGroupData);
    DETACH_ALL(m_poSplitAcctItemGroupIndex);
    DETACH_ALL(m_poSplitAcctGroupEventData);
    DETACH_ALL(m_poSplitAcctGroupEventIndex);

    DETACH_ALL(m_poDistanceTypeData);
    DETACH_ALL(m_poDistanceTypeIndex);

    DETACH_ALL(m_poEdgeRoamRuleExData);
    DETACH_ALL(m_poEdgeRoamRuleExTypeAIndex);
    DETACH_ALL(m_poEdgeRoamRuleExTypeBIndex);
    DETACH_ALL(m_poEdgeRoamRuleExMSCIndex);

        DETACH_ALL(m_poPricingSectionInfoData);
    DETACH_ALL(m_poSectionIndex);
    DETACH_ALL(m_poStrategyIndex);
                
        DETACH_ALL(m_poTariffInfoData);
    DETACH_ALL(m_poTariffIndex);
        
        DETACH_ALL(m_poDiscountInfoData);
    DETACH_ALL(m_poDiscountIndex);
                
        DETACH_ALL(m_poDisctApplyerInfoData);
    DETACH_ALL(m_poDisctApplyerIndex);
    
    DETACH_ALL(m_poDisctApplyObjectInfoData);
    DETACH_ALL(m_poDisctApplyObjectIndex);

        DETACH_ALL(m_poPercentInfoData);
    DETACH_ALL(m_poPercentIndex);
        
        DETACH_ALL(m_poLifeCycleData);
    DETACH_ALL(m_poLifeCycleIndex);
        
        DETACH_ALL(m_poPricingMeasureData);
    DETACH_ALL(m_poPricingMeasureIndex);
    DETACH_ALL(m_poStrategyIDMeasureIndex);
        
        DETACH_ALL(m_poPricingCombineData);
    DETACH_ALL(m_poPricingCombineIndex);
    DETACH_ALL(m_poPlanIDIndex);
    DETACH_ALL(m_poStrategyCombineIndex);
        
        DETACH_ALL(m_poFilterConditionData);
    DETACH_ALL(m_poFilterConditionIndex);
        
        DETACH_ALL(m_poConditionPointData);
        
        DETACH_ALL(m_poUsageTypeInfoData);
    DETACH_ALL(m_poUsageTypeIndex); 
        
        DETACH_ALL(m_poTimeCondData);
    DETACH_ALL(m_poTimeCondIndex);
        
        DETACH_ALL(m_poEventTypeCondData);
    DETACH_ALL(m_poEventTypeCondIndex);
        
        DETACH_ALL(m_poCycleTypeData);
    DETACH_ALL(m_poCycleTypeIndex);
        
        DETACH_ALL(m_poAccuTypeData);
    DETACH_ALL(m_poAccuTypeIndex);
        
        DETACH_ALL(m_poOfferAccuRelationData);
    DETACH_ALL(m_poOfferAccuRelationIndex);
        
        DETACH_ALL(m_poOfferAccuExistIndex);
        
        #ifdef EVENT_AGGR_RECYCLE_USE           
		DETACH_ALL(m_poCycleTypeIDData);
    DETACH_ALL(m_poCycleTypeIDIndex); 
        #endif
        
        DETACH_ALL(m_poOfferCombineIndex);
        DETACH_ALL(m_poOfferDisctIndex);
        
        DETACH_ALL(m_poProductCombineIndex);
        
        DETACH_ALL(m_poSplitData);
    DETACH_ALL(m_poSplitIndex);
        
        DETACH_ALL(m_poVirtualPricingCombineData);
    DETACH_ALL(m_poVirtualStrategyCombineIndex);
    
    #ifdef WHOLE_DISCOUNT
    DETACH_ALL(m_poWholeDiscountData); 
    #endif
    #ifdef GROUP_CONTROL
        DETACH_ALL(m_poCGPricingCombineData);
        DETACH_ALL(m_poCGStrategyCombineIndex);
    #endif
    
    
    DETACH_ALL(m_poCombineRelationData);
    DETACH_ALL(m_poCombineRelationIndex);
        
        DETACH_ALL(m_poSpecialNbrStrategyData);
    DETACH_ALL(m_poSpecialNbrStrategyIndex);
    DETACH_ALL(m_poSpecialNbrOfferIndex);
        
        DETACH_ALL(m_poHostInfoData);
        DETACH_ALL(m_poHostInfoIndex);
        
        DETACH_ALL(m_poGatherTaskData);
        DETACH_ALL(m_poGatherTaskIndex);
        DETACH_ALL(m_poOrgGatherTaskIndex);
        
        DETACH_ALL(m_poProductIDIndex);
        DETACH_ALL(m_poProIDAcctItemStringIndex);
        
        DETACH_ALL(m_poSpecialTariffData);
        DETACH_ALL(m_poSpecialTariffIndex);
        
        DETACH_ALL(m_poSpecialTariffCheckData);
        DETACH_ALL(m_poSpecialTariffCheckIndex);
        
        DETACH_ALL(m_poSpInfoData);
        DETACH_ALL(m_pHSpInfoIndex);
        
        DETACH_ALL(m_poGatherTaskListInfoData);
        DETACH_ALL(m_poGatherTaskListInfoIndex);
        
        DETACH_ALL(m_poSegmentInfoData);
        DETACH_ALL(m_poSegmentIndex);
        DETACH_ALL(m_poSegmentTypeIndex);
        
        DETACH_ALL(m_poLongTypeIndex);
        DETACH_ALL(m_poCheckRuleData);
        DETACH_ALL(m_poCheckRuleIndex);
        DETACH_ALL(m_poCheckSubRuleData);
        DETACH_ALL(m_poCheckSubRuleIndex);
        DETACH_ALL(m_poCheckArgumentData);
        DETACH_ALL(m_poCheckRelationData);
        DETACH_ALL(m_poTransFileTypeData);
        DETACH_ALL(m_poTransFileTypeIndex);
        DETACH_ALL(m_poParseRuleData);
        DETACH_ALL(m_poParseRuleIndex);
        DETACH_ALL(m_poParseCombData);
        DETACH_ALL(m_poParseCombIndex);
        DETACH_ALL(m_poInstTableData);
        DETACH_ALL(m_poInstTableIndex);
        DETACH_ALL(m_poTableTypeData);
        DETACH_ALL(m_poTableTypeIndex);
        DETACH_ALL(m_poRentIndex);
        DETACH_ALL(m_poNetworkPriorData);
        DETACH_ALL(m_poNetworkPriorIndex);
        DETACH_ALL(m_poTrunkToBeNBRData);
        DETACH_ALL(m_poTrunkToBeNBRIndex);
        
        
        DETACH_ALL(m_poCheckDupCfgData);
        DETACH_ALL(m_poCheckDupCfgIndex);

        DETACH_ALL(m_poCheckDupTypeData);
        DETACH_ALL(m_poCheckDupTypeIndex);

        DETACH_ALL(m_poCheckDupStepData);
        DETACH_ALL(m_poCheckDupStepIndex);

        DETACH_ALL(m_poShotTicketData);
        DETACH_ALL(m_poShotTicketIndex);

        DETACH_ALL(m_poUndoProcessData);
        DETACH_ALL(m_poUndoProcessIndex);

        DETACH_ALL(m_poUndoProcShotData);
        DETACH_ALL(m_poUndoProcShotIndex);

        DETACH_ALL(m_poUndoServData);
        DETACH_ALL(m_poUndoProductData);

        DETACH_ALL(m_poProductIndex);
        
        DETACH_ALL(m_poOrgPathData);
        DETACH_ALL(m_poOrgPathIndex);
        DETACH_ALL(m_poLocalEventTypeRuleData);
        DETACH_ALL(m_poLocalEventTypeRuleIndex);

    //2010.11.17
    DETACH_ALL(m_poFilePoolInfoData);  
    DETACH_ALL(m_poFilePoolInfoIndex); 
                                     
    DETACH_ALL(m_poFilePoolCondData);  
    DETACH_ALL(m_poFilePoolCondIndex); 
                                     
    DETACH_ALL(m_poFileTypeIndex); 
                                     
    DETACH_ALL(m_poTLVEncodeData); 
    DETACH_ALL(m_poTLVEncodeIndex); 
                                     
    DETACH_ALL(m_poTLVDecodeData); 
    DETACH_ALL(m_poTLVDecodeIndex); 
                                     
    DETACH_ALL(m_poBillingNodeData); 
    DETACH_ALL(m_poBillingNodeIndex); 
    DETACH_ALL(m_poFileParseRuleIndex); 

    DETACH_ALL(m_poSwitchCodeData); 
    DETACH_ALL(m_poSwitchCodeIndex); 
    //2010.12.20
    DETACH_ALL(m_poRoamTariffData); 
    DETACH_ALL(m_poRoamTariffIndex); 

    DETACH_ALL(m_poRoamCarrierData); 
    DETACH_ALL(m_poRoamCarrierIndex); 

    DETACH_ALL(m_poTariffSectorIndex); 

    DETACH_ALL(m_poCountryData); 
    DETACH_ALL(m_poCountryCodeIndex); 
    DETACH_ALL(m_poCountryAreaIndex);  
    
    DETACH_ALL(m_poSponsorData); 
    DETACH_ALL(m_poSponsorIndex);  

    DETACH_ALL(m_poMemberData); 
    DETACH_ALL(m_poMemberIndex);
           
        //prep
        DETACH_ALL(m_poTemplateMapSwitchData);
        DETACH_ALL(m_poTemplateMapSwitchIndex);
        
        DETACH_ALL(m_poObjectDefineData);
        DETACH_ALL(m_poObjectDefineIndex);
        
        DETACH_ALL(m_poEventParserGroupData);
        DETACH_ALL(m_poEventParserGroupIndex);
        
        DETACH_ALL(m_poTemplateRelationData);
        DETACH_ALL(m_poTemplateRelationIndex);
        DETACH_ALL(m_poFieldData);
        DETACH_ALL(m_poFieldTemplateIndex);
		DETACH_ALL(m_poFieldUnionStrIndex);
        //DETACH_ALL(m_poSwitchInfoData);
        //DETACH_ALL(m_poSwitchInfoIndex);
        DETACH_ALL(m_poMapSwitchTypeData);
        DETACH_ALL(m_poMapSwitchTypeIndex);
        
        //DETACH_ALL(m_poObjectType6Data);
        //DETACH_ALL(m_poObjectType6Index);
        //DETACH_ALL(m_poSepEPGData);
        //DETACH_ALL(m_poSepEPGIndex);
        
        DETACH_ALL(m_poEventAttrData);
        DETACH_ALL(m_poEventAttrIndex);
        
        //DETACH_ALL(m_poFileInfoData);
        //DETACH_ALL(m_poFileInfoIndex);
        
        DETACH_ALL(m_poEventHeadAndColumnsCfg);
        DETACH_ALL(m_poEventHeadAndColumnsIndex);
        
        DETACH_ALL(m_poSwitchIDMapSwitchData);
        DETACH_ALL(m_poSwitchIDMapSwitchIndex);
        
        DETACH_ALL(m_poFieldCheckMethodData);
        DETACH_ALL(m_poFieldCheckMethodIndex);
        
        DETACH_ALL(m_poFieldMapData);
        DETACH_ALL(m_poFieldMapIndex);
        
        DETACH_ALL(m_poFieldMergeData);
        DETACH_ALL(m_poFieldMergeIndex);
        
        DETACH_ALL(m_poTap3FileData);
        DETACH_ALL(m_poTap3BlockInfoData);
        //DETACH_ALL(m_poTap3BlockInfoIndex);
        
        DETACH_ALL(m_poSepFileData);
        DETACH_ALL(m_poSepBlockInfoData);
        //DETACH_ALL(m_poSepBlockInfoIndex);
        
        DETACH_ALL(m_poMergeRuleData);
	    DETACH_ALL(m_poMergeRuleAssociateData); 
        DETACH_ALL(m_poMergeRuleStrIndex);
	    DETACH_ALL(m_poMergeRuleAssociateStrIndex);
        
        DETACH_ALL(m_poMergeRuleOutData);
        DETACH_ALL(m_poMergeRuleOutIndex);
        
        DETACH_ALL(m_poMergeKeyRuleData);
        DETACH_ALL(m_poMergeKeyRuleIndex);
	DETACH_ALL(m_poAcctItemGroupStrIndex);
	DETACH_ALL(m_poAcctItemGroupBStrIndex);
	DETACH_ALL(m_poAcctItemStrIndex);
	//
        return m_bdetached;
}

//这里释放所有指针分配的堆内存
void ShmParamInfo::freeAll()
{
#undef FREE
#define FREE(X) \
    if (X) { \
        delete X; \
        X = 0; \
    }
    Log::log(0, "删除所有访问共享内存数据的指针!");
	FREE(m_poMServAcctInfoData);
    FREE(m_poMServAcctIndex);
    FREE(m_poLogicStatementData);
    FREE(m_poLogicStatementIndex);
    FREE(m_poAssignStatementData);
    FREE(m_poAssignStatementIndex);
    FREE(m_poFormulaData);
    FREE(m_poFormulaIndex);

    FREE(m_poFormatGroupData);
    FREE(m_poFormatStepData);
    FREE(m_poFormatRuleData);
    FREE(m_poFormatCombData);

    FREE(m_poTrunkData);
    FREE(m_poTrunkIndex);
    FREE(m_poAreaCodeIndex);
    FREE(m_poHLRData);
    FREE(m_poHLRIndex);
	//new
	FREE(m_poPNNotBillingData);
	FREE(m_poPNNotBillingIndex);
	//补充数据
	FREE(m_poVisitAreaCodeRuleData);
    FREE(m_pVisitAreaCodeIndex);
	FREE(m_poEdgeRoamRuleData);
    FREE(m_pEdgeRoamIndex);
	FREE(m_poPNSegBillingData);
	FREE(m_aPNSegBillingData);
	FREE(m_poTrunkTreeNodeData);
	FREE(m_pSwtichTrunkTree);
	FREE(m_poServiceInfo2Data);
	FREE(m_poServiceInfo2Index);
	FREE(m_poSpecTrunkProductIndex);
	FREE(m_poSwitchItemTypeData);
	FREE(m_poSwitchItemTypeIndex);
	FREE(m_poStrLocalAreaCodeData);
	//
    FREE(m_poCarrierIndex);
    FREE(m_poSwitchData);
    FREE(m_poSwitchIndex);
    FREE(m_poSwitchOPCIndex);
    FREE(m_poTrunkBillingData);
    FREE(m_poTrunkBillingIndex);
    FREE(m_poTimesTypeIndex);
	//
	FREE(m_poFilterRuleResultData);
    FREE(m_poRuleCheckCallingIndex);
	FREE(m_poRuleCheckCalledIndex);
	FREE(m_poRuleCheckAreaCodeIndex);
	FREE(m_poRuleCheckGatherPotIndex);
	FREE(m_poRuleCheckTrunkOutIndex);
	FREE(m_poRuleCheckTrunkInIndex);
	FREE(m_poRuleCheckSwitchIDIndex);
    FREE(m_poCityInfoData);
    FREE(m_poCityInfoIndex);
    FREE(m_poCityAreaIndex);

    FREE(m_poOrgData);
    FREE(m_poOrgIndex);
    FREE(m_poOrgExData);
    FREE(m_poOrgExIndex);
    FREE(m_poOrgLongTypeData);
    FREE(m_poOrgLongTypeIndex);
    FREE(m_poHeadExData);
    FREE(m_poHeadExIndex);
    FREE(m_poLocalHeadData);
    FREE(m_poLocalHeadIndex);

    FREE(m_poEventTypeData);
    FREE(m_poEventTypeIndex);
    FREE(m_poEventTypeGroupData);
    FREE(m_poEventTypeGroupIndex);

    FREE(m_poOfferData);
    FREE(m_poOfferIndex);
    FREE(m_poOfferSpecAttrIndex);
    FREE(m_poOfferNumAttrIndex);
    FREE(m_poOfferFreeIndex);

    FREE(m_poNbrMapData);
    FREE(m_poNbrMapType1Index);
    FREE(m_poNbrMapType2Index);
    FREE(m_poNbrMapType4Index);
    FREE(m_poNbrMapType8Index);

    FREE(m_poAcctItemData);
    FREE(m_poAcctItemIndex);

    FREE(m_poAcctItemGroupData);
    FREE(m_poAcctItemGroupIndex);

    FREE(m_poAcctItemGroupBData);
    FREE(m_poAcctItemGroupBIndex);

    FREE(m_poAcctItemBasicGroupBData);
    FREE(m_poAcctItemBasicGroupBIndex);

    FREE(m_poAcctItemDisctGroupBData);
    FREE(m_poAcctItemDisctGroupBIndex);

    FREE(m_poAcctItemIncludeDisctIndex);

    FREE(m_poLongEventTypeRuleData);
    FREE(m_poLongEventTypeRuleExData);

    FREE(m_poPricingPlanTypeIndex);

    FREE(m_poStateConvertData);
    FREE(m_poStateConvertIndex);

    FREE(m_poValueMapData);
    FREE(m_poValueMapIndex);

    FREE(m_poZoneItemData);
    FREE(m_poZoneItemIndex);
    FREE(m_poZoneItemStrIndex);

    FREE(m_poSplitAcctItemGroupData);
    FREE(m_poSplitAcctItemGroupIndex);
    FREE(m_poSplitAcctGroupEventData);
    FREE(m_poSplitAcctGroupEventIndex);

    FREE(m_poDistanceTypeData);
    FREE(m_poDistanceTypeIndex);

    FREE(m_poEdgeRoamRuleExData);
    FREE(m_poEdgeRoamRuleExTypeAIndex);
    FREE(m_poEdgeRoamRuleExTypeBIndex);
    FREE(m_poEdgeRoamRuleExMSCIndex);

    FREE(m_poPricingSectionInfoData);
    FREE(m_poSectionIndex);
    FREE(m_poStrategyIndex);

    FREE(m_poTariffInfoData);
    FREE(m_poTariffIndex);

    FREE(m_poDiscountInfoData);
    FREE(m_poDiscountIndex);

    FREE(m_poDisctApplyerInfoData);
    FREE(m_poDisctApplyerIndex);

    FREE(m_poDisctApplyObjectInfoData);
    FREE(m_poDisctApplyObjectIndex);

    FREE(m_poPercentInfoData);
    FREE(m_poPercentIndex);

    FREE(m_poLifeCycleData);
    FREE(m_poLifeCycleIndex);

    FREE(m_poPricingMeasureData);
    FREE(m_poPricingMeasureIndex);
    FREE(m_poStrategyIDMeasureIndex);

    FREE(m_poPricingCombineData);
    FREE(m_poPricingCombineIndex);
    FREE(m_poPlanIDIndex);
    FREE(m_poStrategyCombineIndex);

    FREE(m_poFilterConditionData);
    FREE(m_poFilterConditionIndex);

    FREE(m_poConditionPointData);

    FREE(m_poUsageTypeInfoData);
    FREE(m_poUsageTypeIndex)

    FREE(m_poTimeCondData);
    FREE(m_poTimeCondIndex);

    FREE(m_poEventTypeCondData);
    FREE(m_poEventTypeCondIndex);

    FREE(m_poCycleTypeData);
    FREE(m_poCycleTypeIndex);

    FREE(m_poAccuTypeData);
    FREE(m_poAccuTypeIndex);

    FREE(m_poOfferAccuRelationData);
    FREE(m_poOfferAccuRelationIndex);

    FREE(m_poOfferAccuExistIndex);

        #ifdef EVENT_AGGR_RECYCLE_USE           
    FREE(m_poCycleTypeIDIndex);
	FREE(m_poCycleTypeIDData);
        #endif

    FREE(m_poOfferCombineIndex);
    FREE(m_poOfferDisctIndex);

    FREE(m_poProductCombineIndex);

    FREE(m_poSplitData);
    FREE(m_poSplitIndex);

    FREE(m_poVirtualPricingCombineData);
    FREE(m_poVirtualStrategyCombineIndex);

    #ifdef GROUP_CONTROL
    FREE(m_poCGPricingCombineData);
    FREE(m_poCGStrategyCombineIndex);
    #endif

    #ifdef WHOLE_DISCOUNT
    FREE(m_poWholeDiscountData);
    #endif

    FREE(m_poCombineRelationData);
    FREE(m_poCombineRelationIndex);

    //FREE(m_poDirectoryData);

    FREE(m_poSpecialNbrStrategyData);
    FREE(m_poSpecialNbrStrategyIndex);
    FREE(m_poSpecialNbrOfferIndex);

    FREE(m_poHostInfoData);
    FREE(m_poHostInfoIndex);

    FREE(m_poGatherTaskData);
    FREE(m_poGatherTaskIndex);
    FREE(m_poOrgGatherTaskIndex);

    FREE(m_poProductIDIndex);
    FREE(m_poProIDAcctItemStringIndex);

    FREE(m_poSpecialTariffData);
    FREE(m_poSpecialTariffIndex);

    FREE(m_poSpecialTariffCheckData);
    FREE(m_poSpecialTariffCheckIndex);

    FREE(m_poSpInfoData);
    FREE(m_pHSpInfoIndex);

    FREE(m_poGatherTaskListInfoData);
    FREE(m_poGatherTaskListInfoIndex);

    FREE(m_poSegmentInfoData);
    FREE(m_poSegmentIndex);
    FREE(m_poSegmentTypeIndex);

    FREE(m_poLongTypeIndex);
    FREE(m_poCheckRuleData);
    FREE(m_poCheckRuleIndex);
    FREE(m_poCheckSubRuleData);
    FREE(m_poCheckSubRuleIndex);
    FREE(m_poCheckArgumentData);
    FREE(m_poCheckRelationData);
    FREE(m_poTransFileTypeData);
    FREE(m_poTransFileTypeIndex);
    FREE(m_poParseRuleData);
    FREE(m_poParseRuleIndex);
    FREE(m_poParseCombData);
    FREE(m_poParseCombIndex);
    FREE(m_poInstTableData);
    FREE(m_poInstTableIndex);
    FREE(m_poTableTypeData);
    FREE(m_poTableTypeIndex);
    FREE(m_poRentIndex);
    FREE(m_poNetworkPriorData);
    FREE(m_poNetworkPriorIndex);
    FREE(m_poTrunkToBeNBRData);
    FREE(m_poTrunkToBeNBRIndex);


    FREE(m_poCheckDupCfgData);
    FREE(m_poCheckDupCfgIndex);

    FREE(m_poCheckDupTypeData);
    FREE(m_poCheckDupTypeIndex);

    FREE(m_poCheckDupStepData);
    FREE(m_poCheckDupStepIndex);

    FREE(m_poShotTicketData);
    FREE(m_poShotTicketIndex);

    FREE(m_poUndoProcessData);
    FREE(m_poUndoProcessIndex);

    FREE(m_poUndoProcShotData);
    FREE(m_poUndoProcShotIndex);

    FREE(m_poUndoServData);
    FREE(m_poUndoProductData);

    FREE(m_poProductIndex);

    FREE(m_poOrgPathData);
    FREE(m_poOrgPathIndex);
    FREE(m_poLocalEventTypeRuleData);
    FREE(m_poLocalEventTypeRuleIndex);

    //2010.11.17
    FREE(m_poFilePoolInfoData);
    FREE(m_poFilePoolInfoIndex);
    FREE(m_poFilePoolCondData);
    FREE(m_poFilePoolCondIndex);
    FREE(m_poFileTypeIndex);
    FREE(m_poTLVEncodeData);
    FREE(m_poTLVEncodeIndex);
    FREE(m_poTLVDecodeData);
    FREE(m_poTLVDecodeIndex);
    FREE(m_poBillingNodeData);
    FREE(m_poBillingNodeIndex);
    FREE(m_poFileParseRuleIndex);
    FREE(m_poSwitchCodeData);
    FREE(m_poSwitchCodeIndex);
    //2010.12.20
    FREE(m_poRoamTariffData);
    FREE(m_poRoamTariffIndex);
    FREE(m_poRoamCarrierData);
    FREE(m_poRoamCarrierIndex);
    FREE(m_poTariffSectorIndex);
    FREE(m_poCountryData);
    FREE(m_poCountryCodeIndex);
    FREE(m_poCountryAreaIndex);
    FREE(m_poSponsorData);
    FREE(m_poSponsorIndex);
    FREE(m_poMemberData);
    FREE(m_poMemberIndex);
	//prep
	FREE(m_poTemplateMapSwitchData);
	FREE(m_poTemplateMapSwitchIndex);
	
	FREE(m_poObjectDefineData);
	FREE(m_poObjectDefineIndex);
	
	FREE(m_poEventParserGroupData);
	FREE(m_poEventParserGroupIndex);
	
	FREE(m_poTemplateRelationData);
	FREE(m_poTemplateRelationIndex);
	FREE(m_poFieldData);
	FREE(m_poFieldTemplateIndex);
	FREE(m_poFieldUnionStrIndex);
	
	FREE(m_poMapSwitchTypeData);
	FREE(m_poMapSwitchTypeIndex);
	
	FREE(m_poEventAttrData);
	FREE(m_poEventAttrIndex);
	
	FREE(m_poEventHeadAndColumnsCfg);
	FREE(m_poEventHeadAndColumnsIndex);
	
	FREE(m_poSwitchIDMapSwitchData);
	FREE(m_poSwitchIDMapSwitchIndex);
	
	FREE(m_poFieldCheckMethodData);
	FREE(m_poFieldCheckMethodIndex);
	
	FREE(m_poFieldMapData);
	FREE(m_poFieldMapIndex);
	
	FREE(m_poFieldMergeData);
	FREE(m_poFieldMergeIndex);
	
	FREE(m_poTap3FileData);
	FREE(m_poTap3BlockInfoData);
	//FREE(m_poTap3BlockInfoIndex);
	
	FREE(m_poSepFileData);
	FREE(m_poSepBlockInfoData);
	
	FREE(m_poMergeRuleData);
	FREE(m_poMergeRuleAssociateData);
	FREE(m_poMergeRuleAssociateStrIndex);
	FREE(m_poMergeRuleStrIndex);
	
	FREE(m_poMergeRuleOutData);
	FREE(m_poMergeRuleOutIndex);
	
	FREE(m_poMergeKeyRuleData);
	FREE(m_poMergeKeyRuleIndex);
	//
	FREE(m_poAcctItemGroupStrIndex);
	FREE(m_poAcctItemGroupBStrIndex);
	FREE(m_poAcctItemStrIndex);
	//FREE(m_poSepBlockInfoIndex);
#undef FREE
}

void ShmParamInfo::bindData()
{
    Log::log(0, "绑定共享内存数据到链表!");
	m_poMServAcctInfoList = (MServAcctInfo*)(*m_poMServAcctInfoData);
    m_poLogicStatementList = (LogicStatement *)(*m_poLogicStatementData);
    m_poAssignStatementList = (AssignStatement *)(*m_poAssignStatementData);
    m_poFormulaList = (Formula *)(*m_poFormulaData);

    m_poFormatGroupList = (FormatGroup *)(*m_poFormatGroupData);
    m_poFormatStepList = (FormatStep *)(*m_poFormatStepData);
    m_poFormatRuleList = (FormatRule *)(*m_poFormatRuleData);
    m_poFormatCombList = (FormatComb *)(*m_poFormatCombData);

    m_poTrunkList = (Trunk *)(*m_poTrunkData);
    m_poHLRList   = (HLR *)(*m_poHLRData);
	//补充数据
	m_poVisitAreaCodeRuleList   = (VisitAreaCodeRule *)(*m_poVisitAreaCodeRuleData);
	m_poEdgeRoamRuleList   = (EdgeRoamRule *)(*m_poEdgeRoamRuleData);
	m_poPNSegBillingList = (PNSegBilling*)(*m_poPNSegBillingData);
	m_aPNSegBilling = (PNSegBilling*)(*m_aPNSegBillingData);
	m_poTrunkTreeNodeList = (TrunkTreeNode*)(*m_poTrunkTreeNodeData);
	m_poPNNotBillingList = (strPNNotBilling*)(*m_poPNNotBillingData);
	
	m_poServiceInfo2List = (TServiceInfo2*)(*m_poServiceInfo2Data);
	m_poSwitchItemTypeList = (SwitchItemType*)(*m_poSwitchItemTypeData);
	m_poStrLocalAreaCodeList = (strLocalAreaCode*)(*m_poStrLocalAreaCodeData);
    //
	//
    m_poSwitchList  = (TSwitchInfo *)(*m_poSwitchData);
    m_poTrunkBillingList = (TrunkBilling *)(*m_poTrunkBillingData);
	m_poFilterRuleResultList = (FilterRuleResult *)(*m_poFilterRuleResultData);

    m_poCityInfoList = (CityInfo *)(*m_poCityInfoData);

    m_poOrgList = (Org *)(*m_poOrgData);
    m_poOrgExList = (OrgEx *)(*m_poOrgExData);
    m_poOrgLongTypeList = (OrgLongType *)(*m_poOrgLongTypeData);
    m_poHeadExList = (HeadEx *)(*m_poHeadExData);
    m_poLocalHeadList= (LocalHead *)(*m_poLocalHeadData);

    m_poEventTypeList = (EventType *)(*m_poEventTypeData);
    m_poEventTypeGroupList = (EventTypeGroup *)(*m_poEventTypeGroupData);

    m_poOfferList = (Offer *)(*m_poOfferData);

    m_poNbrMapList = (NbrMapData *)(*m_poNbrMapData);

    m_poAcctItemList = (AcctItem *)(*m_poAcctItemData);
    m_poAcctItemGroupList = (ItemGroupMember *)(*m_poAcctItemGroupData);
    m_poAcctItemGroupBList = (ItemGroupMember *)(*m_poAcctItemGroupBData);
    m_poAcctItemBasicGroupBList = (ItemGroupMember *)(*m_poAcctItemBasicGroupBData);
    m_poAcctItemDisctGroupBList = (ItemGroupMember *)(*m_poAcctItemDisctGroupBData);

    m_poLongEventTypeRuleList = (LongEventTypeRule *)(*m_poLongEventTypeRuleData);
    m_poLongEventTypeRuleExList = (LongEventTypeRuleEx *)(*m_poLongEventTypeRuleExData);

    m_poStateConvertList = (StateConvert *)(*m_poStateConvertData);

    m_poValueMapList = (ValueMapData *)(*m_poValueMapData);

    m_poZoneItemList = (ZoneItem *)(*m_poZoneItemData);

    m_poSplitAcctItemGroupList = (SplitAcctItemGroup *)(*m_poSplitAcctItemGroupData);
    m_poSplitAcctGroupEventList= (SplitAcctGroupEvent *)(*m_poSplitAcctGroupEventData);

    m_poDistanceTypeList = (DistanceType *)(*m_poDistanceTypeData);

    m_poEdgeRoamRuleExList = (EdgeRoamRuleEx *)(*m_poEdgeRoamRuleExData);

    m_poSectionList = (PricingSection *)(*m_poPricingSectionInfoData);
    m_poTariffList = (Tariff *)(*m_poTariffInfoData);
    m_poDiscountList = (Discount*)(*m_poDiscountInfoData);
    m_poDisctApplyerList = (DisctApplyer*)(*m_poDisctApplyerInfoData);              
    m_poDisctApplyObjectList = (DisctApplyer::DisctApplyObject*)(*m_poDisctApplyObjectInfoData);

    m_poPercentList = (Percent*)(*m_poPercentInfoData);
    m_poLifeCycleList = (LifeCycle*)(*m_poLifeCycleData);
    m_poPricingMeasureList = (PricingMeasure*)(*m_poPricingMeasureData);
    m_poPricingCombineList = (PricingCombine*)(*m_poPricingCombineData);
    m_poFilterConditionList = (FilterCond*)(*m_poFilterConditionData);
    m_poConditionPointList = (ConditionPoint*)(*m_poConditionPointData);
    m_poUsageTypeList = (UsageTypeMgr::stUsageType*)(*m_poUsageTypeInfoData);
    m_poTimeCondList = (TimeCond*)(*m_poTimeCondData);
    m_poEventTypeCondList = (EventTypeCond*)(*m_poEventTypeCondData);
    m_poCycleTypeList = (CycleType*)(*m_poCycleTypeData);
    m_poAccuTypeList = (AccuType*)(*m_poAccuTypeData);
    m_poOfferAccuRelationList = (OfferAccuRelation*)(*m_poOfferAccuRelationData);

	#ifdef EVENT_AGGR_RECYCLE_USE
	m_poCycleTypeIDList = (CycleTypeID*)(*m_poCycleTypeIDData);
	#endif
    m_poSplitCfgList = (SplitCfg*)(*m_poSplitData);
    m_poVirtualCombineList = (PricingCombine*)(*m_poVirtualPricingCombineData);
        #ifdef WHOLE_DISCOUNT
    m_poWholeDiscountList = (WholeDiscount*)(*m_poWholeDiscountData);
        #endif  
        #ifdef GROUP_CONTROL
    m_poCGPricingCombineList = (PricingCombine*)(*m_poCGPricingCombineData);
        #endif  
    m_poCombineRelationList = (CombineRelation*)(*m_poCombineRelationData);

    m_poGatherTaskInfoList = (GatherTaskInfo*)(*m_poGatherTaskData);
    //m_poDirectoryList = (Directory*)(*m_poDirectoryData);

    m_poSpecialNbrStrategyList = (SpecialNbrStrategy*)(*m_poSpecialNbrStrategyData);
    m_poHostInfoList = (HostInfo*)(*m_poHostInfoData);

    m_poSpecialTariffList = (SpecialTariff*)(*m_poSpecialTariffData);
    m_poSpecialTariffCheckList = (SpecialTariff*)(*m_poSpecialTariffCheckData);
    m_poSpInfoDataList = (SpInfoData*)(*m_poSpInfoData);
    m_poGatherTaskListInfoList = (GatherTaskListInfo*)(*m_poGatherTaskListInfoData);
    m_poSegmentInfoList = (SegmentInfo*)(*m_poSegmentInfoData);

    m_poCheckRuleList = (CheckRule*)(*m_poCheckRuleData);
    m_poCheckSubRuleList = (CheckSubRule*)(*m_poCheckSubRuleData);
    m_poCheckArgumentList = (CheckArgument*)(*m_poCheckArgumentData);
    m_poCheckRelationList = (CheckRelation*)(*m_poCheckRelationData);       
    m_poTransFileTypeList = (TransFileType*)(*m_poTransFileTypeData);       
    m_poParseRuleList = (ParseRule*)(*m_poParseRuleData);
    m_poParseCombList = (ParseComb*)(*m_poParseCombData);
    m_poInstTableList = (InstTableList*)(*m_poInstTableData);
    m_poTableTypeList = (EventTableType*)(*m_poTableTypeData);
    m_poNetworkPriorList = (NetworkPriority*)(*m_poNetworkPriorData);
    m_poTrunkToBeNBRList = (TTrunkToNBR*)(*m_poTrunkToBeNBRData);

    m_poCheckDupCfgList = (struct CheckDupCfg *)(*m_poCheckDupCfgData);
    m_poCheckDupTypeList = (struct CheckDupType *)(*m_poCheckDupTypeData);
    m_poCheckDupStepList = (struct CheckDupStep *)(*m_poCheckDupStepData);
    m_poShotTicketList = (struct CheckDupType *)(*m_poShotTicketData);
    m_poUndoProcessList = (struct UndoProcess *)(*m_poUndoProcessData);
    m_poUndoProcShotList = (struct UndoProcess *)(*m_poUndoProcShotData);
    m_poUndoServList = (struct UndoServ *)(*m_poUndoServData);
    m_poUndoProductList = (struct UndoProductPackage *)(*m_poUndoProductData); 
    m_poOrgPathList =(OrgPath *)(*m_poOrgPathData); 
    m_poLocalEventTypeRuleList = (LocalEventTypeRule*)(*m_poLocalEventTypeRuleData);

    //2010.11.17
    m_poFilePoolInfoList = (FilePoolInfo *) (*m_poFilePoolInfoData);
    m_poFilePoolCondList = (FilePoolCondition *) (*m_poFilePoolCondData);
    m_poTLVEncodeList = (FileAttr *)(*m_poTLVEncodeData);
    m_poTLVDecodeList = (FileAttr *)(*m_poTLVDecodeData);
    m_poBillingNodeList = (BillingNodeInfo *) ( *m_poBillingNodeData);
        m_poSwitchCodeList = (SwitchCode *)(*m_poSwitchCodeData);
    //2010.12.20
    m_poRoamTariffList = (TariffInfo *)(*m_poRoamTariffData);
    m_poRoamCarrierList = (CarrierInfo *)(*m_poRoamCarrierData);
    m_poCountryList = (CountryInfo *)(*m_poCountryData);
    m_poSponsorList = (SponsorInfo *)(*m_poSponsorData);
    m_poMemberList = (SpecialGroupMember *)(*m_poMemberData);
        //prep
        m_poTemplateMapSwitchList = (TemplateMapSwitch*)(*m_poTemplateMapSwitchData);
        m_poObjectDefineList = (ObjectDefine*)(*m_poObjectDefineData);
        m_poEventParserGroupList = (EventParserGroup*)(*m_poEventParserGroupData);
        m_poTemplateRelationList = (TemplateRelation*)(*m_poTemplateRelationData);
        m_poFieldSHMList = (Field*)(*m_poFieldData);
        //m_poSepEPGList = (EventParserGroup*)(*m_poSepEPGData);
        m_poEventAttrList = (EventAttr*)(*m_poEventAttrData);
        //m_poObjectType6List = (ObjectDefine*)(*m_poObjectType6Data);
        //m_poFileInfoList = (prep_space::FileInfo*)(*m_poFileInfoData);
        
        //m_poSwitchInfoList = (SwitchInfo*)(*m_poSwitchInfoData);
        m_poMapSwitchTypeList = (TemplateMapSwitch*)(*m_poMapSwitchTypeData);
        m_poEventHeadAndColumnsList = (EventParserGroup*)(*m_poEventHeadAndColumnsCfg);
        m_poSwitchIDMapSwitchList = (TSwitchInfo*)(*m_poSwitchIDMapSwitchData);
        m_poFieldCheckMethodList = (FieldCheckMethod*)(*m_poFieldCheckMethodData);
        m_poFieldMapList = (ValueMap*)(*m_poFieldMapData);
        m_poFieldMergeList = (Field*)(*m_poFieldMergeData);
        m_poTap3FileList = (Tap3File*)(*m_poTap3FileData);
        m_poTap3BlockInfoList = (Tap3BlockInfo*)(*m_poTap3BlockInfoData);
        m_poSepFileList = (SepFile*)(*m_poSepFileData);
        m_poSepBlockInfoList = (SepBlockInfo*)(*m_poSepBlockInfoData);
        //合并功能
        m_poMergeRuleDataList = (MergeRuleData*)(*m_poMergeRuleData);
		m_poMergeRuleAssociateList = (MergeRuleData*)(*m_poMergeRuleAssociateData);
        m_poRuleOutList = (MergeRuleData::ruleOut*)(*m_poMergeRuleOutData);
        m_poMergeKeyRuleList = (MergeKeyRule*)(*m_poMergeKeyRuleData);
        //bindStdData();
}

ShmParamInfo::operator bool()
{
    return m_bAttached;
}


void ShmParamInfo::initSizeCfg(const char* sSegment, const char* sCode, const char* sSqlcode)
{
    int iCount;
    char countbuf[32] = {0};
    TOCIQuery qry(Environment::getDBConn());
    if (!sSegment || !sCode || !sSqlcode) {
        Log::log(0, "初始化的配置参数不全, 无法初始化数据库中的配置参数");
        THROW(MBC_ParamInfo + 1);
    }

    if (!ParamDefineMgr::getParam(sSegment, sCode, countbuf)) {
        qry.setSQL(sSqlcode);
        qry.open();
        qry.next();
        iCount = qry.field(0).asInteger();
        qry.close();

        sprintf(countbuf, "%d", iCount);
        ParamDefineMgr::setParam(sSegment, sCode, countbuf);
    }

}



void ShmParamInfo::initSizeCfg(const char* sSegment, const char* sCode, const char* sName, const char* sSqlcode)
{
    int iCount;
    char countbuf[32] = {0};
    TOCIQuery qry(Environment::getDBConn());
    if (!sSegment || !sCode || !sName || !sSqlcode) {
        Log::log(0, "初始化的配置参数不全, 无法初始化数据库中的配置参数");
        THROW(MBC_ParamInfo + 1);
    }

    if (!ParamDefineMgr::getParam(sSegment, sCode, countbuf)) {
        qry.setSQL(sSqlcode);
        qry.open();
        qry.next();
        iCount =qry.field(0).asInteger();
        iCount = CAL_COUNT(iCount);
        qry.close();

        sprintf(countbuf, "%d", iCount);
        ParamDefineMgr::setParam(sSegment, sCode, countbuf, sName);
    }

}

void ShmParamInfo::initAllSizeCfg()
{
    //这里设置所有的共享内存的大小,先从数据库中取得数据的条数,插入到配置中
    //到开辟共享内存大小的时候,会根据该大小和系数配置PARAM_SIZE_RATIO_NUM的乘积来决定大小
    char sSqlCode[2048] = {0};

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) "
           " FROM BILL_CONDITION A, LOGIC_STATEMENT B "
           " WHERE A.CONDITION_ID = B.CONDITION_ID ");
    initSizeCfg(LOADPARAMINFO, PARAM_LOGICSTATEMENT_NUM,"LOGICSTATEMENT数", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) "
           " FROM BILL_OPERATION A, ASSIGN_STATEMENT B "
           " WHERE A.OPERATION_ID = B.OPERATION_ID ");
    initSizeCfg(LOADPARAMINFO, PARAM_ASSIGNSTATEMENT_NUM,"ASSIGNSTATEMENT数", sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_CITY_INFO ");
    initSizeCfg(LOADPARAMINFO,PARAM_CITYINFO_NUM,"BCITYINFO数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRICING_PLAN ");
    initSizeCfg(LOADPARAMINFO,PARAM_PRICINGPLANTYPE_NUM,"PRICING_PLAN记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM ORG ");
    initSizeCfg(LOADPARAMINFO,PARAM_ORG_NUM,"ORG运维机构数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "(SELECT A.ARG_ID, NVL(B.SUB_RULE_ID, -1) SUB_RULE_ID, "
           " NVL(A.LOCATION, -1) LOCATION, NVL(TRIM(A.VALUE), '') VALUE "
           " FROM CHECK_ARGUMENT A, CHECK_SUBRULE B "
           " WHERE A.SUB_RULE_ID = B.SUB_RULE_ID(+) "
           " ORDER BY SUB_RULE_ID, LOCATION  ASC )");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKARGUMENT_INFO_NUM,"CHECK_ARGUMENT记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_LONG_EVENT_TYPE_RULE ");
    initSizeCfg(LOADPARAMINFO,PARAM_LONGEVENTTYPERULE_NUM,"B_LONG_EVENT_TYPE_RULE记录数",sSqlCode);         

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM CHECK_RULE ");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKRULE_RULE_INFO_NUM,"CHECK_RULE记录数",sSqlCode); 


    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) "
           " FROM FORMULA_LIST "
           " WHERE STATE='F0A' ");
    initSizeCfg(LOADPARAMINFO, PARAM_FORMULA_NUM,"FORMULA_LIST记录数", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_ATTRIBUTE_FORMAT "
           " WHERE FORMAT_ID IN "
           " (SELECT FORMAT_ID FROM B_ATTRIBUTE_FORMAT_COMBIN) ");
    initSizeCfg(LOADPARAMINFO, PARAM_FORMATGROUP_NUM,"B_ATTRIBUTE_FORMAT记录数", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_ATTRIBUTE_FORMAT_STEP ");
    initSizeCfg(LOADPARAMINFO, PARAM_FORMATSTEP_NUM,"B_ATTRIBUTE_FORMAT_STEP记录数", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_ATTRIBUTE_FORMAT_RULE ");
    initSizeCfg(LOADPARAMINFO, PARAM_FORMATRULE_NUM,"B_ATTRIBUTE_FORMAT_RULE记录数", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_ATTRIBUTE_FORMAT_COMBIN ");
    initSizeCfg(LOADPARAMINFO, PARAM_FORMATCOMB_NUM,"B_ATTRIBUTE_FORMAT_COMBIN记录数", sSqlCode);

    memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," SELECT count(*) FROM B_PROCESS_PARSE_COMBINE ");
    initSizeCfg(LOADPARAMINFO, PARAM_PARSECOMB_INFO_NUM,"B_PROCESS_PARSE_COMBINE记录数",sSqlCode);

	memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," SELECT count(*) FROM m_serv_acct ");
    initSizeCfg(LOADPARAMINFO, PARAM_MSERVACCT_INFO_NUM,"B_PROCESS_PARSE_COMBINE记录数",sSqlCode);
    memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," SELECT COUNT(*) FROM B_PARSE_RULE "
           " WHERE PARSE_RULE_GROUP_ID IN "
           " ( SELECT PARSE_RULE_GROUP_ID FROM B_PROCESS_PARSE_COMBINE)");
    initSizeCfg(LOADPARAMINFO, PARAM_PARSERULE_INFO_NUM,"B_PARSE_RULE记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)*5 " 
           " FROM ACCT_ITEM_GROUP_MEMBER ");
    initSizeCfg(LOADPARAMINFO,PARAM_ACCTITEMMEMBERS_NUM,"ACCT_ITEM_GROUP_MEMBER记录数*5",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM ACCT_ITEM_GROUP ");
    initSizeCfg(LOADPARAMINFO,PARAM_ACCTITEMGROUPS_NUM,"ACCT_ITEM_GROUP记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_EVENT_TYPE_GROUP_MEMBER ");
    initSizeCfg(LOADPARAMINFO,PARAM_EVENTTYPEGROUP_NUM,"B_EVENT_TYPE_GROUP_MEMBER记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_GENERAL_SEGMENT ");
    initSizeCfg(LOADPARAMINFO,PARAM_SEGMENTINFO_INFO_NUM,"B_GENERAL_SEGMENT记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_VALUE_MAP ");
    initSizeCfg(LOADPARAMINFO,PARAM_VALUEMAP_NUM,"B_VALUE_MAP记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_SERV_STATE_CONVERT ");
    initSizeCfg(LOADPARAMINFO,PARAM_STATECONVERT_NUM,"B_SERV_STATE_CONVERT记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRODUCT_OFFER_ATTR "
           " WHERE ATTR_VALUE_TYPE_ID = 15 ");
    initSizeCfg(LOADPARAMINFO,PARAM_OFFER_SPECATTR_NUM,"PRODUCT_OFFER_ATTR记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_HOST_INFO ");
    initSizeCfg(LOADPARAMINFO,PARAM_HOSTINFOINFO_NUM,"B_HOST_INFO记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)*2 " 
           " FROM PRICING_COMBINE_RELATION ");
    initSizeCfg(LOADPARAMINFO,PARAM_COMBINERELATIONINFO_NUM,"PRICING_COMBINE_RELATION*2记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)*1.2 " 
           " FROM B_PROD_ACCT_ITEM_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_PRODUCTACCTITEMINFO_NUM,"B_PROD_ACCT_ITEM_TYPE记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM ISMP_PROD_INFO ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPINFOSEEKINFO_NUM,"ISMP_PROD_INFO记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) "
           " FROM (SELECT A.ZONE_ID, B.ZONE_ITEM_ID, C.ITEM_REF_VALUE "
           " FROM ZONE A, ZONE_ITEM B, ZONE_ITEM_VALUE C "
           " WHERE A.ZONE_ID = B.ZONE_ID "
           "  AND B.ZONE_ITEM_ID = C.ZONE_ITEM_ID) ");
    initSizeCfg(LOADPARAMINFO,PARAM_ZONE_ITEM_NUM,"ZONE_ITEM记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_SPLIT_ACCT_ITEM_GROUP ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPLITACCTGROUP_NUM,"B_SPLIT_ACCT_ITEM_GROUP数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRODUCT_OFFER "
           " WHERE STATE = '10A'");
    initSizeCfg(LOADPARAMINFO,PARAM_OFFER_NUM,"PRODUCT_OFFER数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM LOCAL_HEAD ");
    initSizeCfg(LOADPARAMINFO,PARAM_LOCALHEAD_NUM,"LOCAL_HEAD数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM RATABLE_EVENT_TYPE "
           " WHERE STATE = '10A' ");
    initSizeCfg(LOADPARAMINFO,PARAM_EVENTTYPE_NUM,"RATABLE_EVENT_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           "(SELECT '1-'||TRIM(MSC)||DECODE(LAC,NULL,('-'),('-'||TRIM(LAC)))||DECODE(CELL_ID,NULL,'','-'||TRIM(CELL_ID)) SKEY, "
           " REGION_ID,NVL(TYPE,'12A') TYPE,1 ORG_TYPE,TO_CHAR(NVL(EFF_DATE,TO_DATE('19700101010101','YYYYMMDDHH24MISS')),'YYYYMMDDHH24MISS'), "
           "  TO_CHAR(NVL(EXP_DATE,TO_DATE('19700101010101','YYYYMMDDHH24MISS')),'YYYYMMDDHH24MISS'),TRIM(MSC) MSC FROM B_MOBILE_EQUIP_REGION  A ,ORG B "
           " WHERE A.REGION_ID =B.ORG_ID "
           " UNION "
           " ( "
           " SELECT '2-'||TRIM(MSC)||DECODE(LAC,NULL,('-'),('-'||TRIM(LAC)))||DECODE(CELL_ID,NULL,'','-'||TRIM(CELL_ID)) SKEY,"
           " A.REGION_ID,NVL(TYPE,'12A') TYPE,2 ORG_TYPE,TO_CHAR(NVL(EFF_DATE,TO_DATE('19700101010101','YYYYMMDDHH24MISS')), 'YYYYMMDDHH24MISS'),"
           " TO_CHAR(NVL(EXP_DATE,TO_DATE('19700101010101','YYYYMMDDHH24MISS')),'YYYYMMDDHH24MISS'),TRIM(MSC) MSC FROM B_MOBILE_EQUIP_REGION  A ,STAT_REGION B "
           " WHERE A.REGION_ID =B.REGION_ID  ) "
           " UNION "
           " ( "
           "     SELECT REGION_TYPE_ID||'-'||TRIM(MSC)||DECODE(LAC,NULL,('-'),('-'||TRIM(LAC)))||DECODE(CELL_ID,NULL,'','-'||TRIM(CELL_ID)) SKEY,"
           " A.REGION_ID,NVL(TYPE,'12A') TYPE ,B.REGION_TYPE_ID ORG_TYPE,TO_CHAR(NVL(EFF_DATE,TO_DATE('19700101010101','YYYYMMDDHH24MISS')), 'YYYYMMDDHH24MISS'),"
           " TO_CHAR(NVL(EXP_DATE,TO_DATE('19700101010101','YYYYMMDDHH24MISS')),'YYYYMMDDHH24MISS') ,TRIM(MSC) MSC FROM B_MOBILE_EQUIP_REGION  A ,B_SELF_DEFINE_REGION B "
           " WHERE A.REGION_ID =B.REGION_ID "
           " )   ORDER BY TYPE )");
    initSizeCfg(LOADPARAMINFO,PARAM_EDGEROAMRULEEX_NUM,"B_MOBILE_EQUIP_REGION数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           " FROM (SELECT UP_DOWN_FLAG,SP_NBR,IN_NBR,"
           " SERVICE_NBR,BILLING_TYPE,"
           " NVL(EFF_DATE, TO_DATE('20000501', 'YYYYMMDD')) EFF_DATE,"
           " NVL(EXP_DATE, TO_DATE('30000501', 'YYYYMMDD')) EXP_DATE,"
           " TARIFF_RATE"
           " FROM B_JS_SP_SPECIAL_PROCESS A, B_JS_SP_TARIFF_CFG B"
           " WHERE A.SPECIAL_TYPE = 1 "
           " AND A.TARIFF_ID = B.TARIFF_ID) ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPECIALTRIFFINFO_NUM,"B_JS_SP_SPECIAL_PROCESS数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_LONG_TYPE_RULE ");
    initSizeCfg(LOADPARAMINFO,PARAM_LONGTYPE_INFO_NUM,"B_LONG_TYPE_RULE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM"
           " (SELECT A.RELATION_ID, NVL(C.RULE_ID, -1) RULE_ID, "
           " NVL(B.TRANS_FILE_TYPE_ID, -1) BILL_TYPE,  "
           " NVL(A.RECORD_TYPE, -1) RECORD_TYPE, "
           " NVL(A.CHECK_SEQ, -1) CHECK_SEQ, "
           " NVL(A.ALLOW_NULL,'N') ALLOW_NULL "
           " FROM CHECK_RELATION A, TRANS_FILE_TYPE B, CHECK_RULE C "
           " WHERE A.RULE_ID = C.RULE_ID(+) "
           " AND   A.BILL_TYPE = B.TRANS_FILE_TYPE_ID(+) "
           " AND   NVL(A.BFLAG, 1) <>0 AND NVL(A.BFLAG,1)<>99)");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKRELATION_INFO_NUM,"下发校验规则",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_CARRIER ");
    initSizeCfg(LOADPARAMINFO,PARAM_CARRIER_NUM,"B_CARRIER数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_NBR_MAP ");
    initSizeCfg(LOADPARAMINFO,PARAM_NBR_MAP_NUM,"B_NBR_MAP数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRODUCT_OFFER_ATTR "
           " WHERE ATTR_VALUE_TYPE_ID IN (3, 5, 15)");
    initSizeCfg(LOADPARAMINFO,PARAM_OFFER_NUMATTR_NUM,"PRODUCT_OFFER_ATTR数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM"
           "(SELECT A.SUB_RULE_ID, NVL(B.RULE_ID, -1) RULE_ID, "
           "NVL(A.FUNC_ID, -1) FUNC_ID, NVL(A.CHECK_SEQ, -1) CHECK_SEQ, "
           "NVL(A.NOT_ID, 0) NOT_ID "
           "FROM CHECK_SUBRULE A, CHECK_RULE B "
           "WHERE A.RULE_ID = B.RULE_ID(+) )");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKRULE_SUBRULE_INFO_NUM,"上传下发校验规则",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM ACCT_ITEM_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_ACCTITEM_NUM,"ACCT_ITEM_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) "
           " FROM (SELECT ORG_ID, NVL(PARENT_ORG_ID, -2) PARENT_ID, "
           " NVL(ORG_LEVEL_ID, -2) LEVEL_ID,NVL(ORG_AREA_CODE, '') AREA_CODE, "
           " '1_' || ORG_ID SKEY "
           " FROM ORG  UNION       ALL "
           " SELECT REGION_ID, NVL(PARENT_REGION_ID, -2), "
           " NVL(REGION_LEVEL, -2), NVL(ORG_AREA_CODE, '')," 
           " '2_'|| REGION_ID "
           " FROM STAT_REGION UNION ALL "
           " SELECT REGION_ID, NVL(PARENT_REGION_ID, -2), "
           " NVL(REGION_LEVEL, -2), NVL(REGION_AREA_CODE, ''), "
           " NVL(REGION_TYPE_ID, 0) || '_' || REGION_ID "
           " FROM B_SELF_DEFINE_REGION ) ");
    initSizeCfg(LOADPARAMINFO,PARAM_ORGEX_NUM,"REGION信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM EVENT_PRICING_STRATEGY ");
    initSizeCfg(LOADPARAMINFO,PARAM_CGCOMBINEINFO_NUM,"EVENT_PRICING_STRATEGY数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           " (SELECT SWITCH_ID||'+'||TRUNK_CODE||'+'||'0' SKEY, "
           " TRUNK_TYPE_ID, TO_NUMBER(NEED_BILLING) NEED_BILLING "
           " FROM B_TRUNK  WHERE TRUNK_SIDE <> '1' "
           " UNION "
           " SELECT SWITCH_ID||'+'||TRUNK_CODE||'+'||'1' SKEY,  "
           " TRUNK_TYPE_ID, TO_NUMBER(NEED_BILLING) NEED_BILLING  "   
           " FROM B_TRUNK WHERE TRUNK_SIDE <> '0') ");
    initSizeCfg(LOADPARAMINFO,PARAM_TRUNK_NUM,"B_TRUNK数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_GATHER_TASK ");
    initSizeCfg(LOADPARAMINFO,PARAM_GATERTASKLISTINFO_NUM,"B_GATHER_TASK数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_AREA_CODE ");
    initSizeCfg(LOADPARAMINFO,PARAM_AREACODE_NUM,"B_AREA_CODE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_HLR ");
    initSizeCfg(LOADPARAMINFO,PARAM_HLR_NUM,"B_HLR数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_visit_area_code ");
    initSizeCfg(LOADPARAMINFO,PARAM_VISIT_AREAVODE_INFO_NUM,"B_VISIT_AREAVODE_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_edge_roam ");
    initSizeCfg(LOADPARAMINFO,PARAM_EDGEROAMRULE_INFO_NUM,"b_edge_roam数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_pn_seg_billing ");
    initSizeCfg(LOADPARAMINFO,PARAM_PNSEGBILLING_INFO_NUM,"b_pn_seg_billing_数目*2",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_pn_seg_not_billing ");
    initSizeCfg(LOADPARAMINFO,PARAM_PNNOTBILLING_INFO_NUM,"b_pn_seg_not_billing_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, " select count(*) from (select distinct switch_id, trunk_in from b_pn_seg_billing) a ");
    initSizeCfg(LOADPARAMINFO,PARAM_TRUNKTREENODE_INFO_NUM,"b_pn_seg_billing_数目",sSqlCode);
	
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM B_SP_SERVICE ");
    initSizeCfg(LOADPARAMINFO,PARAM_SERVICE_INFO2_NUM,"B_SP_SERVICE_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM B_TRUNK_BILLING ");
    initSizeCfg(LOADPARAMINFO,PARAM_TRUNKBILLING_NUM,"B_TRUNK_BILLING_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_spec_trunk_product ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPEC_TRUNK_PRODUCT_NUM,"b_spec_trunk_product_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_switch_item_type ");
    initSizeCfg(LOADPARAMINFO,PARAM_SWITCHITEMTYPE_NUM,"b_switch_item_type_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM b_filter_rule ");
    initSizeCfg(LOADPARAMINFO,PARAM_FILTER_RESULT_NUM,"b_filter_rule_数目",sSqlCode);
	
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM  b_area_code where long_group_type_id=10 ");
    initSizeCfg(LOADPARAMINFO,PARAM_STR_LOCALAREACODE_NUM,"b_area_code_数目",sSqlCode);
	
	memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)  FROM  B_TIMES_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_TIMESTYPE_NUM,"B_TIMES_TYPE_数目",sSqlCode);
	
	//
    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_SPECIAL_NBR_STRATEGY ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPECIALNBRSTRATEGYINFO_NUM,"B_SPECIAL_NBR_STRATEGY数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM CFG_SPLIT_ATTR ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPLITCFGINFO_NUM,"CFG_SPLIT_ATTR数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_SPLIT_ACCT_GROUP2EVENT_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_SPLITACCTEVENT_NUM,"B_SPLIT_ACCT_GROUP2EVENT_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           " (SELECT REGION_ID, "
           " TO_CHAR(NVL(EFF_DATE, TO_DATE('19000101010101', 'yyyymmddhh24miss')), "
           " 'yyyymmddhh24miss') EFF_DATE, "
           " TO_CHAR(NVL(EXP_DATE, TO_DATE('20500101010101', 'yyyymmddhh24miss')), "
           " 'yyyymmddhh24miss') EXP_DATE, "
           " NVL(EMULATORY_PARTNER_ID, -1) EMULATORY_PARTNER_ID, "
           " NVL(PARTY_ID, -1) PARTY_ID, "
           " NVL(TYPE_CODE, '52Z') TYPE_CODE, "
           " HEAD, "
           " ASCII(LOWER(SUBSTR(NVL(TYPE_CODE, '52Z'), -1, 1))) - 97 POSITION, "
           " B.REGION_TYPE_ID REGION_TYPE_ID "
           " FROM (SELECT * FROM B_HEAD_REGION) A, "
           " (SELECT * "
           " FROM (SELECT ORG_ID, "
           " PARENT_ORG_ID, "
           " ORG_LEVEL_ID, "
           " NAME, "
           " ORG_AREA_CODE, "
           " ORG_CODE, "
           " 1 REGION_TYPE_ID "
           " FROM ORG A "
           " UNION ALL "
           " SELECT REGION_ID ORG_ID, "
           " PARENT_REGION_ID PARENT_ORG_ID, "
           " REGION_LEVEL ORG_LEVEL_ID, "
           " NAME, "
           " ORG_AREA_CODE, "
           " ORG_CODE, "
           " 2 REGION_TYPE_ID "
           " FROM STAT_REGION B "
           " UNION ALL "
           " SELECT REGION_ID ORG_ID, "
           " PARENT_REGION_ID PARENT_ORG_ID, "
           " REGION_LEVEL ORG_LEVEL_ID, "
           " NAME, "
           " REGION_AREA_CODE ORG_CODE, "
           " REGION_CODE ORG_CODE, "
           " REGION_TYPE_ID "
           " FROM B_SELF_DEFINE_REGION)) B "
           " WHERE A.REGION_ID = B.ORG_ID )");
    initSizeCfg(LOADPARAMINFO,PARAM_HEADEX_NUM,"REGION信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           "(SELECT ORG_ID_A, ORG_ID_B, DISTANCE_TYPE_ID FROM B_REGION_DISTANCE "
           " UNION ALL "
           " SELECT ORG_ID_B, ORG_ID_A, DISTANCE_TYPE_ID FROM B_REGION_DISTANCE)");
    initSizeCfg(LOADPARAMINFO,PARAM_ORGLONGTYPE_NUM,"B_REGION_DISTANCE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_USAGE_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_USAGETYPEINFO_NUM,"B_USAGE_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_OFFER_ITEM_GROUP_RELATION "
           " WHERE FREE_TYPE = 1");
    initSizeCfg(LOADPARAMINFO,PARAM_OFFER_FREE_NUM,"B_OFFER_ITEM_GROUP_RELATION数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           "( SELECT FILETYPEID,FILERULE,ERR_HEAD,ERR_TAIL FROM B_TAP3FILE"      
           "  UNION                                           "
           " SELECT FILETYPEID,FILERULE,ERR_HEAD,ERR_TAIL FROM B_SEPFILE )");
    initSizeCfg(LOADPARAMINFO,PARAM_TRANSFILE_INFO_NUM,"B_TAP3FILE+B_SEPFILE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_DISTANCE_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_DISTANCETYPE_NUM,"B_DISTANCE_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_GATHER_TASK ");
    initSizeCfg(LOADPARAMINFO,PARAM_GATHERDATAINFO_NUM,"B_GATHER_TASK数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_TONE_EVENT_TYPE_RULE ");
    initSizeCfg(LOADPARAMINFO,PARAM_LONGEVENTTYPERULEEX_NUM,"B_TONE_EVENT_TYPE_RULE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)*15" 
           " FROM B_ACCT_ITEM_GROUP_MEMBER ");
    initSizeCfg(LOADPARAMINFO,PARAM_ACCTITEMMEMBERSB_NUM,"B_ACCT_ITEM_GROUP_MEMBER*15记录数",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "(SELECT DISTINCT S.ITEM_GROUP_ID, NVL(S.INCLUDE_DISCOUNT_ITEM, 1) "
           " FROM B_ACCT_ITEM_GROUP S "
           " WHERE EXISTS "
           " (SELECT 1 FROM B_ACCT_ITEM_GROUP_MEMBER T "
           " WHERE T.ITEM_GROUP_ID = S.ITEM_GROUP_ID) )");
    initSizeCfg(LOADPARAMINFO,PARAM_ACCTITEMGROUPSB_NUM,"B_ACCT_ITEM_GROUP数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRICING_SECTION ");
    initSizeCfg(LOADPARAMINFO,PARAM_SECTIONINFO_NUM,"PRICING_SECTION数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)" 
           " FROM(SELECT A.TARIFF_ID, A.TARIFF_TYPE, A.PRICING_SECTION_ID, "
           "   A.RESOURCE_ID, NVL(A.ACTION_ID, 0) ACTION_ID, "
           "   A.ACCT_ITEM_TYPE_ID, NVL(A.SUB_PRODUCT_ID, 0) SUB_PRODUCT_ID, "
           "   B.STANDARD_CONVERSION_RATE, A.CALC_METHOD_ID, A.RATE_UNIT, "
           "   NVL(A.FIXED_RATE_VALUE_ID, 0) FIXED_RATE_VALUE_ID, "
           "   A.SCALED_RATE_VALUE_ID, A.CALC_PRIORITY, A.BELONG_CYCLE_DURATION, "
           "   A.RATE_VALUE_PRECISION, "
           "   A.CALCULATE_PRECISION, "
           "   A.ISTARIFF, NVL(A.MEASURE_ID, 0) MEASURE_ID, "
           "  A.UNIT_IFUSEPARAM ,NVL(A.BILLING_UNIT,0) BILLING_UNIT "
           " FROM TARIFF A, TARIFF_UNIT B "
           "   WHERE A.TARIFF_UNIT_ID = B.TARIFF_UNIT_ID)");
    initSizeCfg(LOADPARAMINFO,PARAM_TARIFFINFO_NUM,"TARIFF数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM DISCOUNT_DESC ");
    initSizeCfg(LOADPARAMINFO,PARAM_DISCOUNTINFO_NUM,"DISCOUNT_DESC数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           "(SELECT UP_DOWN_FLAG,SP_NBR,IN_NBR,SERVICE_NBR,"
           " NVL(EFF_DATE,TO_DATE('20000501','YYYYMMDD')) EFF_DATE,"
           " NVL(EXP_DATE,TO_DATE('30000501','YYYYMMDD')) EXP_DATE,"
           " TARIFF_RATE FROM B_JS_SP_SPECIAL_PROCESS A,B_JS_SP_TARIFF_CFG B"
           " WHERE A.SPECIAL_TYPE = 2 AND A.TARIFF_ID=B.TARIFF_ID)");
    initSizeCfg(LOADPARAMINFO,PARAM_SPECIALTRIFFCHECKINFO_NUM,"B_JS_SP_SPECIAL_PROCESS数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "select count(*)*80 from acct_item_type "
    				 " connect by summary_acct_item_type_id = prior acct_item_type_id "
                     " start with acct_item_type_id in ( "
					 " select  acct_item_type_id from b_prod_acct_item_type ) ");
    initSizeCfg(LOADPARAMINFO,PARAM_PROID_PRODUCTACCTITEMINFO_NUM,"B_PROD_ACCT_ITEM_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM DISCOUNT_DESC ");
    initSizeCfg(LOADPARAMINFO,PARAM_DISCTAPPLYERINFO_NUM,"DISCOUNT_DESC数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM DISCOUNT_APPLY_OBJECT ");
    initSizeCfg(LOADPARAMINFO,PARAM_DISCTAPPLYEROBJINFO_NUM,"DISCOUNT_APPLY_OBJECT数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PERCENT_DISCT ");
    initSizeCfg(LOADPARAMINFO,PARAM_PERCENTINFO_NUM,"PERCENT_DISCT数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM LIFE_CYCLE ");
    initSizeCfg(LOADPARAMINFO,PARAM_LIFECYCLEINFO_NUM,"LIFE_CYCLE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_STRATEGY_MEASURE ");
    initSizeCfg(LOADPARAMINFO,PARAM_MEASUREINFO_NUM,"B_STRATEGY_MEASURE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)*1.2 " 
           " FROM PRICING_COMBINE ");
    initSizeCfg(LOADPARAMINFO,PARAM_COMBINEINFO_NUM,"PRICING_COMBINE*1.2数目",sSqlCode);


    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRICING_COMBINE ");
    initSizeCfg(LOADPARAMINFO,PARAM_FILTERINFO_NUM,"PRICING_COMBINE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRICING_COMBINE ");
    initSizeCfg(LOADPARAMINFO,PARAM_CONDITIONPOINTINFO_NUM,"PRICING_COMBINE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_ACCU_COND_TIME_PERIOD ");
    initSizeCfg(LOADPARAMINFO,PARAM_TIMECONDINFO_NUM,"B_ACCU_COND_TIME_PERIOD数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)*2 " 
           " FROM B_ACCU_COND_EVENT_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_EVENTTYPECONDINFO_NUM,"B_ACCU_COND_EVENT_TYPE数目*2",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_CYCLE_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_CYCLETYPEINFO_NUM,"B_CYCLE_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM "
           "(SELECT A.ACCU_TYPE_ID, A.ACCU_LEVEL, " 
           " NVL(A.ACCU_SPLIT_REASON,''), A.ACCU_SPLIT_CYCLE, "
           " A.CYCLE_TYPE_ID, A.CONDITION_ID, "
           " B.CAL_TARGET, B.CAL_NUME, B.CAL_DENO, B.CAL_ORG_DURATION "
           " FROM B_ACCU_TYPE A, B_ACCU_CAL_RULE B "
           " WHERE A.CAL_RULE_ID=B.CAL_RULE_ID)");
    initSizeCfg(LOADPARAMINFO,PARAM_ACCTTYPEINFO_NUM,"B_ACCU_TYPE数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM OFFER_ACCUMULATOR_RELATION ");
    initSizeCfg(LOADPARAMINFO,PARAM_OFFERACCYRELATIONINFO_NUM,"OFFER_ACCUMULATOR_RELATION数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM OFFER_ACCUMULATOR_RELATION ");
           //" WHERE USE_PRICING_SECTION_COND<>1  ");
    initSizeCfg(LOADPARAMINFO,PARAM_OFFERACCTEXISTINFO_NUM,"OFFER_ACCUMULATOR_RELATION数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_SWITCH_INFO ");
    initSizeCfg(LOADPARAMINFO,PARAM_SWITCHINFO_NUM,"B_SWITCH_INFO数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_CYCLE_TYPE ");
    initSizeCfg(LOADPARAMINFO,PARAM_CYCLETYPEIDINFO_NUM,"B_CYCLE_TYPE数目",sSqlCode);
/*    
    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
                 " FROM B_CYCLE_TYPE ");
    initSizeCfg(LOADPARAMINFO,EVENT_AGGR_CYCLE_TYPE,"B_CYCLE_TYPE",sSqlCode);
    

   
    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
                 " FROM B_CYCLE_TYPE ");
    initSizeCfg(LOADPARAMINFO,EVENT_AGGR_CYCLE_DAYS,"B_CYCLE_TYPE",sSqlCode);
*/
	#ifdef WHOLE_DISCOUNT
    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_WHOLE_DISCOUNT ");
    initSizeCfg(LOADPARAMINFO,PARAM_WHOLEDISCOUNTINFO_NUM,"B_WHOLE_DISCOUNT数目",sSqlCode);
	#endif
    //王帅 20101229 取消所有非参数表的操作
	/*
    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "(SELECT A.INSTANCE_TYPE,INSTANCE_ID,"
           " NVL(INSTANCE_ORG_ID, 0),A.ACCT_ID,NVL(PAY_TYPE_ID, 'ALL'),"
           " NVL(ITEM_GROUP_ID, 0),NVL(VALUE, 0),"
           " NVL(CONDITION_ID, 0),TO_CHAR(A.EFF_DATE, 'YYYYMMDDHH24MISS'),"
           " TO_CHAR(A.EXP_DATE, 'YYYYMMDDHH24MISS'),"
           " NVL(B.SERV_ID, 0),NVL(A.PAY_SERV_ID, 0),"
           " NVL(A.PAY_ITEM_GROUP_ID, 0),NVL(A.PAY_MODE_ID, 0),"
           " NVL(A.PRODUCT_TYPE, 0),NVL(A.BILLING_MODE_ID, 0),"
           " NVL(A.REPLAY_PRIORITY, 0) AS REPLAY_PRIORITY,"
           " A.A_SERV_ACCT_ID "
           " FROM ACCT D, A_ACCT_DEPUTY B, A_SERV_ACCT_EX A "
           " WHERE A.ACCT_ID = B.ACCT_ID "
           " AND A.ACCT_ID = D.ACCT_ID)");
    initSizeCfg(IVPN_SEGMENT,IVPN_SERVACCT_NUM,"ACCT数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           "FROM A_ACCT_ATTR" );
    initSizeCfg(IVPN_SEGMENT,IVPN_ACCTATTR_NUM,"A_ACCT_ATTR数目",sSqlCode); 

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           "FROM TIF_VPN_GROUP" );
    initSizeCfg(VPNINFO_SEGMENT,VPNINFO_NUM_VPNINFO,"TIF_VPN_GROUP数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           "FROM TIF_VPN_MEM" );
    initSizeCfg(VPNINFO_SEGMENT,VPNINFO_NUM_VPNMEMBER,"TIF_VPN_MEM数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           "FROM TIF_VPN_MEM" );
    initSizeCfg(VPNINFO_SEGMENT,VPNINFO_NUM_VPNMEMBER999,"TIF_VPN_MEM数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           "FROM TIF_VPN_GROUP_FR" );
    initSizeCfg(VPNINFO_SEGMENT,VPNINFO_NUM_VPNANDVPN,"TIF_VPN_GROUP_FR数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           "FROM TIF_VPN_MEM_OTHER" );
    initSizeCfg(VPNINFO_SEGMENT,VPNINFO_NUM_VPNFRIENDNUM,"TIF_VPN_MEM_OTHER数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "Select Count(*)"
           " From Data_User"
           " Where (User_Id, User_Seq) In"
           " (Select User_Id, Max(User_Seq) From Data_User "
           "  Group By User_Id)" );
    initSizeCfg(USERINFO_SEGMENT,E8_USER_INFO_NUM,"Data_User数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*)"
           " FROM B_EXT_SERV" );
    initSizeCfg(USERINFO_SEGMENT,EXT_SERV_DATA_NUM,"B_EXT_SERV数目",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_PRODUCT ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVPRODUCT,"SERV_PRODUCT数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
#ifdef DEF_JIANGSU    
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_SERV_PRODUCT_ATTR_CHANGE ");
#else
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_PRODUCT_ATTR ");
#endif    
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVPRODUCTATTR,"B_SERV_PRODUCT_ATTR_CHANGE数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM A_SERV_TYPE_CHANGE ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_ASERVTYPECHANGE, "A_SERV_TYPE_CHANGE数目",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_LOCATION ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVLOCATION,"SERV_LOCATION数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM PRODUCT_OFFER_INSTANCE_ATTR ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_PRODOFFERINSATTR,"PRODUCT_OFFER_INSTANCE_ATTR", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM PRODUCT_OFFER_INSTANCE ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_PRODOFFERINS,"PRODUCT_OFFER_INSTANCE数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERV,"SERV", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_STATE_ATTR ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVSTATEATTR,"SERV_STATE_ATTR数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM"
           "(SELECT SERV_ID, ACC_NBR, "
           "EFF_DATE,"
           "NVL(EXP_DATE, TO_DATE('20500101', 'YYYYMMDD')) EXP_DATE, '50Z' ACC_NBR_TYPE "
           "FROM SERV_IDENTIFICATION "
           "UNION ALL "
           "SELECT SERV_ID, ACC_NBR, "
           "EFF_DATE, "
           "NVL(EXP_DATE, TO_DATE('20500101', 'YYYYMMDD')) EXP_DATE, ACC_NBR_TYPE "
           "FROM A_SERV_EX)");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVIDENT,"SERV_IDENTIFICATION+A_SERV_EX数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_ATTR ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVATTR,"SERV_ATTR数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM CUST ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_CUST,"CUST数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_ACCT ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_SERVACCT,"SERV_ACCT数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM ACCT ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_ACCT,"ACCT数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_EXT_SERV ");
    initSizeCfg(USERINFO_SEGMENT, EXT_SERV_INDEX_NUM,"B_EXT_SERV数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM SERV_IDENTIFICATION ");
    initSizeCfg(USERINFO_SEGMENT, SERV_IDEN_CENTER,"SERV_IDENTIFICATION数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM A_ACC_NBR_OFFER_TYPE ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_ACC_NBR_OFFER_TYPE,"A_ACC_NBR_OFFER_TYPE数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM A_GROUP_INFO ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_GROUPINFO,"A_GROUP_INFO数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM A_GROUP_MEMBER ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_GROUPMEMBER,"A_GROUP_MEMBER数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM A_NUMBER_GROUP_RELATION ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_NUMBERGROUP,"A_NUMBER_GROUP_RELATION数目", sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM A_IMSI_MDN_RELATION ");
    initSizeCfg(USERINFO_SEGMENT, USERINFO_NUM_IMSI_MDN,"A_IMSI_MDN_RELATION数目", sSqlCode);
	*/



    memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," SELECT COUNT(*)*30 FROM B_INST_TABLE_LIST_CFG ");
    initSizeCfg(LOADPARAMINFO, PARAM_INSTTABLELIST_INFO_NUM,"B_INST_TABLE_LIST_CFG数目",sSqlCode);

    memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," SELECT COUNT(*) FROM B_EVENT_TABLE_TYPE ");
    initSizeCfg(LOADPARAMINFO, PARAM_TABLETYPE_INFO_NUM,"B_EVENT_TABLE_TYPE数目",sSqlCode);

    memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," SELECT COUNT(*) FROM b_network_priority ");
    initSizeCfg(LOADPARAMINFO, PARAM_NETWORKPRIORITY_INFO_NUM,"B_NETWORK_PRIORITY数目",sSqlCode);

    memset(sSqlCode,0, 2048);
    strcpy(sSqlCode," select COUNT(*) from b_cycle_fee_event_type where state='10A' ");
    initSizeCfg(LOADPARAMINFO, PARAM_RENT_CONFIG_INFO_NUM,"B_CYCLE_FEE_EVENT_TYPE数目",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM B_TRUNK_TO_NBR ");
    initSizeCfg(LOADPARAMINFO, PARAM_TRUNKTOBENBR_NUM,"B_TRUNK_TO_NBR数目", sSqlCode);


    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM PRODUCT_OFFER ");
    initSizeCfg(LOADPARAMINFO, PARAM_OFFERCOMBINEINFO_NUM,"PRODUCT数目", sSqlCode);  

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " SELECT COUNT(*) FROM PRODUCT ");
    initSizeCfg(LOADPARAMINFO, PARAM_OFFERDISCTINFO_NUM, "PRODUCT数目",sSqlCode);  

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM PRODUCT ");
    initSizeCfg(LOADPARAMINFO,PARAM_PRODUCTCOMBINEINFO_NUM,"PRODUCT数目",sSqlCode); 

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) " 
           " FROM B_DUP_UNDOCHECK_SERV ");
    initSizeCfg(LOADPARAMINFO,PARAM_UNDOSERVDUP_INFO_NUM,"B_DUP_UNDOCHECK_SERV数目",sSqlCode); 

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "(SELECT  * FROM B_UNDOCHECK_PROCESS WHERE DUP_TYPE  IN "
           " (SELECT DUP_TYPE FROM B_DUP_TICKET_TYPE WHERE NEED_DO_OTHER IS NOT NULL "
           " AND NEED_DO_OTHER <>0) )");
    initSizeCfg(LOADPARAMINFO,PARAM_UNDOPROCESSSHOT_INFO_NUM,"B_UNDOCHECK_PROCESS数目",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "(SELECT  * FROM B_UNDOCHECK_PROCESS WHERE DUP_TYPE NOT IN "
           " (SELECT DUP_TYPE FROM B_DUP_TICKET_TYPE WHERE NEED_DO_OTHER IS NOT NULL "
           " AND NEED_DO_OTHER <>0 ) )");
    initSizeCfg(LOADPARAMINFO,PARAM_UNDOPROCESSDUP_INFO_NUM,"B_UNDOCHECK_PROCESS",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "( SELECT A.PROCESS_ID, C.DUP_TYPE FROM B_DUP_DATA_PATH A ,B_DUP_TYPE_RELATION B ,B_DUP_TICKET_TYPE C "
           "   WHERE  A.PROCESS_TYPE_ID=B.PROCESS_TYPE_ID  "
           "   AND B.DUP_TYPE=C.DUP_TYPE AND C.NEED_DO_OTHER=1)");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKSHOTTICKET_INFO_NUM,"排重目录信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           " (SELECT NVL(OFFER_ID,-1) OFFER_ID,NVL(PROD_BUNDLE_ID,-1) PROD_BUNDLE_ID, "
           "  NVL(PRODUCT_ID,-1) PRODUCT_ID ,NVL(EVENT_TYPE,-1) EVENT_TYPE,  "
           "  NVL(TRUNK_IN,'NULL') TRUNK_IN,NVL(TRUNK_OUT,'NULL') TRUNK_OUT, "
           " NVL(DUP_TYPE,-1) DUP_TYPE FROM B_DUP_UNDOCHECK_PRODUCT  "
           " ORDER BY OFFER_ID,PROD_BUNDLE_ID,PRODUCT_ID,EVENT_TYPE,DUP_TYPE )");
    initSizeCfg(LOADPARAMINFO,PARAM_UNDOPRODUCTDUP_INFO_NUM,"B_DUP_UNDOCHECK_PRODUCT",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           "( SELECT PROCESS_ID, DATA_PATH,IN_EVENT_TYPE,DUP_TYPE, "
           " OUT_EVENT_TYPE FROM B_DUP_DATA_PATH a ,  "
           " B_DUP_CHECK_CFG b WHERE a.PROCESS_TYPE_ID=b.PROCESS_TYPE_ID "
           " ORDER BY PROCESS_ID)");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKDUPCFG_INFO_NUM,"排重信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           " (SELECT DUP_TYPE, STEP_ID,NVL(DUP_FIELD_ID,-1) DUP_FIELD_ID ,CONDITION_TYPE, "
           " NVL(HIS_DUP_FIELD_ID,-1) HIS_DUP_FIELD_ID,NVL(CHILD_STEP_ID1,-1) CHILD_STEP_ID1, "
           "   NVL(CHILD_STEP_ID2,-1) CHILD_STEP_ID2 ,NVL(TIME_OFFSET,0) TIME_OFFSET  "
           "   FROM B_DUP_TYPE_RULE  "
           "  ORDER BY DUP_TYPE ASC,STEP_ID DESC )");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKDUPSTEP_INFO_NUM,"排重信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode, "SELECT COUNT(*) FROM " 
           " (select A.PROCESS_ID, C.DUP_TYPE from B_DUP_DATA_PATH A, B_DUP_TYPE_RELATION B , "
           "   B_DUP_TICKET_TYPE C WHERE A.PROCESS_TYPE_ID=B.PROCESS_TYPE_ID and B.DUP_TYPE =C.DUP_TYPE  "
           "   AND nvl(C.NEED_DO_OTHER,0)=0 ORDER BY A.PROCESS_ID ASC , PRIORITY_LEVEL DESC )");
    initSizeCfg(LOADPARAMINFO,PARAM_CHECKDUPTYPE_INFO_NUM,"排重信息",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode, " select COUNT(*) from product where nvl(gen_cyclefee,'Y') != 'N' ");
    initSizeCfg(LOADPARAMINFO, PARAM_PRODUCT_CONFIG_INFO_NUM,"PRODCTID数目", sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"SELECT count(*) from (select org_id FROM ORG order by org_level_id)");
    initSizeCfg(LOADPARAMINFO,PARAM_ORGPATH_INFO_NUM,"org路径信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select count(*) "
           " from b_local_event_type_rule a, org b, org c "
           "  where a.calling_org_id = b.org_id(+) and a.called_org_id = c.org_id(+) ");
    initSizeCfg(LOADPARAMINFO,PARAM_LOCALEVENTTYPERULE_INFO_NUM,"local事件求取规则",sSqlCode);

    //2010.11.17
    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select count(*) FROM B_FILE_POOL_CONFIG");
    initSizeCfg(LOADPARAMINFO, PARAM_FILEPOOLINFO_NUM,"文件池配置",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select count(*) FROM  B_FILE_POOL_TYPE_RELA t, B_FILE_POOL_CONFIG s "
           " where t.FILE_POOL_ID=s.FILE_POOL_ID");
    initSizeCfg(LOADPARAMINFO, PARAM_FILEPOOLCOND_NUM,"文件池条件配置",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select COUNT(*) from B_FILE_TYPE_CONFIG ");
    initSizeCfg(LOADPARAMINFO, PARAM_FILETYPECFG_NUM,"文件类型配置",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select COUNT(*) from B_FILE_TYPE_ATTR_MAP ");
    initSizeCfg(LOADPARAMINFO, PARAM_TLVENCODE_NUM,"TLV编码",sSqlCode);


    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select COUNT(*) from b_parser_attr_map ");
    initSizeCfg(LOADPARAMINFO, PARAM_TLVDECODE_NUM,"TLV解码",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select COUNT(*) from b_billing_node_define t where t.node_level=100  ");
    initSizeCfg(LOADPARAMINFO, PARAM_BILLINGNODE_NUM,"计费节点信息",sSqlCode);
        
        memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select COUNT(*) from b_process_file_type_rule ");
    initSizeCfg(LOADPARAMINFO, PARAM_FILEPARSERULE_NUM,"文件解析规则信息",sSqlCode);

    memset(sSqlCode,0,2048);
    strcpy(sSqlCode,"select COUNT(*) from B_FILE_POOL_TYPE_RELA ");
    initSizeCfg(LOADPARAMINFO, PARAM_SWITCHCODE_NUM,"交换机信息",sSqlCode);
    //2010.12.20
    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM b_sector_tariff ");
    initSizeCfg(LOADPARAMINFO, PARAM_ROAMTARIFF_NUM,"国际漫出资费信息",sSqlCode);
    
    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM b_carrier_sector ");
    initSizeCfg(LOADPARAMINFO, PARAM_ROAMCARRIER_NUM,"国际漫出运营商资费区信息",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM b_tariff_sector ");
    initSizeCfg(LOADPARAMINFO, PARAM_TARIFFSECTOR_NUM,"国际漫出资费区信息",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM b_country_info ");
    initSizeCfg(LOADPARAMINFO, PARAM_COUNTRY_NUM,"国家信息",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM b_sponsor_carrier_info");
    initSizeCfg(LOADPARAMINFO, PARAM_ROAMSPONSOR_NUM,"代理运营商信息",sSqlCode);

    memset(sSqlCode, 0, 2048);
    strcpy(sSqlCode,"SELECT COUNT(*) FROM b_special_tariff_group_member ");
    initSizeCfg(LOADPARAMINFO, PARAM_SPECIALGROUPMEMBER_NUM,"国际漫出特殊资费成员信息",sSqlCode);
        //prep
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_template_map_switch");
        initSizeCfg(LOADPARAMINFO,PARAM_TEMPLATEMAPSWITCH_NUM,"TEMPLATE_MAP_SWITCH根据模板ID找交换机映射关系",sSqlCode);
    
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_object_define");
        initSizeCfg(LOADPARAMINFO,PARAM_OBJECTDEFINE_NUM,"OBJECT_DEFINE",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group ");
        initSizeCfg(LOADPARAMINFO,PARAM_EVENTPARSERGROUP_NUM,"EVENT_PARSER_GROUP",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group a,b_template_map_switch b where a.map_id = b.map_id ");
        initSizeCfg(LOADPARAMINFO,PARAM_TEMPLATE_RELATION_SHM_NUM,"PARAM_TEMPLATE_RELATION_SHM_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select sum(cnt) from (select count(*) cnt from b_sep_field union all select count(*) cnt from b_order_fix_field union all select count(*) cnt from b_disorder_fix_field union all select count(*) cnt from b_disorder_asn_field union all select count(*) cnt from b_asn1_field union all select count(*) cnt from b_adsl_field)");
        initSizeCfg(LOADPARAMINFO,PARAM_FIELD_SHM_NUM,"PARAM_FIELD_SHM_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_template_map_switch");
        initSizeCfg(LOADPARAMINFO,PARAM_SWITCH_TYPE_INFO_NUM,"PARAM_SWITCH_TYPE_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from event_attr");
        initSizeCfg(LOADPARAMINFO,PARAM_EVENT_ATTR_INFO_NUM,"PARAM_EVENT_ATTR_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group");
        initSizeCfg(LOADPARAMINFO,PARAM_EVENTHEAD_COLUMUN_INFO_NUM,"PARAM_EVENTHEAD_COLUMUN_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_switch_info a ,b_template_map_switch b where a.switch_type_id = b.switch_type_id");
        initSizeCfg(LOADPARAMINFO,PARAM_SWITICHIDMAPSWITCHINFO_INFO_NUM,"PARAM_EVENTHEAD_COLUMUN_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from B_FIELD_CHECK");
        initSizeCfg(LOADPARAMINFO,PARAM_FIELD_CHECK_INFO_NUM,"PARAM_FIELD_CHECK_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from B_FIELD_VALUE_MAP");
        initSizeCfg(LOADPARAMINFO,PARAM_FIELD_MAP_INFO_NUM,"PARAM_FIELD_MAP_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from B_FIELD_MERGE");
        initSizeCfg(LOADPARAMINFO,PARAM_FIELD_MERGE_INFO_NUM,"PARAM_FIELD_MERGE_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_tap3file");
        initSizeCfg(LOADPARAMINFO,PARAM_TAP3_FILE_INFO_NUM,"PARAM_TAP3_FILE_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_tap3blockinfo");
        initSizeCfg(LOADPARAMINFO,PARAM_TAP3_BLOCK_INFO_NUM,"PARAM_TAP3_BLOCK_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_sepfile");
        initSizeCfg(LOADPARAMINFO,PARAM_SEP_FILE_INFO_NUM,"PARAM_SEP_FILE_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_sepblockinfo");
        initSizeCfg(LOADPARAMINFO,PARAM_SEP_BLOCK_INFO_NUM,"PARAM_SEP_BLOCK_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select sum(cnt) from ((SELECT count(*) cnt  FROM B_MERGE_MERGERULE A, B_MERGE_RULE_ATTR B, B_MERGE_EVENTSOURCE C, B_CALLTYPE D, (SELECT  RULE_ID,ROWNUM ROWNUM1 FROM (select DISTINCT(RULE_ID) FROM B_MERGE_MERGERULE ORDER BY RULE_ID)) E "
        " WHERE A.ATTR_ID = B.ATTR_ID AND A.EVENTSOURCE_ID = C.EVENTSOURCE_ID AND C.CALL_TYPE_ID = D.CALL_TYPE_ID AND A.RULE_ID = E.RULE_ID ) "
        " union all "
        " (SELECT count(*) cnt FROM B_MERGE_ASSOCIATERULE A, B_MERGE_RULE_ATTR B, B_MERGE_EVENTSOURCE C, B_CALLTYPE D ,(SELECT RULE_ID,ROWNUM ROWNUM1 FROM (select DISTINCT(RULE_ID) FROM B_MERGE_ASSOCIATERULE ORDER BY RULE_ID)) E "
        " WHERE A.ATTR_ID = B.ATTR_ID AND A.EVENTSOURCE_ID = C.EVENTSOURCE_ID AND C.CALL_TYPE_ID = D.CALL_TYPE_ID AND A.RULE_ID = E.RULE_ID))");
        initSizeCfg(LOADPARAMINFO,PARAM_MERGE_RULE_INFO_NUM,"PARAM_MERGE_RULE_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"SELECT count(*) FROM B_MERGE_RULEOUT_SET A, B_MERGE_RULEOUT_ATTR B WHERE A.ATTR_ID = B.ATTR_ID");
        initSizeCfg(LOADPARAMINFO,PARAM_MERGE_RULE_OUT_INFO_NUM,"PARAM_MERGE_RULE_OUT_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"SELECT count(*) FROM B_MERGE_RULEKEY_SET A, B_MERGE_RULEKEY_ATTR B WHERE A.ATTR_ID = B.ATTR_ID");
        initSizeCfg(LOADPARAMINFO,PARAM_MERGE_KEY_RULE_INFO_NUM,"PARAM_MERGE_KEY_RULE_INFO_NUM",sSqlCode);
        
        
        
        /*memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group union all (select count(*) from b_object_define where  object_type=6 )");
        initSizeCfg(LOADPARAMINFO,PARAM_SEP_INFO_NUM,"PARAM_SEP_INFO_NUM",sSqlCode);
        */
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group union all (select count(*) from b_object_define where  object_type=6 )");
        initSizeCfg(LOADPARAMINFO,PARAM_SEP_INFO_NUM,"PARAM_SEP_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group union all (select count(*) from b_object_define where  object_type=6 )");
        initSizeCfg(LOADPARAMINFO,PARAM_SEP_INFO_NUM,"PARAM_SEP_INFO_NUM",sSqlCode);
        
        memset(sSqlCode,0,2048);
        strcpy(sSqlCode,"select count(*) from b_map_parser_group union all (select count(*) from b_object_define where  object_type=6 )");
        initSizeCfg(LOADPARAMINFO,PARAM_SEP_INFO_NUM,"PARAM_SEP_INFO_NUM",sSqlCode);
        
}

void ShmParamInfo::initAllIpcKey()
{
	IpcKeyMgr::setIpcKey("M_SERVACCT_INFO_DATA_A","共享参数_MSERVACCT数据区A");
    IpcKeyMgr::setIpcKey("M_SERVACCT_INFO_INDEX_A","共享参数_MSERVACCT索引区A");
    IpcKeyMgr::setIpcKey("M_SERVACCT_INFO_DATA_B","共享参数_MSERVACCT数据区B");
    IpcKeyMgr::setIpcKey("M_SERVACCT_INFO_INDEX_B","共享参数_MSERVACCT索引区B");
    IpcKeyMgr::setIpcKey("LOGICSTATE_INFO_DATA_A","共享参数_逻辑条件数据区A");
    IpcKeyMgr::setIpcKey("LOGICSTATE_INFO_INDEX_A","共享参数_逻辑条件索引区A");
    IpcKeyMgr::setIpcKey("LOGICSTATE_INFO_DATA_B","共享参数_逻辑条件数据区B");
    IpcKeyMgr::setIpcKey("LOGICSTATE_INFO_INDEX_B","共享参数_逻辑条件索引区B");

    IpcKeyMgr::setIpcKey("ASSIGNSTATE_INFO_DATA_A","共享参数_逻辑运算数据区A");
    IpcKeyMgr::setIpcKey("ASSIGNSTATE_INFO_INDEX_A","共享参数_逻辑运算索引区A");
    IpcKeyMgr::setIpcKey("ASSIGNSTATE_INFO_DATA_B","共享参数_逻辑运算数据区B");
    IpcKeyMgr::setIpcKey("ASSIGNSTATE_INFO_INDEX_B","共享参数_逻辑运算索引区B");

    IpcKeyMgr::setIpcKey("FORMULA_INFO_DATA_A","共享参数_公式信息数据区A");
    IpcKeyMgr::setIpcKey("FORMULA_INFO_INDEX_A","共享参数_公式信息索引区A");
    IpcKeyMgr::setIpcKey("FORMULA_INFO_DATA_B","共享参数_公式信息数据区B");
    IpcKeyMgr::setIpcKey("FORMULA_INFO_INDEX_B","共享参数_公式信息索引区B");

    IpcKeyMgr::setIpcKey("FORMAT_GROUP_INFO_DATA_A","共享参数_规整组数据区A");
    IpcKeyMgr::setIpcKey("FORMAT_GROUP_INFO_DATA_B","共享参数_规整组数据区B");
    IpcKeyMgr::setIpcKey("FORMAT_STEP_INFO_DATA_A","共享参数_规整步骤数据区A");
    IpcKeyMgr::setIpcKey("FORMAT_STEP_INFO_DATA_B","共享参数_规整步骤数据区B");
    IpcKeyMgr::setIpcKey("FORMAT_RULE_INFO_DATA_A","共享参数_规整规则数据区A");
    IpcKeyMgr::setIpcKey("FORMAT_RULE_INFO_DATA_B","共享参数_规整规则数据区B");
    IpcKeyMgr::setIpcKey("FORMAT_COMB_INFO_DATA_A","共享参数_规整组与进程关系数据区A");
    IpcKeyMgr::setIpcKey("FORMAT_COMB_INFO_DATA_B","共享参数_规整组与进程关系数据区B");

    IpcKeyMgr::setIpcKey("TRUNK_INFO_DATA_A","共享参数_中继信息数据区A");
    IpcKeyMgr::setIpcKey("TRUNK_INFO_INDEX_A","共享参数_中继信息索引区A");
    IpcKeyMgr::setIpcKey("TRUNK_INFO_DATA_B","共享参数_中继信息数据区B");
    IpcKeyMgr::setIpcKey("TRUNK_INFO_INDEX_B","共享参数_中继信息索引区B");
    IpcKeyMgr::setIpcKey("HLR_INFO_DATA_A","共享参数_HLR信息数据区A");
    IpcKeyMgr::setIpcKey("HLR_INFO_DATA_B","共享参数_HLR信息数据区B");
	//补充数据
	IpcKeyMgr::setIpcKey("VISITAREACODERULE_INFO_DATA_A","共享参数_VISITAREACODERULE数据区A");
    IpcKeyMgr::setIpcKey("VISITAREACODERULE_INFO_INDEX_A","共享参数_VISITAREACODERULE索引区A");
    IpcKeyMgr::setIpcKey("VISITAREACODERULE_INFO_DATA_B","共享参数_VISITAREACODERULE数据区B");
    IpcKeyMgr::setIpcKey("VISITAREACODERULE_INFO_INDEX_B","共享参数_VISITAREACODERULE索引区B");
	
	IpcKeyMgr::setIpcKey("PNNOTBILLING_INFO_DATA_A","共享参数_PNNOTBILLING 数据区A");
    IpcKeyMgr::setIpcKey("PNNOTBILLING_INFO_INDEX_A","共享参数_PNNOTBILLING 索引区A");
    IpcKeyMgr::setIpcKey("PNNOTBILLING_INFO_DATA_B","共享参数_PNNOTBILLING 数据区B");
    IpcKeyMgr::setIpcKey("PNNOTBILLING_INFO_INDEX_B","共享参数_PNNOTBILLING 索引区B");
	
	IpcKeyMgr::setIpcKey("TRUNKTREENODE_INFO_DATA_A","共享参数_TRUNKTREENODE 数据区A");
    IpcKeyMgr::setIpcKey("TRUNKTREENODE_INFO_INDEX_A","共享参数_TRUNKTREENODE 索引区A");
    IpcKeyMgr::setIpcKey("TRUNKTREENODE_INFO_DATA_B","共享参数_TRUNKTREENODE 数据区B");
    IpcKeyMgr::setIpcKey("TRUNKTREENODE_INFO_INDEX_B","共享参数_TRUNKTREENODE 索引区B");
	
	IpcKeyMgr::setIpcKey("TSERVICEINFO2_INFO_DATA_A","共享参数_TSERVICEINFO2 数据区A");
    IpcKeyMgr::setIpcKey("TSERVICEINFO2_INFO_INDEX_A","共享参数_TSERVICEINFO2 索引区A");
    IpcKeyMgr::setIpcKey("TSERVICEINFO2_INFO_DATA_B","共享参数_TSERVICEINFO2 数据区B");
    IpcKeyMgr::setIpcKey("TSERVICEINFO2_INFO_INDEX_B","共享参数_TSERVICEINFO2 索引区B");
	
	IpcKeyMgr::setIpcKey("PNSEGBILLINGEX_INFO_DATA_A","共享参数_PNSEGBILLINGEX数据区A");
    IpcKeyMgr::setIpcKey("PNSEGBILLINGEX_INFO_DATA_B","共享参数_PNSEGBILLINGEX数据区B");
	//
	IpcKeyMgr::setIpcKey("PNSEGBILLING_INFO_DATA_A","共享参数_PNSEGBILLING数据区A");
    IpcKeyMgr::setIpcKey("PNSEGBILLING_INFO_DATA_B","共享参数_PNSEGBILLING数据区B");
	
	IpcKeyMgr::setIpcKey("EDGEROAMRULE_INFO_DATA_A","共享参数_EDGEROAMRULE 数据区A");
    IpcKeyMgr::setIpcKey("EDGEROAMRULE_INFO_INDEX_A","共享参数_EDGEROAMRULE 索引区A");
    IpcKeyMgr::setIpcKey("EDGEROAMRULE_INFO_DATA_B","共享参数_EDGEROAMRULE 数据区B");
    IpcKeyMgr::setIpcKey("EDGEROAMRULE_INFO_INDEX_B","共享参数_EDGEROAMRULE 索引区B");
	
	IpcKeyMgr::setIpcKey("SPEC_TRUNK_PRODUCT_INFO_INDEX_A","共享参数_TSERVICEINFO 索引区A");
	IpcKeyMgr::setIpcKey("SPEC_TRUNK_PRODUCT_INFO_INDEX_B","共享参数_TSERVICEINFO 索引区B");
	
	IpcKeyMgr::setIpcKey("SWITCHITEMTYPE_DATA_A","共享参数_SWITCHITEMTYPE 数据区A");
    IpcKeyMgr::setIpcKey("SWITCHITEMTYPE_INDEX_A","共享参数_SWITCHITEMTYPE 索引区A");
    IpcKeyMgr::setIpcKey("SWITCHITEMTYPE_DATA_B","共享参数_SWITCHITEMTYPE 数据区B");
    IpcKeyMgr::setIpcKey("SWITCHITEMTYPE_INDEX_B","共享参数_SWITCHITEMTYPE 索引区B");
	
	IpcKeyMgr::setIpcKey("STR_LOCALAREACODE_INFO_DATA_A","共享参数_STR_LOCALAREACODE 数据区B");
    IpcKeyMgr::setIpcKey("STR_LOCALAREACODE_INFO_DATA_B","共享参数_STR_LOCALAREACODE 索引区B");
	
	//
    IpcKeyMgr::setIpcKey("CITY_INFO_DATA_A","共享参数_城市信息数据区A");
    IpcKeyMgr::setIpcKey("CITY_INFO_INDEX_A","共享参数_城市信息索引区A");
    IpcKeyMgr::setIpcKey("CITY_AREA_INFO_INDEX_A","共享参数_城市信息区号索引区A");
    IpcKeyMgr::setIpcKey("CITY_INFO_DATA_B","共享参数_城市信息数据区B" );
    IpcKeyMgr::setIpcKey("CITY_INFO_INDEX_B","共享参数_城市信息索引区B");
    IpcKeyMgr::setIpcKey("CITY_AREA_INFO_INDEX_B","共享参数_城市信息区号索引区B");

    IpcKeyMgr::setIpcKey("ORG_INFO_DATA_A","共享参数_机构信息数据区A");
    IpcKeyMgr::setIpcKey("ORG_INFO_INDEX_A","共享参数_机构信息索引区A");
    IpcKeyMgr::setIpcKey("ORG_INFO_DATA_B","共享参数_机构信息数据区B");
    IpcKeyMgr::setIpcKey("ORG_INFO_INDEX_B","共享参数_机构信息索引区B");
    IpcKeyMgr::setIpcKey("ORGEX_INFO_DATA_A","共享参数_机构扩展信息数据区A");
    IpcKeyMgr::setIpcKey("ORGEX_INFO_INDEX_A","共享参数_机构扩展信息索引区A");
    IpcKeyMgr::setIpcKey("ORGEX_INFO_DATA_B","共享参数_机构扩展信息数据区B");
    IpcKeyMgr::setIpcKey("ORGEX_INFO_INDEX_B","共享参数_机构扩展信息索引区B");
    IpcKeyMgr::setIpcKey("ORGLONGTYPE_INFO_DATA_A","共享参数_长途类型数据区A");
    IpcKeyMgr::setIpcKey("ORGLONGTYPE_INFO_INDEX_A","共享参数_长途类型索引区A");
    IpcKeyMgr::setIpcKey("ORGLONGTYPE_INFO_DATA_B","共享参数_长途类型数据区B");
    IpcKeyMgr::setIpcKey("ORGLONGTYPE_INFO_INDEX_B","共享参数_长途类型索引区B");
    IpcKeyMgr::setIpcKey("HEADEX_INFO_DATA_A","共享参数_号头信息数据区A");
    IpcKeyMgr::setIpcKey("HEADEX_INFO_INDEX_A","共享参数_号头信息索引区A");
    IpcKeyMgr::setIpcKey("HEADEX_INFO_DATA_B","共享参数_号头信息数据区B");
    IpcKeyMgr::setIpcKey("HEADEX_INFO_INDEX_B","共享参数_号头信息索引区B");
    IpcKeyMgr::setIpcKey("LOCALHEAD_INFO_DATA_A","共享参数_本地号头信息数据区A");
    IpcKeyMgr::setIpcKey("LOCALHEAD_INFO_INDEX_A","共享参数_本地号头信息索引区A");
    IpcKeyMgr::setIpcKey("LOCALHEAD_INFO_DATA_B","共享参数_本地号头信息数据区B");
    IpcKeyMgr::setIpcKey("LOCALHEAD_INFO_INDEX_B","共享参数_本地号头信息索引区B");

    IpcKeyMgr::setIpcKey("EVENTTYPE_INFO_DATA_A","共享参数_事件类型数据区A");
    IpcKeyMgr::setIpcKey("EVENTTYPE_INFO_INDEX_A","共享参数_事件类型索引区A");
    IpcKeyMgr::setIpcKey("EVENTTYPE_INFO_DATA_B","共享参数_事件类型数据区B");
    IpcKeyMgr::setIpcKey("EVENTTYPE_INFO_INDEX_B","共享参数_事件类型索引区B");
    IpcKeyMgr::setIpcKey("EVENTTYPEGROUP_INFO_DATA_A","共享参数_事件类型组数据区A");
    IpcKeyMgr::setIpcKey("EVENTTYPEGROUP_INFO_INDEX_A","共享参数_事件类型组索引区A");
    IpcKeyMgr::setIpcKey("EVENTTYPEGROUP_INFO_DATA_B","共享参数_事件类型组数据区B");
    IpcKeyMgr::setIpcKey("EVENTTYPEGROUP_INFO_INDEX_B","共享参数_事件类型组索引区B");

    IpcKeyMgr::setIpcKey("OFFER_INFO_DATA_A","共享参数_商品信息数据区A");
    IpcKeyMgr::setIpcKey("OFFER_INFO_INDEX_A","共享参数_商品信息索引区A");
    IpcKeyMgr::setIpcKey("OFFER_INFO_DATA_B","共享参数_商品信息数据区B");
    IpcKeyMgr::setIpcKey("OFFER_INFO_INDEX_B","共享参数_商品信息索引区B");
    IpcKeyMgr::setIpcKey("OFFER_INFO_SPECATTR_INDEX_A","共享参数_商品信息指定属性索引区A");
    IpcKeyMgr::setIpcKey("OFFER_INFO_SPECATTR_INDEX_B","共享参数_商品信息指定属性索引区B");
    IpcKeyMgr::setIpcKey("OFFER_INFO_NUMATTR_INDEX_A","共享参数_商品运算对象属性索引区A");
    IpcKeyMgr::setIpcKey("OFFER_INFO_NUMATTR_INDEX_B","共享参数_商品运算对象属性索引区B");
    IpcKeyMgr::setIpcKey("OFFER_INFO_FREE_INDEX_A","共享参数_商品信息索引区A");
    IpcKeyMgr::setIpcKey("OFFER_INFO_FREE_INDEX_B","共享参数_商品信息数据区B");

    IpcKeyMgr::setIpcKey("NBR_MAP_INFO_DATA_A","共享参数_号码映射数据区A");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX1_INDEX_A","共享参数_号码映射索引区A_索引1");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX2_INDEX_A","共享参数_号码映射索引区A_索引2");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX4_INDEX_A","共享参数_号码映射索引区A_索引4");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX8_INDEX_A","共享参数_号码映射索引区A_索引8");
    IpcKeyMgr::setIpcKey("NBR_MAP_INFO_DATA_B","共享参数_号码映射数据区B");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX1_INDEX_B","共享参数_号码映射索引区B_索引1");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX2_INDEX_B","共享参数_号码映射索引区B_索引2");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX4_INDEX_B","共享参数_号码映射索引区B_索引4");
    IpcKeyMgr::setIpcKey("NBR_MAP_INDEX8_INDEX_B","共享参数_号码映射索引区B_索引8");

    IpcKeyMgr::setIpcKey("ACCTITEM_INFO_DATA_A","共享参数_账目类型数据区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_INFO_INDEX_A","共享参数_账目类型索引区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_INFO_DATA_B","共享参数_账目类型数据区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_INFO_INDEX_B","共享参数_账目类型索引区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUP_INFO_DATA_A","共享参数_账目组数据区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUP_INFO_INDEX_A","共享参数_账目组索引区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUP_INFO_DATA_B","共享参数_账目组数据区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUP_INFO_INDEX_B","共享参数_账目组索引区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUPB_INFO_DATA_A","共享参数_优惠账目组数据区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUPB_INFO_INDEX_A","共享参数_优惠账目组索引区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUPB_INFO_DATA_B","共享参数_优惠账目组数据区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_GROUPB_INFO_INDEX_B","共享参数_优惠账目组索引区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_BASICGROUPB_INFO_DATA_A","共享参数_基本账目组数据区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_BASICGROUPB_INFO_INDEX_A","共享参数_基本账目组索引区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_BASICGROUPB_INFO_DATA_B","共享参数_基本账目组数据区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_BASICGROUPB_INFO_INDEX_B","共享参数_基本账目组索引区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_DISCTGROUPB_INFO_DATA_A","共享参数_账目组数据区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_DISCTGROUPB_INFO_INDEX_A","共享参数_账目组索引区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_DISCTGROUPB_INFO_DATA_B","共享参数_账目组数据区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_DISCTGROUPB_INFO_INDEX_B","共享参数_账目组数据索引区B");
    IpcKeyMgr::setIpcKey("ACCTITEM_INCLUDEDISCT_INFO_INDEX_A","共享参数_账目组索引区A");
    IpcKeyMgr::setIpcKey("ACCTITEM_INCLUDEDISCT_INFO_INDEX_B","共享参数_账目组数据索引区B");

    IpcKeyMgr::setIpcKey("LONGEVENTTYPERULE_INFO_DATA_A","共享参数_长途类型规则数据区A");
    IpcKeyMgr::setIpcKey("LONGEVENTTYPERULE_INFO_DATA_B","共享参数_长途类型规则数据区B");
    IpcKeyMgr::setIpcKey("LONGEVENTTYPERULEEX_INFO_DATA_A","共享参数_长途类型规则数据区A");
    IpcKeyMgr::setIpcKey("LONGEVENTTYPERULEEX_INFO_DATA_B","共享参数_长途类型规则数据区B");

    IpcKeyMgr::setIpcKey("PRICINGPLANTYPE_INFO_INDEX_A","共享参数_定价计划类型索引区A");
    IpcKeyMgr::setIpcKey("PRICINGPLANTYPE_INFO_INDEX_B","共享参数_定价计划类型索引区A");

    IpcKeyMgr::setIpcKey("STATECONVERT_INFO_DATA_A","共享参数_状态转换信息数据区A");
    IpcKeyMgr::setIpcKey("STATECONVERT_INFO_INDEX_A","共享参数_状态转换索引区A");
    IpcKeyMgr::setIpcKey("STATECONVERT_INFO_DATA_B","共享参数_状态转换信息数据区B");
    IpcKeyMgr::setIpcKey("STATECONVERT_INFO_INDEX_B","共享参数_状态转换信息索引区B");

    IpcKeyMgr::setIpcKey("VALUEMAP_INFO_DATA_A","共享参数_数值映射数据区A");
    IpcKeyMgr::setIpcKey("VALUEMAP_INFO_INDEX_A","共享参数_数值映射索引区A");
    IpcKeyMgr::setIpcKey("VALUEMAP_INFO_DATA_B","共享参数_数值映射数据区B");
    IpcKeyMgr::setIpcKey("VALUEMAP_INFO_INDEX_B","共享参数_数值映射索引区B");

    IpcKeyMgr::setIpcKey("ZONE_ITEM_INFO_DATA_A","共享参数_区表数据区A");
    IpcKeyMgr::setIpcKey("ZONE_ITEM_INFO_INDEX_A","共享参数_区表索引区A");
    IpcKeyMgr::setIpcKey("ZONE_ITEM_INFO_DATA_B","共享参数_区表数据区B");
    IpcKeyMgr::setIpcKey("ZONE_ITEM_INFO_INDEX_B","共享参数_区表索引区B");
    IpcKeyMgr::setIpcKey("ZONE_ITEM_STR_INDEX_A","共享参数_区表STR索引区A");
    IpcKeyMgr::setIpcKey("ZONE_ITEM_STR_INDEX_B","共享参数_区表STR索引区B");

    IpcKeyMgr::setIpcKey("SPLITACCTITEMGROUP_DATA_A","共享参数_b_split_acct_item_group数据区A");
    IpcKeyMgr::setIpcKey("SPLITACCTITEMGROUP_INDEX_A","共享参数_b_split_acct_item_group索引区A");
    IpcKeyMgr::setIpcKey("SPLITACCTITEMGROUP_DATA_B","共享参数_b_split_acct_item_group数据区B");
    IpcKeyMgr::setIpcKey("SPLITACCTITEMGROUP_INDEX_B","共享参数_b_split_acct_item_group索引区B");
    IpcKeyMgr::setIpcKey("SPLITACCTGROUPEVENT_DATA_A","共享参数_b_split_acct_group2event_type数据区A");
    IpcKeyMgr::setIpcKey("SPLITACCTGROUPEVENT_INDEX_A","共享参数_b_split_acct_group2event_type索引区A");
    IpcKeyMgr::setIpcKey("SPLITACCTGROUPEVENT_DATA_B","共享参数_b_split_acct_group2event_type数据区B");
    IpcKeyMgr::setIpcKey("SPLITACCTGROUPEVENT_INDEX_B","共享参数_b_split_acct_group2event_type索引区B");

    IpcKeyMgr::setIpcKey("DISTANCETYPE_DATA_A","共享参数_区域类型数据区A");
    IpcKeyMgr::setIpcKey("DISTANCETYPE_INDEX_A","共享参数_区域类型索引区A");
    IpcKeyMgr::setIpcKey("DISTANCETYPE_DATA_B","共享参数_区域类型数据区B");
    IpcKeyMgr::setIpcKey("DISTANCETYPE_INDEX_B","共享参数_区域类型索引区B");

    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_DATA_A","共享参数_边界漫游规则数据区A");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_DATA_B","共享参数_边界漫游规则数据区B");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_TYPEA_INDEX_A","共享参数_边界漫游规则A索引区A");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_TYPEA_INDEX_B","共享参数_边界漫游规则A索引区B");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_TYPEB_INDEX_A","共享参数_边界漫游规则B索引区A");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_TYPEB_INDEX_B","共享参数_边界漫游规则B索引区B");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_MSC_INDEX_A","共享参数_边界MSC信息索引区A");
    IpcKeyMgr::setIpcKey("EDGEROAMRULEEX_MSC_INDEX_B","共享参数_边界MSC信息索引区B");

    IpcKeyMgr::setIpcKey("PRICINGSECTION_INFO_DATA_A","共享参数_定价段落数据区A");
    IpcKeyMgr::setIpcKey("PRICINGSECTION_INFO_INDEX_A","共享参数_定价段落索引区A");
    IpcKeyMgr::setIpcKey("PRICINGSECTION_INFO_DATA_B","共享参数_定价段落数据区B");
    IpcKeyMgr::setIpcKey("PRICINGSECTION_INFO_INDEX_B","共享参数_定价段落索引区B");
    IpcKeyMgr::setIpcKey("SECTIONSTRATEGY_INFO_INDEX_A","共享参数_定价段落索引区A");
    IpcKeyMgr::setIpcKey("SECTIONSTRATEGY_INFO_INDEX_B","共享参数_定价段落索引区B");
    IpcKeyMgr::setIpcKey("TARIFF_INFO_DATA_A","共享参数_资费信息数据区A");
    IpcKeyMgr::setIpcKey("TARIFF_INFO_INDEX_A","共享参数_资费信息索引区A");
    IpcKeyMgr::setIpcKey("TARIFF_INFO_DATA_B","共享参数_资费信息数据区B");
    IpcKeyMgr::setIpcKey("TARIFF_INFO_INDEX_B","共享参数_资费信息索引区B");

    IpcKeyMgr::setIpcKey("DISCOUNT_INFO_DATA_A","共享参数_优惠信息数据区A");
    IpcKeyMgr::setIpcKey("DISCOUNT_INFO_INDEX_A","共享参数_优惠信息索引区A");
    IpcKeyMgr::setIpcKey("DISCOUNT_INFO_DATA_B","共享参数_优惠信息数据区B");
    IpcKeyMgr::setIpcKey("DISCOUNT_INFO_INDEX_B","共享参数_优惠信息索引区B");

    IpcKeyMgr::setIpcKey("DISCTAPPLYER_INFO_DATA_A","共享参数_");
    IpcKeyMgr::setIpcKey("DISCTAPPLYER_INFO_INDEX_A","共享参数_");
    IpcKeyMgr::setIpcKey("DISCTAPPLYER_INFO_DATA_B","共享参数_");
    IpcKeyMgr::setIpcKey("DISCTAPPLYER_INFO_INDEX_B","共享参数_");

    IpcKeyMgr::setIpcKey("DISCTAPPLYEROBJ_INFO_DATA_A","共享参数_");
    IpcKeyMgr::setIpcKey("DISCTAPPLYEROBJ_INFO_INDEX_A","共享参数_");
    IpcKeyMgr::setIpcKey("DISCTAPPLYEROBJ_INFO_DATA_B","共享参数_");
    IpcKeyMgr::setIpcKey("DISCTAPPLYEROBJ_INFO_INDEX_B","共享参数_");

    IpcKeyMgr::setIpcKey("PERCENT_INFO_DATA_A","共享参数_折扣信息数据区A");
    IpcKeyMgr::setIpcKey("PERCENT_INFO_INDEX_A","共享参数_折扣信息索引区A");
    IpcKeyMgr::setIpcKey("PERCENT_INFO_DATA_B","共享参数_折扣信息数据区B");
    IpcKeyMgr::setIpcKey("PERCENT_INFO_INDEX_B","共享参数_折扣信息索引区B");
    IpcKeyMgr::setIpcKey("LIFECYCLE_INFO_DATA_A","共享参数_生命周期信息数据区A");
    IpcKeyMgr::setIpcKey("LIFECYCLE_INFO_INDEX_A","共享参数_生命周期信息索引区A");
    IpcKeyMgr::setIpcKey("LIFECYCLE_INFO_DATA_B","共享参数_生命周期信息数据区B");
    IpcKeyMgr::setIpcKey("LIFECYCLE_INFO_INDEX_B","共享参数_生命周期信息索引区B");

    IpcKeyMgr::setIpcKey("MEASURE_INFO_DATA_A","共享参数_度量数据信息区A");
    IpcKeyMgr::setIpcKey("MEASURE_INFO_INDEX_A","共享参数_度量数据索引区A");
    IpcKeyMgr::setIpcKey("MEASURE_INFO_DATA_B","共享参数_度量数据索引区B");
    IpcKeyMgr::setIpcKey("MEASURE_INFO_INDEX_B","共享参数_度量数据索引区A");
    IpcKeyMgr::setIpcKey("STRATEGYMEASURE_INFO_INDEX_A","共享参数_资费单位索引区A");
    IpcKeyMgr::setIpcKey("STRATEGYMEASURE_INFO_INDEX_B","共享参数_资费单位索引区B");

    IpcKeyMgr::setIpcKey("COMBINE_INFO_DATA_A","共享参数_定价组合数据区A");
    IpcKeyMgr::setIpcKey("COMBINE_INFO_INDEX_A","共享参数_定价组合索引区A");    
    IpcKeyMgr::setIpcKey("PLAN_COMBINE_INFO_INDEX_A","共享参数_定价计划及组合索引区A");
    IpcKeyMgr::setIpcKey("STRATEGY_COMBINE_INFO_INDEX_A","共享参数_策略及定价组合索引区A");

    IpcKeyMgr::setIpcKey("COMBINE_INFO_DATA_B","共享参数_组合信息数据区B");
    IpcKeyMgr::setIpcKey("COMBINE_INFO_INDEX_B","共享参数_组合信息索引区B");
    IpcKeyMgr::setIpcKey("PLAN_COMBINE_INFO_INDEX_B","共享参数_定价计划及组合索引区B");
    IpcKeyMgr::setIpcKey("STRATEGY_COMBINE_INFO_INDEX_B","共享参数_定价策略及组合索引区B");

    IpcKeyMgr::setIpcKey("FILTERCOND_INFO_DATA_A","共享参数_文件记录数据区A");
    IpcKeyMgr::setIpcKey("FILTERCOND_INFO_INDEX_A","共享参数_文件记录索引区A");
    IpcKeyMgr::setIpcKey("FILTERCOND_INFO_DATA_B","共享参数_文件记录数据区B");
    IpcKeyMgr::setIpcKey("FILTERCOND_INFO_INDEX_B","共享参数_文件记录索引区B");

    IpcKeyMgr::setIpcKey("CONDITIONPOINT_INFO_DATA_A","共享参数_条件信息数据区A");
    IpcKeyMgr::setIpcKey("CONDITIONPOINT_INFO_DATA_B","共享参数_条件信息数据区B");

    IpcKeyMgr::setIpcKey("USAGETYPE_INFO_DATA_A","共享参数_使用类型信息数据区A");
    IpcKeyMgr::setIpcKey("USAGETYPE_INFO_INDEX_A","共享参数_使用类型信息索引区A");
    IpcKeyMgr::setIpcKey("USAGETYPE_INFO_DATA_B","共享参数_使用类型信息数据区B");
    IpcKeyMgr::setIpcKey("USAGETYPE_INFO_INDEX_B","共享参数_使用类型信息索引区B");

    IpcKeyMgr::setIpcKey("ACCTTYPECFG_TIMECOND_INFO_DATA_A","共享参数_");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_TIMECOND_INFO_INDEX_A","共享参数_");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_TIMECOND_INFO_DATA_B","共享参数_");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_TIMECOND_INFO_INDEX_B","共享参数_");

    IpcKeyMgr::setIpcKey("ACCTTYPECFG_EVENTTYPECOND_INFO_DATA_A","共享参数_累积量事件类型数据区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_EVENTTYPECOND_INFO_INDEX_A","共享参数_累积量事件类型索引区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_EVENTTYPECOND_INFO_DATA_B","共享参数_累积量事件类型数据区B");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_EVENTTYPECOND_INFO_INDEX_B","共享参数_累计量事件类型索引区B");

    IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPE_INFO_DATA_A","共享参数_累积量周期类型数据区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPE_INFO_INDEX_A","共享参数_累积量周期类型索引区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPE_INFO_DATA_B","共享参数_累积量周期类型数据区B");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPE_INFO_INDEX_B","共享参数_累积量周期类型索引区B");

    IpcKeyMgr::setIpcKey("ACCTTYPECFG_ACCTTYPE_INFO_DATA_A","共享参数_累积量账目数据区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_ACCTTYPE_INFO_INDEX_A","共享参数_累积量账目索引区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_ACCTTYPE_INFO_DATA_B","共享参数_累积量账目数据区B");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_ACCTTYPE_INFO_INDEX_B","共享参数_累积量账目索引区B");

    IpcKeyMgr::setIpcKey("ACCTTYPECFG_OFFERACCTRELATION_INFO_DATA_A","共享参数_累积量账目关系数据区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_OFFERACCTRELATION_INFO_INDEX_A","共享参数_累积量账目关系索引区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_OFFERACCTRELATION_INFO_DATA_B","共享参数_累积量账目关系数据区B");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_OFFERACCTRELATION_INFO_INDEX_B","共享参数_累积量账目关系索引区B");

    IpcKeyMgr::setIpcKey("ACCTTYPECFG_OFFERACCTEXIST_INFO_INDEX_A","共享参数_累积量账目关系索引区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_OFFERACCTEXIST_INFO_INDEX_B","共享参数_累积量账目关系索引区B");

    IpcKeyMgr::setIpcKey("OFFERCOMBINE_INFO_INDEX_A","共享参数_商品组合索引区A");
    IpcKeyMgr::setIpcKey("OFFERCOMBINE_INFO_INDEX_B","共享参数_商品组合索引区B");

    IpcKeyMgr::setIpcKey("OFFERDISCT_INFO_INDEX_A","共享参数_商品信息索引区A");
    IpcKeyMgr::setIpcKey("OFFERDISCT_INFO_INDEX_B","共享参数_商品信息索引区B");

    IpcKeyMgr::setIpcKey("PRODUCTCOMBINE_INFO_INDEX_A","共享参数_产品信息索引区A");
    IpcKeyMgr::setIpcKey("PRODUCTCOMBINE_INFO_INDEX_B","共享参数_产品信息索引区B");

    IpcKeyMgr::setIpcKey("SPLITCFG_INFO_DATA_A","共享参数_离散数据信息数据区A");
    IpcKeyMgr::setIpcKey("SPLITCFG_INFO_INDEX_A","共享参数_离散数据信息索引区A");
    IpcKeyMgr::setIpcKey("SPLITCFG_INFO_DATA_B","共享参数_离散数据信息数据区B");
    IpcKeyMgr::setIpcKey("SPLITCFG_INFO_INDEX_B","共享参数_离散数据信息索引区B");

    IpcKeyMgr::setIpcKey("VIRTUAL_STRATEGY_COMBINE_INFO_DATA_A","共享参数_定价策略信息数据区A");
    IpcKeyMgr::setIpcKey("VIRTUAL_STRATEGY_COMBINE_INFO_INDEX_A","共享参数_定价策略信息索引区A");
    IpcKeyMgr::setIpcKey("VIRTUAL_STRATEGY_COMBINE_INFO_DATA_B","共享参数_定价策略信息数据区B");
    IpcKeyMgr::setIpcKey("VIRTUAL_STRATEGY_COMBINE_INFO_INDEX_B","共享参数_定价策略信息索引区B");

    IpcKeyMgr::setIpcKey("COMBINERELATION_INFO_DATA_A","共享参数_定价组合关系数据区A");
    IpcKeyMgr::setIpcKey("COMBINERELATION_INFO_INDEX_A","共享参数_定价组合关系索引区A");
    IpcKeyMgr::setIpcKey("COMBINERELATION_INFO_DATA_B","共享参数_定价组合关系数据区B");
    IpcKeyMgr::setIpcKey("COMBINERELATION_INFO_INDEX_B","共享参数_定价组合关系索引区B");

    IpcKeyMgr::setIpcKey("SPECIALNBRSTRATEGY_INFO_DATA_A","共享参数_特殊号码定价策略数据区A");
    IpcKeyMgr::setIpcKey("SPECIALNBRSTRATEGY_INFO_INDEX_A","共享参数_特殊号码定价策略索引区A");
    IpcKeyMgr::setIpcKey("SPECIALNBROFFER_INFO_INDEX_A","共享参数_特殊商品定价策略索引区A");    
    IpcKeyMgr::setIpcKey("SPECIALNBRSTRATEGY_INFO_DATA_B","共享参数_特殊号码定价策略数据区B");
    IpcKeyMgr::setIpcKey("SPECIALNBRSTRATEGY_INFO_INDEX_B","共享参数_特殊号码定价策略索引区B");
    IpcKeyMgr::setIpcKey("SPECIALNBROFFER_INFO_INDEX_B","共享参数_特殊商品定价策略索引区B");

    IpcKeyMgr::setIpcKey("HOSTINFO_INFO_DATA_A","共享参数_主机信息数据区A");
    IpcKeyMgr::setIpcKey("HOSTINFO_INFO_INDEX_A","共享参数_主机信息索引区A");
    IpcKeyMgr::setIpcKey("HOSTINFO_INFO_DATA_B","共享参数_主机信息数据区B");
    IpcKeyMgr::setIpcKey("HOSTINFO_INFO_INDEX_B","共享参数_主机信息索引区B");



    IpcKeyMgr::setIpcKey("GATHERTESK_INFO_DATA_A","共享参数_采集信息数据区A");
    IpcKeyMgr::setIpcKey("GATHERTESK_INFO_INDEX_A","共享参数_采集信息索引区A");
    IpcKeyMgr::setIpcKey("ORGGATHERTESK_INFO_INDEX_A","共享参数_采集信息及机构对应关系索引区A");        
    IpcKeyMgr::setIpcKey("GATHERTESK_INFO_DATA_B","共享参数_采集信息数据区B");
    IpcKeyMgr::setIpcKey("GATHERTESK_INFO_INDEX_B","共享参数_采集信息索引区B");
    IpcKeyMgr::setIpcKey("ORGGATHERTESK_INFO_INDEX_B","共享参数_采集信息及机构对应关系索引区B");

    IpcKeyMgr::setIpcKey("PRODUCTID_INFO_INDEX_A","共享参数_产品信息索引区A");
    IpcKeyMgr::setIpcKey("PRODUCTID_INFO_INDEX_B","共享参数_产品信息索引区B");
    IpcKeyMgr::setIpcKey("PRODUCTACCTITEMS_INFO_INDEX_A","共享参数_产品与账目索引区A");
    IpcKeyMgr::setIpcKey("PRODUCTACCTITEMS_INFO_INDEX_B","共享参数_产品与账目索引区B");

    IpcKeyMgr::setIpcKey("SPECIALTRIFF_INFO_DATA_A","共享参数_特殊资费数据区A");
    IpcKeyMgr::setIpcKey("SPECIALTRIFF_INFO_INDEX_A","共享参数_特殊资费索引区A");
    IpcKeyMgr::setIpcKey("SPECIALTRIFF_INFO_DATA_B","共享参数_特殊资费数据区B");
    IpcKeyMgr::setIpcKey("SPECIALTRIFF_INFO_INDEX_B","共享参数_特殊资费索引区B");

    IpcKeyMgr::setIpcKey("SPECIALTRIFFCHECK_INFO_DATA_A","共享参数_特殊资费数据区A");
    IpcKeyMgr::setIpcKey("SPECIALTRIFFCHECK_INFO_INDEX_A","共享参数_特殊资费索引区A");
    IpcKeyMgr::setIpcKey("SPECIALTRIFFCHECK_INFO_DATA_B","共享参数_特殊资费数据区B");
    IpcKeyMgr::setIpcKey("SPECIALTRIFFCHECK_INFO_INDEX_B","共享参数_特殊资费索引区B");

    IpcKeyMgr::setIpcKey("SPINFODATA_INFO_DATA_A","共享参数_增值业务信息数据区A");
    IpcKeyMgr::setIpcKey("SPINFODATA_INFO_INDEX_A","共享参数_增值业务信息索引区A");
    IpcKeyMgr::setIpcKey("SPINFODATA_INFO_DATA_B","共享参数_增值业务信息数据区B");
    IpcKeyMgr::setIpcKey("SPINFODATA_INFO_INDEX_B","共享参数_增值业务信息索引区B");

    IpcKeyMgr::setIpcKey("GATHERTASKLISTINFO_INFO_DATA_A","共享参数_采集信息数据区A");
    IpcKeyMgr::setIpcKey("GATHERTASKLISTINFO_INFO_INDEX_A","共享参数_采集信息索引区A");
    IpcKeyMgr::setIpcKey("GATHERTASKLISTINFO_INFO_DATA_B","共享参数_采集信息数据区B");
    IpcKeyMgr::setIpcKey("GATHERTASKLISTINFO_INFO_INDEX_B","共享参数_采集信息索引区B");

    IpcKeyMgr::setIpcKey("SEGMENTINFO_INFO_DATA_A","共享参数_段信息数据区A");
    IpcKeyMgr::setIpcKey("SEGMENTINFO_INFO_INDEX_A","共享参数_段信息索引区A");
    IpcKeyMgr::setIpcKey("SEGMENTTYPEINFO_INFO_INDEX_A","共享参数_段类型信息索引区A");
    IpcKeyMgr::setIpcKey("SEGMENTINFO_INFO_DATA_B","共享参数_段信息数据区B");
    IpcKeyMgr::setIpcKey("SEGMENTINFO_INFO_INDEX_B","共享参数_段信息索引区B");
    IpcKeyMgr::setIpcKey("SEGMENTTYPEINFO_INFO_INDEX_B","共享参数_段类型信息索引区B");

    IpcKeyMgr::setIpcKey("LONGTYPE_INFO_INDEX_A","共享参数_长途信息索引区A");
    IpcKeyMgr::setIpcKey("LONGTYPE_INFO_INDEX_B","共享参数_长途信息索引区B");

    IpcKeyMgr::setIpcKey("CHECKRULE_RULE_INFO_DATA_A","共享参数_校验规则信息数据区A");
    IpcKeyMgr::setIpcKey("CHECKRULE_RULE_INFO_INDEX_A","共享参数_校验规则信息索引区A");
    IpcKeyMgr::setIpcKey("CHECKRULE_RULE_INFO_DATA_B","共享参数_校验规则信息数据区B");
    IpcKeyMgr::setIpcKey("CHECKRULE_RULE_INFO_INDEX_B","共享参数_校验规则信息索引区B");

    IpcKeyMgr::setIpcKey("CHECKRULE_SUBRULE_INFO_DATA_A","共享参数_校验子规则信息数据区A");
    IpcKeyMgr::setIpcKey("CHECKRULE_SUBRULE_INFO_INDEX_A","共享参数_校验子规则信息索引区A");
    IpcKeyMgr::setIpcKey("CHECKRULE_SUBRULE_INFO_DATA_B","共享参数_校验子规则信息数据区B");
    IpcKeyMgr::setIpcKey("CHECKRULE_SUBRULE_INFO_INDEX_B","共享参数_校验子规则信息索引区B");

    IpcKeyMgr::setIpcKey("CHECKARGUMENT_INFO_DATA_A","共享参数_校验参数信息数据区A");
    IpcKeyMgr::setIpcKey("CHECKARGUMENT_INFO_DATA_B","共享参数_校验参数信息数据区B");

    IpcKeyMgr::setIpcKey("CHECKRELATION_INFO_DATA_A","共享参数_校验关系信息数据区A");
    IpcKeyMgr::setIpcKey("CHECKRELATION_INFO_DATA_B","共享参数_校验关系信息数据区B");

    IpcKeyMgr::setIpcKey("TRANSFILETYPE_INFO_DATA_A","共享参数_上传类型信息数据区A");
    IpcKeyMgr::setIpcKey("TRANSFILETYPE_INFO_INDEX_A","共享参数_上传类型信息索引区A");
    IpcKeyMgr::setIpcKey("TRANSFILETYPE_INFO_DATA_B","共享参数_上传类型信息数据区B");
    IpcKeyMgr::setIpcKey("TRANSFILETYPE_INFO_INDEX_B","共享参数_上传类型信息索引区B");

    IpcKeyMgr::setIpcKey("PARSERULE_INFO_DATA_A","共享参数_解析规则数据区A");
    IpcKeyMgr::setIpcKey("PARSERULE_INFO_INDEX_A","共享参数_解析规则索引区A");
    IpcKeyMgr::setIpcKey("PARSERULE_INFO_DATA_B","共享参数_解析规则数据区B");
    IpcKeyMgr::setIpcKey("PARSERULE_INFO_INDEX_B","共享参数_解析规则索引区B");
    IpcKeyMgr::setIpcKey("PARSECOMB_INFO_DATA_A","共享参数_解析规则数据区A");
    IpcKeyMgr::setIpcKey("PARSECOMB_INFO_DATA_B","共享参数_解析规则数据区B");
    IpcKeyMgr::setIpcKey("PARSECOMB_INFO_INDEX_A","共享参数_解析规则索引区A");
    IpcKeyMgr::setIpcKey("PARSECOMB_INFO_INDEX_B","共享参数_解析规则索引区B");
    IpcKeyMgr::setIpcKey("INSTTABLELIST_INFO_DATA_A","共享参数_入库信息数据区A");
    IpcKeyMgr::setIpcKey("INSTTABLELIST_INFO_DATA_B","共享参数_入库信息数据区B");
    IpcKeyMgr::setIpcKey("INSTTABLELIST_INFO_INDEX_A","共享参数_入库信息索引区A");
    IpcKeyMgr::setIpcKey("INSTTABLELIST_INFO_INDEX_B","共享参数_入库信息索引区B");
    IpcKeyMgr::setIpcKey("TABLETYPE_INFO_DATA_A","共享参数_表类型数据区A");
    IpcKeyMgr::setIpcKey("TABLETYPE_INFO_DATA_B","共享参数_表类型数据区B");
    IpcKeyMgr::setIpcKey("TABLETYPE_INFO_INDEX_A","共享参数_表类型索引区A");
    IpcKeyMgr::setIpcKey("TABLETYPE_INFO_INDEX_B","共享参数_表类型索引区B");

    IpcKeyMgr::setIpcKey("NETWORKPRIORITY_INFO_DATA_A","共享参数_网络类型数据区A");
    IpcKeyMgr::setIpcKey("NETWORKPRIORITY_INFO_DATA_B","共享参数_网络类型数据区B");
    IpcKeyMgr::setIpcKey("NETWORKPRIORITY_INFO_INDEX_A","共享参数_网络类型索引区A");
    IpcKeyMgr::setIpcKey("NETWORKPRIORITY_INFO_INDEX_B","共享参数_网络类型索引区B");

    IpcKeyMgr::setIpcKey("RENT_CONFIG_INFO_INDEX_A","共享参数_周期性费用事件索引区A");
    IpcKeyMgr::setIpcKey("RENT_CONFIG_INFO_INDEX_B","共享参数_周期性费用事件索引区B");

    IpcKeyMgr::setIpcKey("TRUNKTOBENBR_INFO_DATA_A","共享参数_中级信息数据区A");
    IpcKeyMgr::setIpcKey("TRUNKTOBENBR_INFO_INDEX_A","共享参数_中级信息索引区A");
    IpcKeyMgr::setIpcKey("TRUNKTOBENBR_INFO_DATA_B","共享参数_中级信息数据区B");
    IpcKeyMgr::setIpcKey("TRUNKTOBENBR_INFO_INDEX_B","共享参数_中级信息索引区B");


    #ifdef EVENT_AGGR_RECYCLE_USE
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPEID_INFO_INDEX_A","共享参数_账期类型信息索引区A");
    IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPEID_INFO_INDEX_B","共享参数_账期类型信息索引区B");
	IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPEID_INFO_DATA_A","共享参数_账期类型信息数据区A");
	IpcKeyMgr::setIpcKey("ACCTTYPECFG_CYCLETYPEID_INFO_DATA_B","共享参数_账期类型信息数据区B");
    #endif


    #ifdef WHOLE_DISCOUNT
    IpcKeyMgr::setIpcKey("WHOLEDISCOUNT_INFO_DATA_A","共享参数_折扣信息数据区A");
    IpcKeyMgr::setIpcKey("WHOLEDISCOUNT_INFO_DATA_B","共享参数_折扣信息数据区B");
    #endif

    #ifdef GROUP_CONTROL
    IpcKeyMgr::setIpcKey("CGCOMBINE_INFO_DATA_A","共享参数_CG组合参数信息数据区A");
    IpcKeyMgr::setIpcKey("CGCOMBINE_INFO_INDEX_A","共享参数_CG组合参数信息索引区A");
    IpcKeyMgr::setIpcKey("CGCOMBINE_INFO_DATA_B","共享参数_CG组合参数信息数据区B");
    IpcKeyMgr::setIpcKey("CGCOMBINE_INFO_INDEX_B","共享参数_CG组合参数信息索引区B");   
    #endif


    IpcKeyMgr::setIpcKey("AREACODE_INFO_DATA_A","共享参数_区号信息数据区A");
    IpcKeyMgr::setIpcKey("AREACODE_INFO_DATA_B","共享参数_区号信息数据区B");
    IpcKeyMgr::setIpcKey("CHECKDUPCFG_INFO_DATA_A","共享参数_排重信息数据区A");
    IpcKeyMgr::setIpcKey("CHECKDUPCFG_INFO_DATA_B","共享参数_排重信息数据区B");
    IpcKeyMgr::setIpcKey("CHECKDUPCFG_INFO_INDEX_A","共享参数_排重信息索引区A");
    IpcKeyMgr::setIpcKey("CHECKDUPCFG_INFO_INDEX_B","共享参数_排重信息索引区B");
    IpcKeyMgr::setIpcKey("CHECKDUPSTEP_INFO_DATA_A","共享参数_排重步骤数据区A");
    IpcKeyMgr::setIpcKey("CHECKDUPSTEP_INFO_DATA_B","共享参数_排重步骤数据区B");
    IpcKeyMgr::setIpcKey("CHECKDUPSTEP_INFO_INDEX_A","共享参数_排重步骤索引区A");
    IpcKeyMgr::setIpcKey("CHECKDUPSTEP_INFO_INDEX_B","共享参数_排重步骤索引区B");
    IpcKeyMgr::setIpcKey("CHECKDUPTYPE_INFO_DATA_A","共享参数_排重类型数据区A");
    IpcKeyMgr::setIpcKey("CHECKDUPTYPE_INFO_DATA_B","共享参数_排重类型数据区B");
    IpcKeyMgr::setIpcKey("CHECKDUPTYPE_INFO_INDEX_A","共享参数_排重类型索引区A");
    IpcKeyMgr::setIpcKey("CHECKDUPTYPE_INFO_INDEX_B","共享参数_排重类型索引区B");
    IpcKeyMgr::setIpcKey("CHECKSHOTTICKET_INFO_DATA_A","共享参数_排重类型数据区A");
    IpcKeyMgr::setIpcKey("CHECKSHOTTICKET_INFO_DATA_B","共享参数_排重类型数据区B");
    IpcKeyMgr::setIpcKey("CHECKSHOTTICKET_INFO_INDEX_A","共享参数_排重类型索引区A");
    IpcKeyMgr::setIpcKey("CHECKSHOTTICKET_INFO_INDEX_B","共享参数_排重类型索引区B");
    IpcKeyMgr::setIpcKey("LOCK_PARAMDATA_STATE","共享参数_参数锁信息");

	//王帅 20101229 取消所有非参数表的操作
    //IpcKeyMgr::setIpcKey("LOCK_ServState","客户资料_用户状态同步变更锁");
    //IpcKeyMgr::setIpcKey("SEM_AGGRDETAILLOCK","累积数据_实时账目优惠数据明细记录锁");
    //IpcKeyMgr::setIpcKey("SEM_AGGRINDEXLOCK","累积数据_实时账目优惠数据索引锁");
    //IpcKeyMgr::setIpcKey("SEM_AGGRLOCK","累积数据_实时账目优惠数据累计锁");
    //IpcKeyMgr::setIpcKey("SEM_AcctItemData","累积数据_总量账单数据锁");
    //IpcKeyMgr::setIpcKey("SEM_BT_LOCK","累积数据_BT实时优惠访问锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_AcctItemData","缓存_总帐数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_AddressData","缓存_地址数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_DisctAggrData","缓存_优惠汇总数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_DisctDetailData","缓存_优惠明细数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_EventAggrData","缓存_事件累积量数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_EventCacheData","缓存_事件数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_EventPriceData","缓存_事件轨迹数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_EventWaitIndex","缓存_等待事件索引区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_GetData","缓存_数据抽取_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_Index","缓存_索引区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_MiddleData","缓存_中间数据区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_MiddleIndex","缓存_中间索引区_锁");
    //IpcKeyMgr::setIpcKey("SEM_CACHE_MiddleInfoData","缓存_中间信息区_锁");
    //IpcKeyMgr::setIpcKey("SEM_Global_Lock","锁_系统锁");
    //IpcKeyMgr::setIpcKey("SEM_LockApplication","流程调度_应用进程数据写锁");
    //IpcKeyMgr::setIpcKey("SEM_LockCLient","流程调度_远程连接数据写锁");
    //IpcKeyMgr::setIpcKey("SEM_LockWorkflow","流程调度_流程调度共享内存写锁");
    //IpcKeyMgr::setIpcKey("SHM_ACCNBROFFERTYPE_DATA","客户资料_a_acc_nbr_offer_type");
    //IpcKeyMgr::setIpcKey("SHM_ACCNBROFFERTYPE_INDEX","客户资料_a_acc_nbr_offer_type索引区");
    //IpcKeyMgr::setIpcKey("SHM_ACCNBROFFERTYPE_ITEM_INDEX","客户资料_a_acc_nbr_offer_type");
    //IpcKeyMgr::setIpcKey("SHM_ACCT_INFO_DATA","客户资料_帐户信息数据");
    //IpcKeyMgr::setIpcKey("SHM_ACCT_INFO_INDEX","客户资料_帐户信息索引");
    //IpcKeyMgr::setIpcKey("SHM_AcctItemData","累积数据_总量帐单数据");
    //IpcKeyMgr::setIpcKey("SHM_AcctItemIndex_S","累积数据_总量账单索引（SERV_ID)");
    //IpcKeyMgr::setIpcKey("SHM_AcctitemOweBuf","累积数据_往月欠费数据");
    //IpcKeyMgr::setIpcKey("SHM_AcctitemOweIndex1","累积数据_往月欠费索引1");
    //IpcKeyMgr::setIpcKey("SHM_AcctitemOweIndex2","累积数据_往月欠费索引2");
    //IpcKeyMgr::setIpcKey("SHM_AccuCycleData","累积数据_累积周期数据");
    //IpcKeyMgr::setIpcKey("SHM_AccuCycleData_Index","累积数据_累积周期索引");
    //IpcKeyMgr::setIpcKey("SHM_AccuData","累积数据_累积使用量数据");
    //IpcKeyMgr::setIpcKey("SHM_AccuData_Index_I","累积数据_累积使用量索引(实例)");
    //IpcKeyMgr::setIpcKey("SHM_AccuData_Index_O","累积数据_累积使用量索引(商品)");
    //IpcKeyMgr::setIpcKey("SHM_AccuData_Index_S","累积数据_累积使用量索引(用户)");
    //IpcKeyMgr::setIpcKey("SHM_BalanceAcctBuf","累积数据_余额索引(ACCT_ID)");
    //IpcKeyMgr::setIpcKey("SHM_BalanceBuf","累积数据_余额数据");
    //IpcKeyMgr::setIpcKey("SHM_BalanceServBuf","累积数据_余额索引(SERV_ID)");
    //IpcKeyMgr::setIpcKey("SHM_BillMntKey","流程调度_后台监控守护进程共享内存");
    //IpcKeyMgr::setIpcKey("SHM_BillingCycle_Data","系统数据_帐期数据");
    //IpcKeyMgr::setIpcKey("SHM_BillingCycle_Index","系统数据_帐期索引");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_AcctItemData","缓存_总帐数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_AddressData","缓存_地址数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_DisctAggrData","缓存_优惠汇总数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_DisctDetailData","缓存_优惠明细数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_EventAggrData","缓存_事件累积量数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_EventData","缓存_事件数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_EventPriceData","缓存_事件轨迹数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_EventWaitData","缓存_等待事件数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_EventWaitIndex","缓存_等待事件索引区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_Index","缓存_索引区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_LockKeyData","缓存_锁信息数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_MiddleData","缓存_中间数据区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_MiddleIndex","缓存_中间索引区");
    //IpcKeyMgr::setIpcKey("SHM_CACHE_MiddleInfoData","缓存_中间信息区");
    //IpcKeyMgr::setIpcKey("SHM_CServIdenBuf","AB区用户号码信息");
    //IpcKeyMgr::setIpcKey("SHM_CServIdenIdxBuf","AB区用户号码索引信息");
    //IpcKeyMgr::setIpcKey("SHM_CUST_INFO_DATA","客户资料_客户信息数据");
    //IpcKeyMgr::setIpcKey("SHM_CUST_INFO_INDEX","客户资料_客户信息索引");
    //IpcKeyMgr::setIpcKey("SHM_DATA_E8_ACCOUNT_DATA","客户资料_E8档案信息数据区");
    //IpcKeyMgr::setIpcKey("SHM_DATA_E8_ACCOUNT_INDEX","客户资料_E8档案信息索引区");
    //IpcKeyMgr::setIpcKey("SHM_GROUP_INFO_DATA","客户资料_政企手机_组信息数据");
    //IpcKeyMgr::setIpcKey("SHM_GROUP_INFO_INDEX","客户资料_政企手机_组信息索引");
    //IpcKeyMgr::setIpcKey("SHM_GROUP_MEMBER_DATA","客户资料_政企手机_组成员信息(对端)数据");
    //IpcKeyMgr::setIpcKey("SHM_GROUP_MEMBER_INDEX","客户资料_政企手机_组成员信息(对端)索引");
    //IpcKeyMgr::setIpcKey("SHM_IMSI_MDN_RELATION_DATA","客户资料_上网本_号码对应关系数据");
    //IpcKeyMgr::setIpcKey("SHM_IMSI_MDN_RELATION_INDEX","客户资料_上网本_号码对应关系索引");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_ACCTID_INDEX","客户资料_集团代付_帐户扩展属性帐户ID索引");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_ACCT_ATTR_DATA","客户资料_集团代付_帐户扩展属性数据区");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_ACCT_ATTR_INDEX","客户资料_集团代付_帐户扩展属性索引区");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_CUSTID_INDEX","客户资料_集团代付_客户ID索引");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_OFFER_INST_INDEX","客户资料_集团代付_商品实例ID索引");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_SERVID_INDEX","客户资料_集团代付_用户ID索引");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_SERV_ACCT_DATA","客户资料_集团代付_支付关系数据区");
    //IpcKeyMgr::setIpcKey("SHM_IVPN_SERV_ACCT_INDEX","客户资料_集团代付_支付关系索引");
    //IpcKeyMgr::setIpcKey("SHM_Lock_Data","锁管理_数据区");
    //IpcKeyMgr::setIpcKey("SHM_Lock_Index","锁管理_索引区");
    //IpcKeyMgr::setIpcKey("SHM_Lock_Info_Data","锁管理_锁信息数据区");
    //IpcKeyMgr::setIpcKey("SHM_NUMBER_GROUP_DATA","客户资料_政企手机_组成员信息(本端)数据");
    //IpcKeyMgr::setIpcKey("SHM_NUMBER_GROUP_INDEX","客户资料_政企手机_组成员信息(本端)索引");
    //IpcKeyMgr::setIpcKey("SHM_OFFERDETAILINS_DATA","客户资料_商品实例明细数据");
    //IpcKeyMgr::setIpcKey("SHM_OFFERDETAILINS_INSIDOFFER_INDEX","客户资料_商品实例明细索引区(商品示例)");
    //IpcKeyMgr::setIpcKey("SHM_PARAMDATA_STATE","共享参数_参数信息");
    //IpcKeyMgr::setIpcKey("SHM_PRODOFFERDISCTBUF","累积数据_实时账目优惠明细数据");
    //IpcKeyMgr::setIpcKey("SHM_PRODOFFERDISCTINDEX","累积数据_实时账目优惠索引");
    //IpcKeyMgr::setIpcKey("SHM_PRODOFFERINSATTR_DATA","客户资料_商品实例附加属性信息");
    //IpcKeyMgr::setIpcKey("SHM_PRODOFFERINS_DATA","客户资料_商品实例数据");
    //IpcKeyMgr::setIpcKey("SHM_PRODOFFERINS_INDEX","客户资料_商品实例索引");
    //IpcKeyMgr::setIpcKey("SHM_PRODOFFERTOTALBUF","累积数据_实时账目优惠数据");
    //IpcKeyMgr::setIpcKey("SHM_PRODUCT_INFO_DATA","客户资料_产品数据");
    //IpcKeyMgr::setIpcKey("SHM_PRODUCT_INFO_INDEX","客户资料_产品索引");
    //IpcKeyMgr::setIpcKey("SHM_SERVACCT_ACCT_INDEX","客户资料_用户帐户关系索引");
    //IpcKeyMgr::setIpcKey("SHM_SERVACCT_INFO_DATA","客户资料_用户帐户关系数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVATTR_INFO_DATA","客户资料_用户属性数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVIDENT_INFO_DATA","客户资料_用户号码数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVIDENT_INFO_INDEX","SHM_SERVIDENT_INFO_INDEX");
    //IpcKeyMgr::setIpcKey("SHM_SERVLOCATION_INFO_DATA","客户资料_用户计费区域数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVLOCATION_INFO_INDEX","客户资料_用户计费区域索引");
    //IpcKeyMgr::setIpcKey("SHM_SERVPRODUCTATTR_INFO_DATA","客户资料_用户附属产品附加属性数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVPRODUCT_INFO_DATA","客户资料_用户附属产品数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVPRODUCT_INFO_INDEX","客户资料_用户附属产品索引");
    //IpcKeyMgr::setIpcKey("SHM_SERVSTATE_INFO_DATA","客户资料_用户状态数据");
    //IpcKeyMgr::setIpcKey("SHM_SERVTYPE_INFO_DATA","客户资料_用户产品信息数据");
    //IpcKeyMgr::setIpcKey("SHM_SERV_INFO_DATA","客户资料_用户数据");
    //IpcKeyMgr::setIpcKey("SHM_SERV_INFO_INDEX","客户资料_用户索引");
    //IpcKeyMgr::setIpcKey("SHM_VPN_ANDVPN_DATA","客户资料_VPN关系信息");
    //IpcKeyMgr::setIpcKey("SHM_VPN_ANDVPN_INDEX","客户资料_VPN关系信息索引区");
    //IpcKeyMgr::setIpcKey("SHM_VPN_FRIENDNUM_DATA","客户资料_VPN与外网号码信息");
    //IpcKeyMgr::setIpcKey("SHM_VPN_FRIENDNUM_INDEX","客户资料_VPN与外网号码信息索引区1");
    //IpcKeyMgr::setIpcKey("SHM_VPN_INFO_DATA","客户资料_VPN信息");
    //IpcKeyMgr::setIpcKey("SHM_VPN_INFO_INDEX","客户资料_VPN信息索引区");
    //IpcKeyMgr::setIpcKey("SHM_VPN_MEMBER_DATA","客户资料_VPN成员信息");
    //IpcKeyMgr::setIpcKey("SHM_VPN_MEMBER_INDEX","客户资料_VPN成员信息索引区1");
    //IpcKeyMgr::setIpcKey("SHM_VPN_VPNHAVEFRIENDNUM_INDEX","客户资料_VPN与外网号码信息索引区2");
    //IpcKeyMgr::setIpcKey("SHM_VPN_VPNHAVEMEMBER999_INDEX","客户资料_VPN成员角色999索引");
    //IpcKeyMgr::setIpcKey("SHM_VPN_VPNHAVEMEMBER_INDEX","客户资料_VPN成员信息索引区2");
    //IpcKeyMgr::setIpcKey("SHM_WorkFlowKey","流程调度_流程调度守护进程共享内存");
	//IpcKeyMgr::setIpcKey("EXT_SERV_INDEX","EXT档案-EXT档案索引");
    //IpcKeyMgr::setIpcKey("EXT_SERV_DATA","EXT档案-EXT档案数据");

    IpcKeyMgr::setIpcKey("UNDOPROCESSDUP_INFO_DATA_A","共享参数_不排重进程数据区A");
    IpcKeyMgr::setIpcKey("UNDOPROCESSDUP_INFO_DATA_B","共享参数_不排重进程数据区B");
    IpcKeyMgr::setIpcKey("UNDOPROCESSDUP_INFO_INDEX_A","共享参数_不排重进程索引区A");
    IpcKeyMgr::setIpcKey("UNDOPROCESSDUP_INFO_INDEX_B","共享参数_不排重进程索引区B");
    IpcKeyMgr::setIpcKey("UNDOPROCESSSHOT_INFO_DATA_A","共享参数_不排重进程数据区A");
    IpcKeyMgr::setIpcKey("UNDOPROCESSSHOT_INFO_DATA_B","共享参数_不排重进程数据区B");
    IpcKeyMgr::setIpcKey("UNDOPROCESSSHOT_INFO_INDEX_A","共享参数_不排重进程索引区A");
    IpcKeyMgr::setIpcKey("UNDOPROCESSSHOT_INFO_INDEX_B","共享参数_不排重进程索引区B");
    IpcKeyMgr::setIpcKey("UNDOPRODUCTDUP_INFO_DATA_A","共享参数_不排重商品数据区A");
    IpcKeyMgr::setIpcKey("UNDOPRODUCTDUP_INFO_DATA_B","共享参数_不排重商品数据区B");
    IpcKeyMgr::setIpcKey("UNDOSERVDUP_INFO_DATA_A","共享参数_不排重用户数据区A");
    IpcKeyMgr::setIpcKey("UNDOSERVDUP_INFO_DATA_B","共享参数_不排重用户数据区B");
    IpcKeyMgr::setIpcKey("PRODUCT_CONFIG_INFO_INDEX_A","共享参数_产品信息索引区A");
    IpcKeyMgr::setIpcKey("PRODUCT_CONFIG_INFO_INDEX_B","共享参数_产品信息索引区B");

    IpcKeyMgr::setIpcKey("AREACODE_INFO_INDEX_A","共享参数_区号信息索引区A");
    IpcKeyMgr::setIpcKey("AREACODE_INFO_INDEX_B","共享参数_区号信息索引区B");
    IpcKeyMgr::setIpcKey("CARRIER_INFO_DATA_A","共享参数_承载信息数据区A");
    IpcKeyMgr::setIpcKey("CARRIER_INFO_DATA_B","共享参数_承载信息数据区B");
    IpcKeyMgr::setIpcKey("CARRIER_INFO_INDEX_A","共享参数_承载信息索引区A");
    IpcKeyMgr::setIpcKey("CARRIER_INFO_INDEX_B","共享参数_承载信息索引区B");
    IpcKeyMgr::setIpcKey("HLR_INFO_INDEX_A","共享参数_HLR信息索引区A");
    IpcKeyMgr::setIpcKey("HLR_INFO_INDEX_B","共享参数_HLR信息索引区B");
    IpcKeyMgr::setIpcKey("SERVICE_INFO_DATA_A","共享参数_服务信息数据区A");
    IpcKeyMgr::setIpcKey("SERVICE_INFO_DATA_B","共享参数_服务信息数据区B");
    IpcKeyMgr::setIpcKey("SERVICE_INFO_INDEX_A","共享参数_服务信息索引区A");
    IpcKeyMgr::setIpcKey("SERVICE_INFO_INDEX_B","共享参数_服务信息索引区B");
    IpcKeyMgr::setIpcKey("SWITCH_INFO_DATA_A","共享参数_交换机信息数据区A");
    IpcKeyMgr::setIpcKey("SWITCH_INFO_DATA_B","共享参数_交换机信息数据区B");
    IpcKeyMgr::setIpcKey("SWITCH_INFO_INDEX_A","共享参数_交换机信息索引区A");
    IpcKeyMgr::setIpcKey("SWITCH_INFO_INDEX_B","共享参数_交换机信息索引区B");
    IpcKeyMgr::setIpcKey("SWITCH_INFO_OPC_INDEX_A","共享参数_交换机信息OPC索引区A");
    IpcKeyMgr::setIpcKey("SWITCH_INFO_OPC_INDEX_B","共享参数_交换机信息OPC索引区B");
    IpcKeyMgr::setIpcKey("TIMESTYPE_INFO_INDEX_A","共享参数_时间类型信息索引区A");
    IpcKeyMgr::setIpcKey("TIMESTYPE_INFO_INDEX_B","共享参数_时间类型信息索引区B");
    IpcKeyMgr::setIpcKey("TRUNKBILLING_INFO_DATA_A","共享参数_中继计费数据区A");
    IpcKeyMgr::setIpcKey("TRUNKBILLING_INFO_DATA_B","共享参数_中继计费数据区B");
    IpcKeyMgr::setIpcKey("TRUNKBILLING_INFO_INDEX_A","共享参数_中继计费索引区A");
    IpcKeyMgr::setIpcKey("TRUNKBILLING_INFO_INDEX_B","共享参数_中继计费索引区B");
	//
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_INFO_DATA_A","共享参数_FILTER_RULE_RESULT数据区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_INFO_DATA_B","共享参数_FILTER_RULE_RESULT数据区B");
    
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_CALLING_INFO_INDEX_A","共享参数_FILTER_RULE_RESULT_CALLING计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_CALLING_INFO_INDEX_B","共享参数_FILTER_RULE_RESULT_CALLING计费索引区B");
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_CALLED_INFO_INDEX_A","共享参数_FILTER_RULE_RESULT_CALLED计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_CALLED_INFO_INDEX_B","共享参数_FILTER_RULE_RESULT_CALLED计费索引区B");
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_AREACODE_INFO_INDEX_A","共享参数_FILTER_RULE_RESULT_AREACODE计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_AREACODE_INFO_INDEX_B","共享参数_FILTER_RULE_RESULT_AREACODE计费索引区B");
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_GATHERPOT_INFO_INDEX_A","共享参数_FILTER_RULE_RESULT_GATHERPOT计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_GATHERPOT_INFO_INDEX_B","共享参数_FILTER_RULE_RESULT_GATHERPOT计费索引区B");
	
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_TRUNCKIN_INFO_INDEX_A","共享参数_ FILTER_RULE_RESULT_TRUNCKIN 计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_TRUNCKIN_INFO_INDEX_B","共享参数_ FILTER_RULE_RESULT_TRUNCKIN 计费索引区B");
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_TRUNCKOUT_INFO_INDEX_A","共享参数_ FILTER_RULE_RESULT_TRUNCKOUT 计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_TRUNCKOUT_INFO_INDEX_B","共享参数_ FILTER_RULE_RESULT_TRUNCKOUT 计费索引区B");
	IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_SWITCHID_INFO_INDEX_A","共享参数_ FILTER_RULE_RESULT_SWITCHID 计费索引区A");
    IpcKeyMgr::setIpcKey("FILTER_RULE_RESULT_SWITCHID_INFO_INDEX_B","共享参数_ FILTER_RULE_RESULT_SWITCHID 计费索引区B");
		
    IpcKeyMgr::setIpcKey("PARAM_ORGPATH_INFO_DATA_A", "共享参数-org路径数据A");
    IpcKeyMgr::setIpcKey("PARAM_ORGPATH_INFO_DATA_B", "共享参数-org路径数据B");
    IpcKeyMgr::setIpcKey("PARAM_ORGPATH_INFO_INDEX_A", "共享参数-org路径索引A");
    IpcKeyMgr::setIpcKey("PARAM_ORGPATH_INFO_INDEX_B",  "共享参数-org路径索引B");
    IpcKeyMgr::setIpcKey("PARAM_LOCALEVENTTYPERULE_INFO_DATA_A", "共享参数-local事件求取数据A");
    IpcKeyMgr::setIpcKey("PARAM_LOCALEVENTTYPERULE_INFO_DATA_B", "共享参数-local事件求取数据B");
    IpcKeyMgr::setIpcKey("PARAM_LOCALEVENTTYPERULE_INFO_INDEX_A", "共享参数-local事件求取索引A");
    IpcKeyMgr::setIpcKey("PARAM_LOCALEVENTTYPERULE_INFO_INDEX_B", "共享参数-local事件求取索引B");
    
    IpcKeyMgr::setIpcKey ("FILEPOOL_DATA_A","共享内存_文件池数据A");
    IpcKeyMgr::setIpcKey ("FILEPOOL_DATA_B","共享内存_文件池数据B");
    IpcKeyMgr::setIpcKey ("FILEPOOL_INDEX_A","共享内存_文件池索引A");
    IpcKeyMgr::setIpcKey ("FILEPOOL_INDEX_B","共享内存_文件池索引B");
    IpcKeyMgr::setIpcKey ("FILEPOOL_COND_DATA_A","共享内存_文件池条件数据A");
    IpcKeyMgr::setIpcKey ("FILEPOOL_COND_DATA_B","共享内存_文件池条件数据B");
    IpcKeyMgr::setIpcKey ("FILEPOOL_COND_INDEX_A","共享内存_文件池条件索引A");
    IpcKeyMgr::setIpcKey ("FILEPOOL_COND_INDEX_B","共享内存_文件池条件索引B");
    IpcKeyMgr::setIpcKey ("FILETYPE_INDEX_A","共享内存_文件类型索引A");
    IpcKeyMgr::setIpcKey ("FILETYPE_INDEX_B","共享内存_文件类型索引B");
    IpcKeyMgr::setIpcKey ("TLVENCODE_DATA_A","共享内存_TLV编码数据A");
    IpcKeyMgr::setIpcKey ("TLVENCODE_DATA_B","共享内存_TLV编码数据B");
    IpcKeyMgr::setIpcKey ("TLVENCODE_INDEX_A","共享内存_TLV编码索引A");
    IpcKeyMgr::setIpcKey ("TLVENCODE_INDEX_B","共享内存_TLV编码索引B");
    IpcKeyMgr::setIpcKey ("TLVDECODE_DATA_A","共享内存_TLV解码数据A");
    IpcKeyMgr::setIpcKey ("TLVDECODE_DATA_B","共享内存_TLV解码数据B");
    IpcKeyMgr::setIpcKey ("TLVDECODE_INDEX_A","共享内存_TLV解码索引A");
    IpcKeyMgr::setIpcKey ("TLVDECODE_INDEX_B","共享内存_TLV解码索引B");
    IpcKeyMgr::setIpcKey ("BILLINGNODE_DATA_A","共享内存_节点信息数据A");
    IpcKeyMgr::setIpcKey ("BILLINGNODE_DATA_B","共享内存_节点信息数据B");
    IpcKeyMgr::setIpcKey ("BILLINGNODE_INDEX_A","共享内存_节点信息索引A");
    IpcKeyMgr::setIpcKey ("BILLINGNODE_INDEX_B","共享内存_节点信息索引B");
        IpcKeyMgr::setIpcKey ("FILEPARSERULE_INDEX_A","共享内存_文件解析规则索引A");
    IpcKeyMgr::setIpcKey ("FILEPARSERULE_INDEX_B","共享内存_文件解析规则索引B");
    IpcKeyMgr::setIpcKey ("SWITCHCODE_DATA_A","共享内存_交换机信息数据A");
    IpcKeyMgr::setIpcKey ("SWITCHCODE_DATA_B","共享内存_交换机信息数据B");
    IpcKeyMgr::setIpcKey ("SWITCHCODE_INDEX_A","共享内存_交换机信息索引A");
    IpcKeyMgr::setIpcKey ("SWITCHCODE_INDEX_B","共享内存_交换机信息索引B");
    //2010.12.20
    IpcKeyMgr::setIpcKey ("ROAMTARIFF_DATA_A","共享内存_国际漫出资费信息数据A");
    IpcKeyMgr::setIpcKey ("ROAMTARIFF_DATA_B","共享内存_国际漫出资费信息数据B");
    IpcKeyMgr::setIpcKey ("ROAMTARIFF_INDEX_A","共享内存_国际漫出资费信息索引A");
    IpcKeyMgr::setIpcKey ("ROAMTARIFF_INDEX_B","共享内存_国际漫出资费信息索引B");
    IpcKeyMgr::setIpcKey ("ROAMCARRIER_DATA_A","共享内存_国际漫出运营商信息数据A");
    IpcKeyMgr::setIpcKey ("ROAMCARRIER_DATA_B","共享内存_国际漫出运营商信息数据B");
    IpcKeyMgr::setIpcKey ("ROAMCARRIER_INDEX_A","共享内存_国际漫出运营商信息索引A");
    IpcKeyMgr::setIpcKey ("ROAMCARRIER_INDEX_B","共享内存_国际漫出运营商信息索引B");
    IpcKeyMgr::setIpcKey ("TARIFFSECTOR_INDEX_A","共享内存_国际漫出资费区信息索引A");
    IpcKeyMgr::setIpcKey ("TARIFFSECTOR_INDEX_B","共享内存_国际漫出资费区信息索引B");
    IpcKeyMgr::setIpcKey ("COUNTRY_DATA_A","共享内存_国家信息数据A");
    IpcKeyMgr::setIpcKey ("COUNTRY_DATA_B","共享内存_国家信息数据B");
    IpcKeyMgr::setIpcKey ("COUNTRY_CODE_INDEX_A","共享内存_国家信息国家代码索引A");
    IpcKeyMgr::setIpcKey ("COUNTRY_CODE_INDEX_B","共享内存_国家信息国家代码索引B");
    IpcKeyMgr::setIpcKey ("COUNTRY_AREA_INDEX_A","共享内存_国家信息区号索引A");
    IpcKeyMgr::setIpcKey ("COUNTRY_AREA_INDEX_B","共享内存_国家信息区号索引B");
    IpcKeyMgr::setIpcKey ("ROAMSPONSOR_DATA_A","共享内存_国际漫出代理运营商信息数据A");
    IpcKeyMgr::setIpcKey ("ROAMSPONSOR_DATA_B","共享内存_国际漫出代理运营商信息数据B");
    IpcKeyMgr::setIpcKey ("ROAMSPONSOR_INDEX_A","共享内存_国际漫出代理运营商信息索引A");
    IpcKeyMgr::setIpcKey ("ROAMSPONSOR_INDEX_B","共享内存_国际漫出代理运营商信息索引B");
    IpcKeyMgr::setIpcKey ("SPECIALGROUPMEMBER_DATA_A","共享内存_国际漫出特殊资费组成员信息数据A");
    IpcKeyMgr::setIpcKey ("SPECIALGROUPMEMBER_DATA_B","共享内存_国际漫出特殊资费组成员信息数据B");
    IpcKeyMgr::setIpcKey ("SPECIALGROUPMEMBER_INDEX_A","共享内存_国际漫出特殊资费组成员信息索引A");
    IpcKeyMgr::setIpcKey ("SPECIALGROUPMEMBER_INDEX_B","共享内存_国际漫出特殊资费组成员信息索引B");
      //std
      /*IpcKeyMgr::setIpcKey("STD_STRUCT_DATA_A", "标准数据区A");
      IpcKeyMgr::setIpcKey("STD_STRUCT_DATA_B", "标准数据区B");
      IpcKeyMgr::setIpcKey("STD_STRUCT_TYPE_INDEX_A", "标准数据索引区A");
      IpcKeyMgr::setIpcKey("STD_STRUCT_TYPE_INDEX_B", "标准数据索引区B");
      IpcKeyMgr::setIpcKey("STD_STRUCT_DATA_DESC_A", "标准数据信息描述区A");
      IpcKeyMgr::setIpcKey("STD_STRUCT_DATA_DESC_B", "标准数据信息描述区B");*/
      //prep
      IpcKeyMgr::setIpcKey("TEMPLATEMAPSWITCH_DATA_A", "模板ID映射关系ID交换机类型ID数据区A");
      IpcKeyMgr::setIpcKey("TEMPLATEMAPSWITCH_DATA_B", "模板ID映射关系ID交换机类型ID数据区B");
      IpcKeyMgr::setIpcKey("TEMPLATEMAPSWITCH_INDEX_A", "模板ID映射关系ID交换机类型ID索引区A");
      IpcKeyMgr::setIpcKey("TEMPLATEMAPSWITCH_INDEX_B", "模板ID映射关系ID交换机类型ID索引区B");
          
      IpcKeyMgr::setIpcKey("OBJECTDEFINE_DATA_A", "OBJECTDEFINE数据区A");
      IpcKeyMgr::setIpcKey("OBJECTDEFINE_DATA_B", "OBJECTDEFINE数据区B");
      IpcKeyMgr::setIpcKey("OBJECTDEFINE_INDEX_A", "OBJECTDEFINE索引区A");
      IpcKeyMgr::setIpcKey("OBJECTDEFINE_INDEX_B", "OBJECTDEFINE索引区B");
          
      IpcKeyMgr::setIpcKey("EVENTPARSERGROUP_DATA_A", "EVENTPARSERGROUP数据区A");
      IpcKeyMgr::setIpcKey("EVENTPARSERGROUP_DATA_B", "EVENTPARSERGROUP数据区B");
      IpcKeyMgr::setIpcKey("EVENTPARSERGROUP_INDEX_A", "EVENTPARSERGROUP索引区A");
      IpcKeyMgr::setIpcKey("EVENTPARSERGROUP_INDEX_B", "EVENTPARSERGROUP索引区B");
      //IpcKeyMgr::setIpcKey("EPGGROUP_DATA_A", "EPGGROUP数据区A");
      //IpcKeyMgr::setIpcKey("EPGGROUP_DATA_B", "EPGGROUP数据区B");
      //IpcKeyMgr::setIpcKey("EPGGROUP_INDEX_A", "EPGGROUP索引区A");
      //IpcKeyMgr::setIpcKey("EPGGROUP_INDEX_B", "EPGGROUP索引区B");
          
      IpcKeyMgr::setIpcKey("TEMPLATE_RELATION_DATA_A", "TEMPLATE_RELATION数据区A");
      IpcKeyMgr::setIpcKey("TEMPLATE_RELATION_DATA_B", "TEMPLATE_RELATION数据区B");
      IpcKeyMgr::setIpcKey("TEMPLATE_RELATION_INDEX_A", "TEMPLATE_RELATION索引区A");
      IpcKeyMgr::setIpcKey("TEMPLATE_RELATION_INDEX_B", "TEMPLATE_RELATION索引区B");
      IpcKeyMgr::setIpcKey("FIELD_SHM_DATA_A", "FIELD数据区A");
      IpcKeyMgr::setIpcKey("FIELD_SHM_DATA_B", "FIELD数据区B");
      IpcKeyMgr::setIpcKey("FIELD_TEMPLATE_INDEX_A", "FIELD_TEMPLATE索引区A");
      IpcKeyMgr::setIpcKey("FIELD_TEMPLATE_INDEX_B", "FIELD_TEMPLATE索引区B");
	  IpcKeyMgr::setIpcKey("FIELD_UNION_INDEX_A", "FIELDUnion 索引区A");
      IpcKeyMgr::setIpcKey("FIELD_UNION_INDEX_B", "FIELDUnion 索引区B");
      /*IpcKeyMgr::setIpcKey("SWITCH_SHM_INFO_DATA_A", "SWITCH数据区A");
      IpcKeyMgr::setIpcKey("SWITCH_SHM_INFO_DATA_B", "SWITCH数据区B");
      IpcKeyMgr::setIpcKey("SWITCH_SHM_INFO_INDEX_A", "SWITCH索引区A");
      IpcKeyMgr::setIpcKey("SWITCH_SHM_INFO_INDEX_B", "SWITCH索引区B");*/
      IpcKeyMgr::setIpcKey("SWITCH_TYPE_INFO_DATA_A", "SWITCH_TYPE数据区A");
      IpcKeyMgr::setIpcKey("SWITCH_TYPE_INFO_DATA_B", "SWITCH_TYPE数据区B");
      IpcKeyMgr::setIpcKey("SWITCH_TYPE_INFO_INDEX_A", "SWITCH_TYPE索引区A");
      IpcKeyMgr::setIpcKey("SWITCH_TYPE_INFO_INDEX_B", "SWITCH_TYPE索引区B");
          
      IpcKeyMgr::setIpcKey("EVENT_ATTR_DATA_A", "EVENT_ATTR 数据区A");
      IpcKeyMgr::setIpcKey("EVENT_ATTR_DATA_B", "EVENT_ATTR 数据区B");
      IpcKeyMgr::setIpcKey("EVENT_ATTR_INDEX_A", "EVENT_ATTR 索引区A");
      IpcKeyMgr::setIpcKey("EVENT_ATTR_INDEX_B", "EVENT_ATTR 索引区B");
          //b_map_parser_group loadEventHeadAndColunmCfg
      IpcKeyMgr::setIpcKey("EVENT_HEAD_COLUMNS_CFG_A", "EVENT_HEAD_COLUMNS 数据区A");
      IpcKeyMgr::setIpcKey("EVENT_HEAD_COLUMNS_CFG_B", "EVENT_HEAD_COLUMNS 数据区B");
      IpcKeyMgr::setIpcKey("EVENT_HEAD_COLUMNS_INDEX_A", "EVENT_HEAD_COLUMNS 索引区A");
      IpcKeyMgr::setIpcKey("EVENT_HEAD_COLUMNS_INDEX_B", "EVENT_HEAD_COLUMNS 索引区B");
          
      IpcKeyMgr::setIpcKey("SWITCHID_MAP_SWITCH_DATA_A", "SWITCHID_MAP_SWITCH 数据区A");
      IpcKeyMgr::setIpcKey("SWITCHID_MAP_SWITCH_DATA_B", "SWITCHID_MAP_SWITCH 数据区B");
      IpcKeyMgr::setIpcKey("SWITCHID_MAP_SWITCH_INDEX_A", "SWITCHID_MAP_SWITCH 索引区A");
      IpcKeyMgr::setIpcKey("SWITCHID_MAP_SWITCH_INDEX_B", "SWITCHID_MAP_SWITCH 索引区B");       
          //FieldCheckMethod
      IpcKeyMgr::setIpcKey("FIELD_CHECK_METHOD_DATA_A", "FIELD_CHECK_METHOD 数据区A");
      IpcKeyMgr::setIpcKey("FIELD_CHECK_METHOD_DATA_B", "FIELD_CHECK_METHOD 数据区B");
      IpcKeyMgr::setIpcKey("FIELD_CHECK_METHOD_INDEX_A", "FIELD_CHECK_METHOD 索引区A");
      IpcKeyMgr::setIpcKey("FIELD_CHECK_METHOD_INDEX_B", "FIELD_CHECK_METHOD 索引区B"); 
          
          //FieldMAP
      IpcKeyMgr::setIpcKey("FIELD_VALUE_MAP_DATA_A", "FIELD_VALUE_MAP 数据区A");
      IpcKeyMgr::setIpcKey("FIELD_VALUE_MAP_DATA_B", "FIELD_VALUE_MAP 数据区B");
      IpcKeyMgr::setIpcKey("FIELD_VALUE_MAP_INDEX_A", "FIELD_VALUE_MAP 索引区A");
      IpcKeyMgr::setIpcKey("FIELD_VALUE_MAP_INDEX_B", "FIELD_VALUE_MAP 索引区B");       
          
          //FieldMERGE
      IpcKeyMgr::setIpcKey("FIELD_MERGE_DATA_A", "FIELD_MERGE 数据区A");
      IpcKeyMgr::setIpcKey("FIELD_MERGE_DATA_B", "FIELD_MERGE 数据区B");
      IpcKeyMgr::setIpcKey("FIELD_MERGE_INDEX_A", "FIELD_MERGE 索引区A");
      IpcKeyMgr::setIpcKey("FIELD_MERGE_INDEX_B", "FIELD_MERGE 索引区B");
          
          //TAP3
      IpcKeyMgr::setIpcKey("TAP3FILE_DATA_A", "TAP3FILE 数据区A");
      IpcKeyMgr::setIpcKey("TAP3FILE_DATA_B", "TAP3FILE 数据区B");
      IpcKeyMgr::setIpcKey("TAP3_BLOCK_DATA_A", "TAP3_BLOCK 数据区A");
      IpcKeyMgr::setIpcKey("TAP3_BLOCK_DATA_B", "TAP3_BLOCK 数据区B");
      //IpcKeyMgr::setIpcKey("TAP3_BLOCK_INDEX_A", "TAP3_BLOCK 索引区A");
      //IpcKeyMgr::setIpcKey("TAP3_BLOCK_INDEX_B", "TAP3_BLOCK 索引区B");
          
          //SEP
      IpcKeyMgr::setIpcKey("SEP_FILE_DATA_A", "SEP_FILE 数据区A");
      IpcKeyMgr::setIpcKey("SEP_FILE_DATA_B", "SEP_FILE 数据区B");
      IpcKeyMgr::setIpcKey("SEP_BLOCK_DATA_A", "SEP_BLOCK 数据区A");
      IpcKeyMgr::setIpcKey("SEP_BLOCK_DATA_B", "SEP_BLOCK 数据区B");
      //IpcKeyMgr::setIpcKey("SEP_BLOCK_INDEX_A", "SEP_BLOCK 索引区A");
      //IpcKeyMgr::setIpcKey("SEP_BLOCK_INDEX_B", "SEP_BLOCK 索引区B");
          
      //MERGE
      IpcKeyMgr::setIpcKey("MERGE_RULE_DATA_A", "MERGE_RULE 数据区A");
      IpcKeyMgr::setIpcKey("MERGE_RULE_DATA_B", "MERGE_RULE 数据区B");
      IpcKeyMgr::setIpcKey("MERGE_RULE_INDEX_A", "MERGE_RULE 索引区A");
      IpcKeyMgr::setIpcKey("MERGE_RULE_INDEX_B", "MERGE_RULE 索引区B");
          
      //MERGE_OUT
      IpcKeyMgr::setIpcKey("MERGE_OUT_DATA_A", "MERGE_OUT 数据区A");
      IpcKeyMgr::setIpcKey("MERGE_OUT_DATA_B", "MERGE_OUT 数据区B");
      IpcKeyMgr::setIpcKey("MERGE_OUT_INDEX_A", "MERGE_OUT 索引区A");
      IpcKeyMgr::setIpcKey("MERGE_OUT_INDEX_B", "MERGE_OUT 索引区B");
          
      //MERGE_KEY
      IpcKeyMgr::setIpcKey("MERGE_KEY_DATA_A", "MERGE_KEY 数据区A");
      IpcKeyMgr::setIpcKey("MERGE_KEY_DATA_B", "MERGE_KEY 数据区B");
      IpcKeyMgr::setIpcKey("MERGE_KEY_INDEX_A", "MERGE_KEY 索引区A");
      IpcKeyMgr::setIpcKey("MERGE_KEY_INDEX_B", "MERGE_KEY 索引区B");
	  //
	  IpcKeyMgr::setIpcKey("ACCTITEM_GROUP_STR_INFO_INDEX_A", "ACCTITEM_GROUP_STR_KEY 索引区A");
      IpcKeyMgr::setIpcKey("ACCTITEM_GROUP_STR_INFO_INDEX_B", "ACCTITEM_GROUP_STR_KEY 索引区B");
	  IpcKeyMgr::setIpcKey("ACCTITEM_GROUPB_STR_INFO_INDEX_A", "ACCTITEM_GROUPB_STR_KEY 索引区A");
      IpcKeyMgr::setIpcKey("ACCTITEM_GROUPB_STR_INFO_INDEX_B", "ACCTITEM_GROUPB_STR_KEY 索引区B");
	  IpcKeyMgr::setIpcKey("ACCTITEM_STR_INFO_INDEX_A", "ACCTITEM_STR_KEY 索引区A");
      IpcKeyMgr::setIpcKey("ACCTITEM_STR_INFO_INDEX_B", "ACCTITEM_STR_KEY 索引区B");
}
void ShmParamInfo::resetAllSizeCfg()
{
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LOGICSTATEMENT_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ASSIGNSTATEMENT_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CITYINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PRICINGPLANTYPE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ORG_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKARGUMENT_INFO_NUM);      
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LONGEVENTTYPERULE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKRULE_RULE_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FORMULA_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FORMATGROUP_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FORMATSTEP_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FORMATRULE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FORMATCOMB_NUM);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PROID_PRODUCTACCTITEMINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPECIALTRIFFCHECKINFO_NUM);   
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SECTIONINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TARIFFINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_DISCOUNTINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_DISCTAPPLYERINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_DISCTAPPLYEROBJINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PERCENTINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LIFECYCLEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_MEASUREINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_COMBINEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FILTERINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CONDITIONPOINTINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TIMECONDINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EVENTTYPECONDINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CYCLETYPEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ACCTTYPEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFERACCYRELATIONINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFERACCTEXISTINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CYCLETYPEIDINFO_NUM);
    //ParamDefineMgr::delParam(LOADPARAMINFO, EVENT_AGGR_CYCLE_TYPE);   
    //ParamDefineMgr::delParam(LOADPARAMINFO, EVENT_AGGR_CYCLE_DAYS);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFERCOMBINEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFERDISCTINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PRODUCTCOMBINEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PARSERULE_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PARSECOMB_INFO_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_MSERVACCT_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SWITCHINFO_NUM);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ACCTITEMMEMBERS_NUM); 
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ACCTITEMGROUPS_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EVENTTYPEGROUP_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SEGMENTINFO_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_VALUEMAP_NUM);        
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_STATECONVERT_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFER_SPECATTR_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_HOSTINFOINFO_NUM);
	#ifdef WHOLE_DISCOUNT
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_WHOLEDISCOUNTINFO_NUM);
	#endif
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_COMBINERELATIONINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PRODUCTACCTITEMINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPINFOSEEKINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ZONE_ITEM_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPLITACCTGROUP_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFER_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LOCALHEAD_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EVENTTYPE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EDGEROAMRULEEX_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPECIALTRIFFINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LONGTYPE_INFO_NUM);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKRELATION_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CARRIER_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_NBR_MAP_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFER_NUMATTR_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKRULE_SUBRULE_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ACCTITEM_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ORGEX_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CGCOMBINEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TRUNK_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_GATERTASKLISTINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_AREACODE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_HLR_NUM);
	//补充数据
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_VISIT_AREAVODE_INFO_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EDGEROAMRULE_INFO_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PNSEGBILLING_INFO_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PNNOTBILLING_INFO_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TRUNKTREENODE_INFO_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SERVICE_INFO2_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TRUNKBILLING_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPEC_TRUNK_PRODUCT_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SWITCHITEMTYPE_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FILTER_RESULT_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_STR_LOCALAREACODE_NUM);
	ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TIMESTYPE_NUM);
	//
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPECIALNBRSTRATEGYINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPLITCFGINFO_NUM);        
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPLITACCTEVENT_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_HEADEX_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ORGLONGTYPE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_USAGETYPEINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OFFER_FREE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TRANSFILE_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_DISTANCETYPE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_GATHERDATAINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LONGEVENTTYPERULEEX_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ACCTITEMMEMBERSB_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ACCTITEMGROUPSB_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_INSTTABLELIST_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TABLETYPE_INFO_NUM);

    //王帅 20101229 取消所有非参数表的操作
	//ParamDefineMgr::delParam(IVPN_SEGMENT, IVPN_SERVACCT_NUM);
    //ParamDefineMgr::delParam(IVPN_SEGMENT, IVPN_ACCTATTR_NUM);

    //ParamDefineMgr::delParam(VPNINFO_SEGMENT, VPNINFO_NUM_VPNINFO);
    //ParamDefineMgr::delParam(VPNINFO_SEGMENT, VPNINFO_NUM_VPNMEMBER);
    //ParamDefineMgr::delParam(VPNINFO_SEGMENT, VPNINFO_NUM_VPNMEMBER999);
    //ParamDefineMgr::delParam(VPNINFO_SEGMENT, VPNINFO_NUM_VPNANDVPN);
    //ParamDefineMgr::delParam(VPNINFO_SEGMENT, VPNINFO_NUM_VPNFRIENDNUM);

    //ParamDefineMgr::delParam(USERINFO_SEGMENT, E8_USER_INFO_NUM);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, EXT_SERV_DATA_NUM);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, EXT_SERV_DATA_NUM);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVPRODUCT);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVPRODUCTATTR);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_ASERVTYPECHANGE);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVLOCATION);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_PRODOFFERINSATTR);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_PRODOFFERINS);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERV);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVSTATEATTR);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVIDENT);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVATTR);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_CUST);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_SERVACCT);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_ACCT);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, EXT_SERV_INDEX_NUM);     
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, SERV_IDEN_CENTER);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_ACC_NBR_OFFER_TYPE);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_GROUPINFO);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_GROUPMEMBER);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_NUMBERGROUP);
    //ParamDefineMgr::delParam(USERINFO_SEGMENT, USERINFO_NUM_IMSI_MDN);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_NETWORKPRIORITY_INFO_NUM);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_RENT_CONFIG_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TRUNKTOBENBR_NUM);

    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_UNDOSERVDUP_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_UNDOPROCESSSHOT_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_UNDOPROCESSDUP_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKSHOTTICKET_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_UNDOPRODUCTDUP_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_UNDOPRODUCTDUP_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKDUPCFG_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKDUPSTEP_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_CHECKDUPTYPE_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_PRODUCT_CONFIG_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ORGPATH_INFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_LOCALEVENTTYPERULE_INFO_NUM);
    //2010.11.17
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FILEPOOLINFO_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FILEPOOLCOND_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FILETYPECFG_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TLVENCODE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TLVDECODE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_BILLINGNODE_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FILEPARSERULE_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SWITCHCODE_NUM);
    //2010.12.20
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ROAMTARIFF_NUM);
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ROAMCARRIER_NUM);        
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TARIFFSECTOR_NUM);       
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_COUNTRY_NUM);            
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_ROAMSPONSOR_NUM );       
    ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SPECIALGROUPMEMBER_NUM);         
        //prep
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TEMPLATEMAPSWITCH_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_OBJECTDEFINE_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EVENTPARSERGROUP_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FIELD_SHM_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SWITCH_TYPE_INFO_NUM);
        
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SEP_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EVENT_ATTR_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_EVENTHEAD_COLUMUN_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SWITICHIDMAPSWITCHINFO_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FIELD_CHECK_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FIELD_MAP_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_FIELD_MERGE_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TAP3_FILE_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_TAP3_BLOCK_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SEP_FILE_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_SEP_BLOCK_INFO_NUM);
        //
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_MERGE_RULE_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_MERGE_RULE_OUT_INFO_NUM);
        ParamDefineMgr::delParam(LOADPARAMINFO, PARAM_MERGE_KEY_RULE_INFO_NUM);
    
    initAllSizeCfg();
}



//计算配置数据生成的实际数据
unsigned int ShmParamInfo::calculateCodeNum(char const *_sSegment, char const *_sCode,int iStructSize)
{
        unsigned int iStdStructNumTmp = 0;
        /*unsigned int iChange2StdByteSize = 0;
        char countbuf[18] = {0};
        if(ParamDefineMgr::getParam(_sSegment, _sCode, countbuf))
        {
                iChange2StdByteSize = CAL_COUNT(atoi(countbuf))*iStructSize;
                if(iChange2StdByteSize)
                {                       
                        iStdStructNumTmp = iChange2StdByteSize/STD_CHAR8_LEN;
                        if(iChange2StdByteSize%STD_CHAR8_LEN)
                                iStdStructNumTmp++;
                }
        } else {
                Log::log(0,"[%s]数值未配置",_sCode);
                THROW(MBC_ParamInfoMgr+198);
        }*/
        return iStdStructNumTmp;
}

//获取使用最优算法的数据大小,要换算成标准结构体数目的
unsigned int ShmParamInfo::getStdTotalNum()
{
        unsigned int iTotalStdNum = 0;
        /*m_iTotalTemplateMapSwitchNum = calculateCodeNum(LOADPARAMINFO,"PARAM_TEMPLATEMAPSWITCH_NUM",sizeof(struct TemplateMapSwitch));
        iTotalStdNum += m_iTotalTemplateMapSwitchNum;
        
        m_iTotalObjectDefineNum = calculateCodeNum(LOADPARAMINFO,"PARAM_OBJECTDEFINE_NUM",sizeof(struct ObjectDefine));
        iTotalStdNum += m_iTotalObjectDefineNum;
        
        m_iTotalEventParserGroupNum = calculateCodeNum(LOADPARAMINFO,"PARAM_EVENTPARSERGROUP_NUM",sizeof(struct EventParserGroup));
        iTotalStdNum += m_iTotalEventParserGroupNum;
        
        StdCreateed = true;*/
        return iTotalStdNum;
}

void ShmParamInfo::bindStdData()
{
         //m_poStdList = (StdChar8*)(*m_poStdChar8Data);//这个之前已经在加载的时候要使用了,这个绑定之前已经就处理了
         /*if(m_poStdChar8Data && m_poStdChar8Data->exist())
         {
                //if(m_poStdList == NULL)
                m_poStdList = (StdChar8*)(*m_poStdChar8Data);
                unsigned int iIdx = 0;
                if(m_poStdChar8Index && m_poStdChar8Index->get(TEMPLATE_MAP_SWITCH_SHMTYPE,&iIdx))
                {
                        m_poTemplateMapSwitchList  = (TemplateMapSwitch*)(&m_poStdList[iIdx]);
                } 
                iIdx = 0;
                if(m_poStdChar8Index && m_poStdChar8Index->get(OBJECT_DEFINE_SHMTYPE,&iIdx))
                {
                        m_poObjectDefineList  = (ObjectDefine*)(&m_poStdList[iIdx]);
                } 
                iIdx = 0;
                if(m_poStdChar8Index && m_poStdChar8Index->get(MAP_PARSER_GROUP_SHMTYPE,&iIdx))
                {
                        m_poEventParserGroupList  = (EventParserGroup*)(&m_poStdList[iIdx]);
                } 
         }*/
         
}

#endif
