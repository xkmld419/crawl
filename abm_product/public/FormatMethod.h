/*VER: 3*/ 
// Copyright (c) 2005,联创科技股份有限公司电信事业部
// 
// 
// All rights reserved.
// 
// 
// Code Generated by yangks. 2005.04

#ifndef FORMATMETHOD_H_HEADER_INCLUDED_BD84F3E0
#define FORMATMETHOD_H_HEADER_INCLUDED_BD84F3E0
#include <vector>

#include "OrgMgr.h"
#include "KeyTree.h"

#include "TOCIQuery.h"
#include "Environment.h"
#include "CommonMacro.h"
#include "LocalHead.h"

#include "LongEventTypeRule.h"
#include "LocalEventTypeRule.h"
#include "FilterRule.h"

#include "CustomFilter.h"

#include "ParamDefineMgr.h"
#include "TrunkSegBilling.h"

#include <string>

using namespace std;

class Trunk;
class HLR;
class TServiceInfo;
class TSwitchInfo;
class EventSection;
class SwitchItemType;

//____________________________
class SwitchItemType
{
  public:
    int m_iSwitchID;
    int m_iTariffType;
    int m_iEventTypeID;
    int m_iAcctItemTypeID;
    int m_iBillMode;
};   

//____________________________
class VisitAreaCodeRule {
public:
//	char m_sMSC[20];
//	char m_sLAC[10];
//	char m_sCellID[10];
	char m_sAreaCode[10];	
	int  m_iVisitID;	
};

class EdgeRoamRule {
public:
//	char m_sMSC[20];
//	char m_sLAC[10];
//	char m_sCellID[10];
	char m_sAreaCode[10];
	int  m_iRoamID;	
};

//____________________________



//##ModelId=4279B010008A
//##Documentation
//## 中继判断表
class Trunk
{
  public:
    //##ModelId=4279B0A00055
    //##Documentation
    //## 中继类型
    int m_iTrunkTypeID;

    //##ModelId=4279B0D70307
    //##Documentation
    //## 是否需要中继计费 0：不需要 1：需要
    int m_iNeedBilling;
	int m_iTrunkCode;

};

//##ModelId=4279E26202B5
//##Documentation
//## 移动号段管理
class HLR
{
  public:
    //##ModelId=4279E288039F
    char m_sAreaCode[10];
	char m_sCodeSegment[18];
};

//## 专网计费号段表
class PNSegBilling
{
  public:
	char m_sAreaCode[MAX_CALLING_AREA_CODE_LEN];
	
	char m_sBeginNBR[MAX_CALLING_NBR_LEN];
	
	char m_sEndNBR[MAX_CALLING_NBR_LEN];
	
	char m_sAccNBR[MAX_CALLING_NBR_LEN];
	
	char m_sEffDate[15];
	
	char m_sExpDate[15];
	
	char m_sMaxEndNBRAhead[MAX_CALLING_NBR_LEN];

    int  m_iSegFlag;   ///号段标志  0:采用专网计费 , 否则 根据是否有档来判断是否是主叫计费
	long m_lSwitchID;
	char m_sTrunkIn[20];
};

 /////虽然是专网号段,但是不替换成专网号码
struct  strPNNotBilling {
	
	char m_sEffDate[15];
	char m_sExpDate[15];
};

class TrunkBilling
{
	public:
	int m_iSwitch_id;

    int m_iGatherPot;   ///采集点
	
	char m_sTrunk_Code[12];
	
	int m_iTrunkSide;
	
	char m_sAccNBR[MAX_CALLING_NBR_LEN];
	
	char m_sEffDate[15];
	
	char m_sExpDate[15];
};

//##ModelId=427B25AF03AF
//##Documentation
//## 业务类型判断表(包括运营商类型 和 业务类型)
class TServiceInfo
{
  public:
    //##ModelId=427B26270113
    char m_sAreaCode[MAX_CALLING_AREA_CODE_LEN];

    //##ModelId=427B265A0275
    char m_sBeginNBR[MAX_CALLING_NBR_LEN];

    //##ModelId=427B267A00B8
    char m_sEndNBR[MAX_CALLING_NBR_LEN];

    //##ModelId=427B26930317
    int m_iServiceTypeID;

    //##ModelId=427B26A400D6
    int m_iPartyRoleID;

    //##ModelId=427CD11200E0
    char m_sMaxEndNBRAhead[MAX_CALLING_NBR_LEN];

};

class TServiceInfo2
{
  public:
	int m_iOrgID;
	
    int m_iServiceTypeID;

    int m_iPartyRoleID;
};

//##ModelId=427C572903DA
//##Documentation
//## 交换机信息结构
class TSwitchInfo
{
  public:
    //##ModelId=427C577C032F
    int m_iSwitchID;

    //##ModelId=427C57F90004
    char m_sFileNameRule[100];

    //##ModelId=427C584701C8
    char m_sAreaCode[20];

    //##ModelId=427C58870289
    int m_iSourceEventType;

    //##ModelId=427C58A401EA
    int m_iSwitchTypeID;
    
    //交换机网络标识 引用表network_info.network_id
    int m_iNetworkID;
    
    //联机采集交换机OPC编码
    char m_sSwichOpcCode[20];
	//add
	int m_iSwitchLongType;
	int m_iMapID;
	unsigned int m_iNext;//modify 2010
};

//##ModelId=427983E9025E
//##Documentation
//## 需要用函数来实现的预处理规整方法集合
class FormatMethod
{
  public:
    //##ModelId=427986E40143
    FormatMethod(bool _InitAll = false);

    //##ModelId=427986FF0083
    ~FormatMethod();

    //##ModelId=4279B2710389
    //##Documentation
    //## 上载中继判断表
    static void loadTrunk();

    //##ModelId=4279B96B0387
    static void unloadTrunk();

    //##ModelId=4279B60802E0
    static bool getTrunk (
        //##Documentation
        //## 交换机ID
        int _iSwitchID, 
        //##Documentation
        //## 中继编码
        char *_sTrunkCode, 
        //##Documentation
        //## 中继方向: 0-双向 1-出中继 2-入中继
        char _cSide, 
        //##Documentation
        //## 返回值
        Trunk* _pTrunk);

    //##ModelId=4279D21D0099
    static void loadAreaCode();

    //##ModelId=4279D235031E
    static void unloadAreaCode();

    //##ModelId=4279D24E00C1
    //##Documentation
    //## 根据区号获取 区号相关信息(目前只提供长途组类型)
    static bool getAreaCodeInfo(char* _sAreaCode, int &_iLongGroupType);

    //##ModelId=4279D2A2019E
    static void loadHLR();

    //##ModelId=4279D2DA0217
    static void unloadHLR();

    //##ModelId=4279D2E6008E
    static bool getHLRInfo(
        //##Documentation
        //## 输入参数(移动号段)
        char* _sCodeSegment, HLR* _pHLR);

    //##ModelId=427C330302DA
    //##Documentation
    //## 根据移动号码取 号头/区号信息
    static bool getHLRInfoByMobileNBR(
        //##Documentation
        //## 输入手机号码(允许号码前带0)
        char* _sMobileNBR, 
        //##Documentation
        //## 输出区号(手机号码的地区号,如果未找到相应号段,不改变_sAreaCode的值)
        char *_sAreaCode, 
        //##Documentation
        //## 输出 手机号段(如果未找到,不改变_sHcode的值)
        char* _sHcode);

    //##ModelId=4279E8200358
    static void loadCarrier();

    //##ModelId=4279E84C0199
    static void unloadCarrier();

    //##ModelId=4279E86C0308
    //##Documentation
    //## 获取承载类型信息
    static bool getCarrierInfo(
        //##Documentation
        //## 输入: 承载号头
        char* _sPreCode, int &_iCarrierType);

    //##ModelId=427B27FD0371
    //##Documentation
    //## 上载业务类型/运营商类型判断信息
    static void loadServiceInfo();
    static void loadServiceInfo2();

    //##ModelId=427B28560008
    static void unloadServiceInfo();
    static void unloadServiceInfo2();

    //##ModelId=427B286F0267
    static bool getServiceInfo(char *_sAccNBR, TServiceInfo &_info, char *_sAreaCode = NULL);
	static bool getServiceInfo2(int _iLongGrpType, TServiceInfo2 *_pInfo, 
		char* _sNBR, char* _sStartDate, char* _sAreaCode, int iOrgIDRule, int iNetworkID,bool bIsZ);

	
	
	//## 专网计费管理
	static void loadPNSegBilling();
	static void unloadPNSegBilling();
	static bool getPNSegBilling(char *_sAccNBR, char *_sAreaCode, char *_sDate, PNSegBilling &_oSeg);
	//##北京需求使用严格匹配
	static bool getYGPNSegBilling(char *_sAccNBR, char *_sAreaCode, char *_sDate, PNSegBilling &_oSeg);
	static bool formatPNSegAccNBR(EventSection *_poEventSection);
	///##北京需求使用严格匹配
	static bool formatYGPNSegAccNBR(EventSection *_poEventSection);
	
	//## 中继计费管理
	static void loadTrunkBilling();
	static void unloadTrunkBilling();
	static bool getTrunkBilling(int _iSwitchID, char *_sTrunkInCode, char *_sTrunkOutCode,char *_sDate,TrunkBilling *_oTrunk);
    ////增加同名函数:四川需要使用采集点的
    static bool getTrunkBilling(int _iSwitchID, int _iGatherPot,
            char *_sTrunkInCode, char *_sTrunkOutCode,char *_sDate,TrunkBilling *_oTrunk);
	static bool formatTrunkAccNBR(EventSection *_poEventSection);
	
    //##ModelId=427AE7520204
    //##Documentation
    //## 根据被叫号码规整网络承载类型
    //## 获取网络承载类型、去除号码相应的字冠
    static void formatCarrier(EventSection *_poEventSection);

    //##ModelId=427B155301D6
    //##Documentation
    //## 规整出入中继类型
    static void formatTrunkTypeID(EventSection *_poEventSection);
    static bool  getPhysicsNbr(EventSection *_poEventSection);

    //##ModelId=427B1EE20076
    //##Documentation
    //## 规整业务信息： 包括主、被叫的运营商、业务类型信息
    static void formatServiceInfo(EventSection *_poEventSection);
    
    static void formatServiceInfo2(EventSection *_poEventSection);

	//规整业务信息:包括主、被叫的运营商、业务类型信息(使用原来的判断逻辑不再使用CALL_TYPE_ID来判断计费方);
	static void formatServiceInfo2_Old(EventSection *_poEventSection);

    //##ModelId=427B20FD028E
    //##Documentation
    //## 先后规整事件的 漫游、长途类型
    static void formatRoamAndLongType(EventSection *_poEventSection);

	static void getVisitAreaCodeOf3G(EventSection *_poES);
	static void judgeEdgeRoamOf3G(EventSection *_poES);
	static void getRoamTypeOf3G(EventSection *_poES);
	static void getMOCLongTypeOf3G(EventSection *_poES);
	static void getMTCLongTypeOf3G(EventSection *_poES);
	static void getFORWARDLongTypeOf3G(EventSection *_poES);

	//## 先后规3G业务的 漫游、长途类型
	static void formatRoamAndLongTypeOf3G(EventSection *_poEventSection);

    //##ModelId=427B21E60370
    //##Documentation
    //## 规整主被叫号码的区号
    static void formatAreaCode(EventSection *_poEventSection);
    static void format_AreaCode_V2(EventSection *_poEventSection);

    //##ModelId=427B4AA501F2
    static void formatAccNBR(char* _sAccNBR, char* _sAreaCode, 
        //##Documentation
        //## 当前号码是主叫还是被叫,主叫-1, 被叫-2
        int _iCallerOrCalled, int _iSwitchID);

    static void format_AccNBR_V2 (char* _sAccNBR, char* _sAreaCode, 
        int _iCallerOrCalled, int _iSwitchID);

    //##ModelId=427B9CC600EB
    //##Documentation
    //## 截取号码区号
    //## 输入参数： _sAccNBR(输入的原始号码)
    //## 输出参数： _sAreaCode(根据原始号码_sAccNBR得到的区号)
    static bool interceptAreaCode(char* _sAccNBR, char* _sAreaCode, int &_iLongGroupType);

	static int interceptAreaCodeCycle(char* _sAccNBR, char* _sAreaCode, int &_iLongGroupType);
	
    //##ModelId=427C5B31006D
    static void loadSwitchInfo();

    //##ModelId=427C5B6003BD
    static void unloadSwitchInfo();

    //##ModelId=427C5B6D0091
    static bool getSwitchInfoBySwitchID(
        //##Documentation
        //## 输入参数: 交换机ID
        int _iSwitchID, 
        //##Documentation
        //## 输出参数, 交换机信息
        TSwitchInfo* _pSwitchInfo);

    static bool getSwitchInfoBySwitchOPC(char *_sOpcCode, TSwitchInfo* _pSwitchInfo);

    //##ModelId=427C96D00121
    //##Documentation
    //## 获取漫游类型
    static void getRoamType(EventSection *_poEventSection);

    //##ModelId=427C9762021B
    static void getLongType(EventSection *_poEventSection, int _iLongGroupType);

    static int filter(EventSection *_poEventSection);
    static int customFilter(EventSection *_poEventSection);



    //##ModelId=4281CFED0068
    //##Documentation
    //## 规整详细的长途事件类型
    static bool formatLongEventType(EventSection *_poEventSection);

    //##ModelId=4281D05B028D
    static bool formatLocalEventType(EventSection *_poEventSection);

	//此函数为了正确获得用户资料从而得到其正确开始时间；
	//因为代收事件可能没有开始时间，无法正确正确获得用户资料；
	//而且代收用户可能改号，所以开始时间需要验证是取帐期开始时间还是去结束时间；
	//系统在规整的初步，给事件加上帐期开始时间和结束时间，分别加在开始时间和结束时间2个字段上；
	//该函数先用帐期结束时间去尝试用户资料；
	//如果不成功，那么用帐期开始时间去尝试用户资料；
    static void getStartDateForDS(EventSection *_poEventSection);

//____________________________________________
	static void loadVisitAreaCode();
	static void unloadVisitAreaCode();
	static bool getVisitAreaCodeRule(char* _sKey, VisitAreaCodeRule *_pRule);
	static bool getVisitAreaCodeByMSC(char* _sMSC, char* _sLAC, char* _sCellID,char *_sEdgeRoam);

	static void loadEdgeRoam();
	static void unloadEdgeRoam();
	static bool getEdgeRoamRule(char* _sKey, EdgeRoamRule *_pRule);
	static bool getEdgeRoamByMSC(char* _sMSC, char* _sLAC, char* _sCellID,char *_sEdgeRoam);
//____________________________________________

    //规整代收事件类型
    static void loadSwitchItemType();
    static void unloadSwitchItemType();
    static void formatSwitchItem(EventSection *_pEvt);
    
    //省内区号
    static void loadLocalAreaCode();
    static void formatLocalAreaCode(EventSection *_poEventSection);

    //add by yangks 2006.12.31  增加跳次计算功能(河北需求)
    //规整跳次
    static void loadTimesType();
    static void unloadTimesType();
    static void formatTimes(EventSection *_pEvt);

    //根据交换机标识查找交换机类型
    static int getSwitchTypeID(int _iSwitchID);
    
    
    //根据物理号码规整出业务号码(逻辑号码), 目前只针对主叫号码进行转换
    static void convertPhyNbrToLogicNbr (EventSection *_poEventSection);

    static void convertMobNbrToLogicNbr (EventSection *_poEventSection);
  private:
  	static KeyTree<int>* m_poTimesType;

    //##ModelId=4279B29B011D
    //##Documentation
    //## 根据key，取得相应的中继类型信息
    static bool getTrunkByKey(
        //##Documentation
        //## switch_id||'+'||trunk_code||'+'||trunk_side
        char *skey, 
        //##Documentation
        //## 返回的Trunk
        Trunk *pTrunk);

    //##ModelId=4279B41E02B4
    static KeyTree<Trunk>* m_poTrunkTree;
	
	static KeyTree<TServiceInfo2>* m_poServiceInfo;
	
	static LocalHeadMgr *m_poLocalHeadMgr;
	
    //##ModelId=4279D0650064
    //##Documentation
    //## 区号管理(通过区号求长途组类型)
    static KeyTree<int>* m_pAreaCode;

    //##ModelId=4279D44A02E9
    //##Documentation
    //## 移动号段管理(通过号段求区号)
    static KeyTree<HLR>* m_pHLR;

//__________________________________________________________
	//##Doc
	//## 到访地区号规则
	static KeyTree<VisitAreaCodeRule>* m_pVisitAreaCode;
	
	//## 边界漫游规则
	static KeyTree<EdgeRoamRule>* m_pEdgeRoam;
//__________________________________________________________
	
    //##ModelId=4279E935022A
    //##Documentation
    //## 承载类型管理(根据承载业务号头获取承载类型)
    static KeyTree<int>* m_pCarrier;

    //##ModelId=427B0F7A0057
    //##Documentation
    //## 网络承载类型的字冠最大长度 select max(length(precode)) length from b_carrier
    static int m_iMaxPreCodeLen;

    //##ModelId=427B0F990265
    //##Documentation
    //## 网络承载类型的字冠最小长度 select min(length(precode)) length from b_carrier
    static int m_iMinPreCodeLen;

    //##ModelId=427B3DF0029F
    static TServiceInfo* m_aServiceInfo;
    
    static PNSegBilling* m_aPNSegBilling;
    
    //##ModelId=427B3E34026B
    static int m_iMaxAreaCodeLen;

    //##ModelId=427B3E4802E1
    static int m_iMinAreaCodeLen;

    //##ModelId=427C2957029D
    static int m_iMaxSegCodeLen;

    //##ModelId=427C29730095
    static int m_iMinSegCodeLen;
	static unsigned int iMaxPreCodeLen;
    static unsigned int iMinPreCodeLen;
    static unsigned int iMaxAreaCodeLen;
    static unsigned int iMinAreaCodeLen;
    static unsigned int iMaxSegCodeLen;
    static unsigned int iMinSegCodeLen;

    //##ModelId=427C5AD6010C
    static TSwitchInfo* m_aSwitchInfo;

    //##ModelId=427C5BD00274
    //##Documentation
    //## 为 m_aSwitchInfo的下标建树,按switch_id
    static KeyTree<int>* m_pSwitchInfoPosTree;
    
    static KeyTree<int>* m_pSwitchOPCInfoTree;

    //##ModelId=427C71EC0042
    static int m_iServiceInfoCnt;
    
    static int m_iPNSegBillingCnt;

    //##ModelId=427C727F00E3
    static int m_iSwitchInfoCnt;
    
    static OrgMgr * m_poOrgMgr;
    
    //## 是否做区号循环匹配(0-not, 1-do)
    static int m_bAreaCodeCycleFit;
    
    //## 做循环区号匹配时, 标识取最前面的区号(1),还是取最后的区号(0), 
    //#  当m_bAreaCodeCycleFit=ture 时有效
    static int m_iSelAreaPart;

    static FilterRule * m_poFilterRule;

    static CustomFilter * m_poCustomFilter;
    
    //##入中继
    static KeyTree<TrunkBilling>* m_poTrunkBilling;
        
    //##交换机帐目类型对照
    static KeyTree<SwitchItemType>* m_poSwitchItemTypeTree;

	//##省内区号组
    static vector<string> m_strLocalAreaCode;  //省内区号组            
    
    static int m_iCallingOrgIDRule;
    static int m_iCalledOrgIDRule;
    
    static int m_iTrimMobHeadZero; //标志是否截掉手机号码前的0
};

#endif /* FORMATMETHOD_H_HEADER_INCLUDED_BD84F3E0 */
