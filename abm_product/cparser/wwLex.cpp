/*VER: 1*/ 
#define YY_CHAR unsigned char
#line 1 "/usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /home/cvs/cvsroot/TIBS_HOME/src/cparser/wwLex.cpp,v 1.1.1.1 2006/05/21 19:27:38 cvs Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
//#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "wwLex.l"
#define INITIAL 0
/************************************************
  Copyright by Wholewise  2002
  File Name: wwLex.h
  Created Date: 2002.08.01
  Author: xiaozc
  Version: 0.0.01
  Create Version: 0.0.01
  Last Version Date: 2002.08.01
  Create Version Date: 2002.08.01

  Modify Date: 2005.09.21
  ruanyj
  version: 0.0.02
  content: T123_45_234
 ***********************************************/
/*头部定义*/
/*词法解析器类名*/
#define YY_wwLex_FLEX_SCANNER
#line 21 "wwLex.l"
#include <stdlib.h>
#include <list>
#include "wwParser.h"
/*新增方法定义*/
/*%define INHERIT*/
/*包含wwParser.h,取得TOKEN定义*/
/*词法规则定义*/
#include "wwLex.h"
#line 66 "wwLex.l"
#line 196 "/usr/local/lib/flexskel.cc"

#define yy___text YY_wwLex_TEXT
#define yy___leng YY_wwLex_LENG
#define yy___in YY_wwLex_IN
#define yy___out YY_wwLex_OUT
#define yy___newfile \
	do \
		{ \
		YY_wwLex_INIT_BUFFER( yy_current_buffer, yy___in ); \
		YY_wwLex_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_wwLex_DEBUG != 0
#define yy___flex_debug YY_wwLex_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_wwLex_ECHO
#define yy___input YY_wwLex_INPUT
#define yy___fatal_error YY_wwLex_FATAL_ERROR
#define yy___wrap YY_wwLex_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_wwLex_CHAR *yy_ch_buf;               /* input buffer */
    YY_wwLex_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_wwLex_DEBUG != 0
int YY_wwLex_DEBUG_FLAG=YY_wwLex_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER yy_current_buffer
static YY_BUFFER_STATE yy_current_buffer;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_wwLex_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_wwLex_CHAR *yy___text;
int yy___leng;

FILE *yy___in = (FILE *) 0, *yy___out = (FILE *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_wwLex_CHAR *yy_c_buf_p = (YY_wwLex_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_wwLex_CHAR c, YY_wwLex_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_wwLex_ECHO_NOCODE
void YY_wwLex_CLASS::yy___echo()
{YY_wwLex_ECHO_CODE
}
#endif
#ifndef YY_wwLex_INPUT_NOCODE
int  YY_wwLex_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_wwLex_INPUT_CODE
}
#endif
#ifndef YY_wwLex_FATAL_ERROR_NOCODE
void YY_wwLex_CLASS::yy___fatal_error(char *msg)
{YY_wwLex_FATAL_ERROR_CODE
}
#endif
#ifndef YY_wwLex_WRAP_NOCODE
int  YY_wwLex_CLASS::yy___wrap()
{YY_wwLex_WRAP_CODE
}
#endif
void YY_wwLex_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 yy_current_buffer=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_wwLex_DEBUG != 0
 YY_wwLex_DEBUG_FLAG=YY_wwLex_DEBUG_INIT;
#endif
}

YY_wwLex_CLASS::YY_wwLex_CLASS(YY_wwLex_CONSTRUCTOR_PARAM) YY_wwLex_CONSTRUCTOR_INIT
{yy_initialize();
 YY_wwLex_CONSTRUCTOR_CODE;
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 58
typedef int yy_state_type;
static const short int yy_accept[131] =
    {   0,
        0,    0,   58,   56,   55,   55,   46,   56,   51,   56,
       56,   42,   43,   49,   48,   39,   47,   54,   50,   21,
       21,   40,   36,   52,   41,   53,   16,   16,   16,   44,
       45,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       37,   56,   38,   35,    0,   27,    0,   30,    0,    0,
       28,   29,   25,    1,   26,   19,    0,   21,    0,   21,
       32,   34,   33,   16,   15,   14,   16,   16,    8,   16,
       16,    5,   16,   16,   16,   16,   31,   23,    0,   25,
       25,    0,   26,   19,    0,   24,   17,   15,   16,   16,
       16,   16,    6,   16,    9,   16,   16,   16,    0,   25,

        0,   25,    0,   26,   24,   17,   16,   16,   16,    4,
       16,   16,   16,   16,    0,   25,    2,   16,   16,   13,
       16,   16,    7,   16,   10,   12,   11,   16,    3,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   24,   24,   24,   25,   26,
       27,   27,   27,   27,   27,   28,   27,   27,   27,   27,
       27,   27,   29,   30,   31,   27,   27,   32,   27,   27,
       33,   34,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   27,   46,   47,   27,   48,
       49,   50,   27,   51,   52,   53,   54,   27,   55,   32,
       27,   27,   56,   57,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    4,    4,    4,    4,
        4,    4,    1,    1,    1,    4,    3,    3,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1
    } ;

static const short int yy_base[135] =
    {   0,
        0,    0,  252,  253,  253,  253,  229,   54,  253,  243,
      215,  253,  253,  253,  232,  253,  223,   43,  225,   74,
       45,  253,  253,  212,  210,  209,    0,  200,   47,  253,
      253,  177,  178,  177,  177,  174,   24,  168,  168,  176,
      253,  156,  253,  253,   62,  253,  209,  253,   60,   66,
      253,  253,   83,  253,  101,  134,   61,   56,    0,    0,
      253,  253,  253,    0,   53,   68,  170,  159,  150,  141,
      141,    0,   40,  138,  139,  144,  253,  253,  119,  253,
      129,  127,  253,  125,   63,  156,  133,   80,  146,  125,
      139,  128,    0,  114,    0,  117,  121,  116,   95,  168,

      183,  253,   99,  188,  253,  171,  114,  113,  103,    0,
       87,   84,   87,   93,  105,  191,    0,   84,   79,    0,
       61,   64,    0,   41,    0,    0,    0,   41,    0,  253,
      238,  242,  244,   73
    } ;

static const short int yy_def[135] =
    {   0,
      130,    1,  130,  130,  130,  130,  130,  131,  130,  130,
      132,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       20,  130,  130,  130,  130,  130,  133,  133,  133,  130,
      130,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      130,  130,  130,  130,  131,  130,  131,  130,  132,  132,
      130,  130,  130,  130,  130,  130,  130,  130,  134,   21,
      130,  130,  130,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  134,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  130,  130,

      130,  130,  130,  130,  130,  130,  133,  133,  133,  133,
      133,  133,  133,  133,  130,  130,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,    0,
      130,  130,  130,  130
    } ;

static const short int yy_nxt[312] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   27,   27,   27,   28,   29,
       27,   27,   30,    4,   31,   27,   27,   32,   33,   34,
       35,   36,   27,   27,   37,   27,   27,   27,   38,   27,
       27,   39,   27,   27,   40,   41,   42,   43,   46,   53,
       53,   60,   60,   66,   66,   72,   46,   78,  130,   88,
       88,   73,   85,   49,   85,   87,  130,   86,   86,   86,
       86,  129,   66,   58,   66,   66,   58,   47,   55,   94,
       56,   56,   95,   50,  128,   47,   88,   88,   57,   53,

       53,   58,   58,   66,   58,   59,  127,   79,   80,   58,
       80,  100,  100,  126,   57,  104,  104,   81,   81,  125,
       58,  116,  116,   79,   80,   82,   83,   58,   83,   80,
       99,  124,   99,  123,  122,  100,  100,  121,  103,  120,
      103,   82,   83,  104,  104,   81,   81,   83,   55,  119,
       56,   56,   84,  101,  102,   84,  102,  118,   57,  117,
      106,   84,  114,  106,   84,  113,  112,  111,  110,  101,
      102,   84,   86,   86,   57,  102,  109,  108,   84,  106,
       84,  105,  107,  105,  100,  100,  106,   84,   98,   97,
       96,   93,   92,   80,  115,   80,  115,  105,  106,  116,

      116,  106,  105,   91,  104,  104,   90,  116,  116,   80,
       89,  130,   77,   83,   80,   83,  102,  106,  102,   76,
       75,   74,   71,   70,  106,   69,   68,   67,   65,   83,
       63,   62,  102,   61,   83,   54,   52,  102,   45,   45,
       45,   45,   49,   51,   49,   49,   64,   64,   50,   48,
       44,  130,    3,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130
    } ;

static const short int yy_chk[312] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    8,   18,
       18,   21,   21,   29,   29,   37,   45,   49,   50,   65,
       65,   37,   57,   50,   57,  134,   21,   57,   57,   85,
       85,  128,   29,   58,   66,   66,   58,    8,   20,   73,
       20,   20,   73,   49,  124,   45,   88,   88,   20,   53,

       53,   20,   58,   66,   20,   20,  122,   53,   53,   58,
       53,   99,   99,  121,   20,  103,  103,   55,   55,  119,
       20,  115,  115,   53,   53,   55,   55,   20,   55,   53,
       79,  118,   79,  114,  113,   79,   79,  112,   82,  111,
       82,   55,   55,   82,   82,   81,   81,   55,   56,  109,
       56,   56,   84,   81,   81,   84,   81,  108,   56,  107,
       87,   56,   98,   87,   56,   97,   96,   94,   92,   81,
       81,   84,   86,   86,   56,   81,   91,   90,   84,   87,
       56,   86,   89,   86,  100,  100,   87,   56,   76,   75,
       74,   71,   70,  100,  101,  100,  101,   86,  106,  101,

      101,  106,   86,   69,  104,  104,   68,  116,  116,  100,
       67,   47,   42,  104,  100,  104,  116,  106,  116,   40,
       39,   38,   36,   35,  106,   34,   33,   32,   28,  104,
       26,   25,  116,   24,  104,   19,   17,  116,  131,  131,
      131,  131,  132,   15,  132,  132,  133,  133,   11,   10,
        7,    3,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_wwLex_DEBUG != 0
static const short int yy_rule_linenum[57] =
    {   0,
       67,   69,   70,   71,   72,   73,   74,   75,   77,   78,
       79,   80,   81,   83,   84,   86,   88,   89,   90,   91,
       92,   93,   94,   96,   97,   98,  100,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  130,  131
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 369 "/usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_wwLex_LEX_DEFINED
YY_wwLex_LEX_RETURN YY_wwLex_LEX ( YY_wwLex_LEX_PARAM )
YY_wwLex_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_wwLex_LEX_RETURN YY_wwLex_CLASS::YY_wwLex_LEX ( YY_wwLex_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_wwLex_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 

/* % end of prolog */ 
#line 394 "/usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = stdin;

	if ( ! yy___out )
	    yy___out = stdout;

	if ( yy_current_buffer )
	    YY_wwLex_INIT_BUFFER( yy_current_buffer, yy___in );
	else
	    yy_current_buffer = YY_wwLex_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_wwLex_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 422 "/usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 131 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 130 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 433 "/usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 436 "/usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_wwLex_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
			fprintf( stderr, "--scanner backtracking\n" );
		else if ( yy_act < YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
		else if ( yy_act == YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
		else if ( yy_act == YY_END_OF_BUFFER )
			fprintf( stderr, "--(end of buffer or a NUL)\n" );
		else
			fprintf( stderr, "--EOF\n" );
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 67 "wwLex.l"
{ comment(); }
	YY_BREAK
case 2:
#line 69 "wwLex.l"
{ wwCount(); return(wwParser::BREAK); }
	YY_BREAK
case 3:
#line 70 "wwLex.l"
{ wwCount(); return(wwParser::CONTINUE); }
	YY_BREAK
case 4:
#line 71 "wwLex.l"
{ wwCount(); return(wwParser::ELSE); }
	YY_BREAK
case 5:
#line 72 "wwLex.l"
{ wwCount(); return(wwParser::IF); }
	YY_BREAK
case 6:
#line 73 "wwLex.l"
{ wwCount(); return(wwParser::FOR); }
	YY_BREAK
case 7:
#line 74 "wwLex.l"
{ wwCount(); return(wwParser::WHILE); }
	YY_BREAK
case 8:
#line 75 "wwLex.l"
{ wwCount(); return(wwParser::DO); }
	YY_BREAK
case 9:
#line 77 "wwLex.l"
{ wwCount(); return(wwParser::TYPE_INT); }
	YY_BREAK
case 10:
#line 78 "wwLex.l"
{ wwCount(); return(wwParser::TYPE_DOUBLE); }
	YY_BREAK
case 11:
#line 79 "wwLex.l"
{ wwCount(); return(wwParser::TYPE_STRING); }
	YY_BREAK
case 12:
#line 80 "wwLex.l"
{ wwCount(); return(wwParser::OUTPUT);}
	YY_BREAK
case 13:
#line 81 "wwLex.l"
{ wwCount(); return(wwParser::INPUT);}
	YY_BREAK
case 14:
#line 83 "wwLex.l"
{ wwCount();char * s =strdup((char *)yytext);  val->s_val=s; str_list.push_back(s) ; return(wwParser::SYS_INPUT);}
	YY_BREAK
case 15:
#line 84 "wwLex.l"
{ wwCount();char * s =strdup((char *)yytext);  val->s_val=s; str_list.push_back(s) ; return(wwParser::SYS_INPUTS);}
	YY_BREAK
case 16:
#line 86 "wwLex.l"
{ wwCount(); char * s =strdup((char *)yytext);  val->s_val=s; str_list.push_back(s) ;return(wwParser::IDENTIFIER); }
	YY_BREAK
case 17:
#line 88 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext); return(wwParser::CONSTANT); }
	YY_BREAK
case 18:
#line 89 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 19:
#line 90 "wwLex.l"
{ wwCount();  val->f_val = atof((char *)yytext);   return(wwParser::CONSTANT); }
	YY_BREAK
case 20:
#line 91 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 21:
#line 92 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 22:
#line 93 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 23:
#line 94 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 24:
#line 96 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 25:
#line 97 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 26:
#line 98 "wwLex.l"
{ wwCount(); val->f_val = atof((char *)yytext);return(wwParser::CONSTANT); }
	YY_BREAK
case 27:
#line 100 "wwLex.l"
{ wwCount(); yytext[ strlen( (char *)yytext)-1]='\0';yytext[0]='\0'; char * s =strdup((char *)yytext+1);  val->s_val=s; str_list.push_back(s) ;  return(wwParser::STRING_LITERAL); }
	YY_BREAK
case 28:
#line 102 "wwLex.l"
{ wwCount(); return(wwParser::INC_OP); }
	YY_BREAK
case 29:
#line 103 "wwLex.l"
{ wwCount(); return(wwParser::DEC_OP); }
	YY_BREAK
case 30:
#line 104 "wwLex.l"
{ wwCount(); return(wwParser::AND_OP); }
	YY_BREAK
case 31:
#line 105 "wwLex.l"
{ wwCount(); return(wwParser::OR_OP); }
	YY_BREAK
case 32:
#line 106 "wwLex.l"
{ wwCount(); return(wwParser::LE_OP); }
	YY_BREAK
case 33:
#line 107 "wwLex.l"
{ wwCount(); return(wwParser::GE_OP); }
	YY_BREAK
case 34:
#line 108 "wwLex.l"
{ wwCount(); return(wwParser::EQ_OP); }
	YY_BREAK
case 35:
#line 109 "wwLex.l"
{ wwCount(); return(wwParser::NE_OP); }
	YY_BREAK
case 36:
#line 110 "wwLex.l"
{ wwCount(); return(';'); }
	YY_BREAK
case 37:
#line 111 "wwLex.l"
{ wwCount(); return('{'); }
	YY_BREAK
case 38:
#line 112 "wwLex.l"
{ wwCount(); return('}'); }
	YY_BREAK
case 39:
#line 113 "wwLex.l"
{ wwCount(); return(','); }
	YY_BREAK
case 40:
#line 114 "wwLex.l"
{ wwCount(); return(':'); }
	YY_BREAK
case 41:
#line 115 "wwLex.l"
{ wwCount(); return('='); }
	YY_BREAK
case 42:
#line 116 "wwLex.l"
{ wwCount(); return('('); }
	YY_BREAK
case 43:
#line 117 "wwLex.l"
{ wwCount(); return(')'); }
	YY_BREAK
case 44:
#line 118 "wwLex.l"
{ wwCount(); return('['); }
	YY_BREAK
case 45:
#line 119 "wwLex.l"
{ wwCount(); return(']'); }
	YY_BREAK
case 46:
#line 120 "wwLex.l"
{ wwCount(); return('!'); }
	YY_BREAK
case 47:
#line 121 "wwLex.l"
{ wwCount(); return('-'); }
	YY_BREAK
case 48:
#line 122 "wwLex.l"
{ wwCount(); return('+'); }
	YY_BREAK
case 49:
#line 123 "wwLex.l"
{ wwCount(); return('*'); }
	YY_BREAK
case 50:
#line 124 "wwLex.l"
{ wwCount(); return('/'); }
	YY_BREAK
case 51:
#line 125 "wwLex.l"
{ wwCount(); return('%'); }
	YY_BREAK
case 52:
#line 126 "wwLex.l"
{ wwCount(); return('<'); }
	YY_BREAK
case 53:
#line 127 "wwLex.l"
{ wwCount(); return('>'); }
	YY_BREAK
case 54:
#line 128 "wwLex.l"
{ wwCount(); return('.'); }
	YY_BREAK
case 55:
#line 130 "wwLex.l"
{ wwCount(); }
	YY_BREAK
case 56:
#line 131 "wwLex.l"
{ /* ignore bad characters */ }
	YY_BREAK
case 57:
#line 134 "wwLex.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 463 "/usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 511 "/usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_wwLex_DEBUG != 0
		fprintf(stderr, "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_wwLex_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_wwLex_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_wwLex_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_wwLex_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_wwLex_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 683 "/usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 131 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 687 "/usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_wwLex_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 131 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 130);
#line 721 "/usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_wwLex_CHAR c, register YY_wwLex_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_wwLex_CHAR c;
register YY_wwLex_CHAR *yy_bp;
#endif
#else
void YY_wwLex_CLASS::yyunput( YY_wwLex_CHAR c, YY_wwLex_CHAR *yy_bp )
#endif

    {
    register YY_wwLex_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_wwLex_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_wwLex_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_wwLex_CLASS::input()
#endif
    {
    int c;
    YY_wwLex_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_wwLex_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_wwLex_RESTART( FILE *input_file )
#else
void YY_wwLex_RESTART( input_file )
FILE *input_file;
#endif
#else
void YY_wwLex_CLASS::YY_wwLex_RESTART ( FILE *input_file )
#endif

    {
    YY_wwLex_INIT_BUFFER( yy_current_buffer, input_file );
    YY_wwLex_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_wwLex_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_wwLex_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_wwLex_CLASS::YY_wwLex_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    YY_wwLex_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_wwLex_LOAD_BUFFER_STATE( void )
#else
void YY_wwLex_LOAD_BUFFER_STATE()
#endif
#else
void YY_wwLex_CLASS::YY_wwLex_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy___text = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yy___in = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_wwLex_CREATE_BUFFER( FILE *file, int size )
#else
YY_BUFFER_STATE YY_wwLex_CREATE_BUFFER( file, size )
FILE *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_wwLex_CLASS::YY_wwLex_CREATE_BUFFER( FILE *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_wwLex_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_wwLex_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_wwLex_CREATE_BUFFER()" );

    YY_wwLex_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_wwLex_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_wwLex_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_wwLex_CLASS::YY_wwLex_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_wwLex_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file )
#else
void YY_wwLex_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
#else
void YY_wwLex_CLASS::YY_wwLex_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 134 "wwLex.l"


void wwLex::comment()
{
	unsigned char c, c1;

loop:
	while ((c = yyinput()) != '*' && c > 0)
		cout<<c;

	if ((c1 = yyinput()) != '/' && c > 0)
	{
		yyunput(c1,yy_c_buf_p);
		goto loop;
	}

	if (c > 0)
		cout<<c;
	return;	
}

void wwLex::wwCount()
{
	int i;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
			{cur_column = 0; cur_line++;}
		else if (yytext[i] == '\t')
			{cur_column += 8 - (cur_column % 8);}
		else
			cur_column++;

	return;
}

/*重定义输入函数*/
int wwLex::Input(char * buf, int & result, int max_size)
{
	if ( input_cur_pos == input_len){
		result=0;
		return 0;
	};
	
	for ( result=0;input_cur_pos<input_len && result<=max_size; result++){
		buf[result] = input_buf[input_cur_pos++];
	}
	return 0;
}


bool wwLex::SetBuf(char * buf,int size)
{
	input_len = 0;
	input_cur_pos = 0;
	cur_line = 1;
	cur_column = 0;
	
	if ( size > INPUT_BUFFER_SIZE)
		return false;
	
	for ( input_len=0; input_len<size; input_len++){
		input_buf[input_len] = buf[input_len];
	}
	return true;
}

