#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string>
#include <errno.h>
#include <sys/timeb.h>
#include "DccMsgParser.h"
#include <vector>
//#include "dccpublic.h"
//#include "dccstruct.h"
//#include "dccCfg.h"

#define MAXSIZE 1024

using namespace std;

int          iVar;
long         lVar;
ACE_UINT32   U32Var;
ACE_UINT64   U64Var;
std::string       sVar;


//≤‚ ‘”√µƒ

struct subCCAinfo{
   char Request_Id[40];
   int  Destination_Type;
   char Destination_Account[40];
   long Destination_Attr;
   char Service_Platform_ID[40];
   long QueryType;
};

struct allCCAinfo{
	char Session_Id[40];
	char Origin_Host[50];
	char Origin_Realm[40];
	char Destination_Host[40];
	char Destination_Realm[40];
	int Auth_Application_Id;
	char Service_Context_Id[40];
	char Service_Flow_Id[40];
	char OutPlatformDescription[40];
	int CC_Request_Number;
	int CC_Request_Type;
	int Requested_Action;
	vector <subCCAinfo> ttvecC;
};



void disp_buf(char *buf, int size)
{
  int i;
  printf("buf [%d] start:\n", size);
  for( i = 0 ; i < size; i ++ )
  {
  	if( i%16 == 0 )
  		{
  		   printf("\n");
  		}
  	printf("%02X ", buf[i]&0xff);
  }
  printf("\nbuf end\n");
}

void packQryUserQ(DccMsgParser *poDcc)
{
    sVar.assign("request-20110505150000");
    poDcc->setAvpValue("Service-Information.Request-Id", sVar);
    
    iVar = 1;
    poDcc->setAvpValue("Service-Information.Destination-Type", iVar);
    
    sVar.assign("18955558888");
    poDcc->setAvpValue("Service-Information.Destination-Account", sVar);
    
    iVar = 2;
    poDcc->setAvpValue("Service-Information.Destination-Attr", iVar);
    
    sVar.assign("platform--02");
    poDcc->setAvpValue("Service-Information.Service_Platform_ID", sVar);
    
    U32Var = 2;
    poDcc->setAvpValue("Service-Information.QueryType", U32Var);
    
    return;
}

void packQryUserA(DccMsgParser *poDcc)
{
    sVar.assign("reapond-20110506");
    poDcc->setAvpValue("Service-Information.ResponseId", sVar);
    
    U32Var = 0;
    poDcc->setAvpValue("Service-Information.Service-Result-Code", U32Var);
    
    U64Var = 10000;
    poDcc->setAvpValue("Service-Information.Data-Information.ServId", U64Var);
    
    U64Var = 20000;
    poDcc->setAvpValue("Service-Information.Data-Information.LocalServId", U64Var);
    
    U64Var = 30000;
    poDcc->setAvpValue("Service-Information.Data-Information.AcctId", U64Var);
    
    U32Var = 1000;
    poDcc->setAvpValue("Service-Information.Data-Information.ProductId", U32Var);
    
    U32Var = 25;
    poDcc->setAvpValue("Service-Information.Data-Information.HomeAreaCode", U32Var);
    
    sVar.assign("18955558888");
    poDcc->setAvpValue("Service-Information.Data-Information.Random-AccNbr", sVar);
    
    sVar.assign("0");
    poDcc->setAvpValue("Service-Information.Data-Information.ServState", sVar);
    
    sVar.assign("20110506143000");
    poDcc->setAvpValue("Service-Information.Data-Information.StateDate", sVar);
    
    sVar.assign("0");
    poDcc->setAvpValue("Service-Information.Data-Information.PaymentFlag", sVar);
    
    return;
}

int main(int argc,char* argv[])
{
    
    char sDictFile[256];
    char *p;
    int iResult;
    std::string sResult;
    DccMsgParser *poOcpMsgParser;
    

    /*string sSessionID="SCP001.chinatelecom.com;3463088662;9999999999;00000001";
    string sOrgHost="SCP001.chinatelecom.com";
    string sOrgRealm="chinatelecom.com";
    string sDestRealm="www.lianchuang.com";
    string sServContext="voice@chinatelecom.com";*/
 
#ifdef TEST_EFFORT
   struct timeval start_timeval , end_timeval;
   long diff_time = 0;
#endif   
    /*
    if ((p=getenv ("ABMAPP_DEPLOY")) == NULL)
    {
      cout<<"Please set env value ABM_HOME. For example  export ABM_HOME=/home/abm/ABM_HOME"<<endl;
      return -1;
	}
	sprintf (sDictFile, "%s/config/dictionary.xml", p);
	*/
	sprintf(sDictFile, "/abmapp/hss/app/dccparser/telecom/dictionary.xml");
    

    poOcpMsgParser = new DccMsgParser(sDictFile);
    if (poOcpMsgParser == NULL) {
        cout<<"new error"<<endl;
        exit(-1);
    }
    poOcpMsgParser->setDiameterHeader(272,true,4,3,4);
    //poOcpMsgParser->setDiameterHeader(272,false,4,3,4);
    poOcpMsgParser->releaseMsgAcl();
    
    
#ifdef TEST_EFFORT
      gettimeofday(&start_timeval, NULL);
#endif

    // set_avp_value
    //============================================================
    
    sVar.assign("session");
    poOcpMsgParser->setAvpValue("Session-Id",sVar);
    sVar.assign("SCP001.chinatelecom.com");
    poOcpMsgParser->setAvpValue("Origin-Host",sVar);
    sVar.assign("www.abc.com");
    poOcpMsgParser->setAvpValue("Origin-Realm",sVar);
    sVar.assign("ocs2");
    poOcpMsgParser->setAvpValue("Destination-Host",sVar);
    sVar.assign("www.lianchuang.com");
    poOcpMsgParser->setAvpValue("Destination-Realm",sVar);
    iVar=4;
    poOcpMsgParser->setAvpValue("Auth-Application-Id",iVar);
    sVar.assign("voice@chinatelecom.com");
    poOcpMsgParser->setAvpValue("Service-Context-Id",sVar);
    sVar.assign("srv_flow_id");
    poOcpMsgParser->setAvpValue("Service-Flow-Id",sVar);
    sVar.assign("platform-desc");
    poOcpMsgParser->setAvpValue("OutPlatformDescription", sVar);
    iVar=0;
    poOcpMsgParser->setAvpValue("CC-Request-Number",iVar);
    iVar=4;
    poOcpMsgParser->setAvpValue("CC-Request-Type",iVar);
    iVar = 113;
    poOcpMsgParser->setAvpValue("Requested-Action", iVar);
    /*
    sVar.assign("session");
    poOcpMsgParser->setAvpValue("Session-Id",sVar);
    U32Var = 0;
    poOcpMsgParser->setAvpValue("Result-Code", U32Var);
    sVar.assign("flow-000001");
    poOcpMsgParser->setAvpValue("Service-Flow-Id", sVar);
    sVar.assign("plat-info");
    poOcpMsgParser->setAvpValue("OutPlatformDescription", sVar);
    sVar.assign("SCP001.chinatelecom.com");
    poOcpMsgParser->setAvpValue("Origin-Host",sVar);
    sVar.assign("www.abc.com");
    poOcpMsgParser->setAvpValue("Origin-Realm",sVar);
    iVar=4;
    poOcpMsgParser->setAvpValue("Auth-Application-Id",iVar);
    iVar=0;
    poOcpMsgParser->setAvpValue("CC-Request-Number",iVar);
    iVar=4;
    poOcpMsgParser->setAvpValue("CC-Request-Type",iVar);
    */
    packQryUserQ(poOcpMsgParser);
    //packQryUserA(poOcpMsgParser);
    //=============================================================
    //end set_avp_value

#ifdef TEST_EFFORT
        gettimeofday(&end_timeval, NULL);
        std::cout << "########:setAvpValue---period:[" << ((end_timeval.tv_sec- start_timeval.tv_sec)*1000000 + end_timeval.tv_usec - start_timeval.tv_usec ) /1000 
  			        << " ms]-[" << ((end_timeval.tv_sec- start_timeval.tv_sec)*1000000 + end_timeval.tv_usec - start_timeval.tv_usec )  << " us]" << std::endl; 
        diff_time += ((end_timeval.tv_sec- start_timeval.tv_sec)*1000000 + end_timeval.tv_usec - start_timeval.tv_usec );
        gettimeofday(&start_timeval, NULL);
#endif

    sResult.clear();
    iResult=poOcpMsgParser->parseAppToRaw(sResult);
    if (iResult<=0){
    	printf("pack error.\n");
    	delete poOcpMsgParser;
    	exit(1);
    }
    disp_buf((char *)sResult.c_str(),sResult.size());
    
#ifdef TEST_EFFORT
        gettimeofday(&end_timeval, NULL);
        std::cout << "########:parserApptoRaw---period:[" << ((end_timeval.tv_sec- start_timeval.tv_sec)*1000000 + end_timeval.tv_usec - start_timeval.tv_usec ) /1000 
  			        << " ms]-[" << ((end_timeval.tv_sec- start_timeval.tv_sec)*1000000 + end_timeval.tv_usec - start_timeval.tv_usec )  << " us]" << std::endl; 
        diff_time += ((end_timeval.tv_sec- start_timeval.tv_sec)*1000000 + end_timeval.tv_usec - start_timeval.tv_usec );
#endif
    

    iResult = poOcpMsgParser->parseRawToApp((char *)sResult.c_str(), sResult.size());
	
	struct allCCAinfo test;
	int itent;
	itent=poOcpMsgParser->getAvpValue("Session-Id",sVar);
	strncpy(test.Session_Id,sVar.c_str(),sizeof(test.Session_Id));

	itent=poOcpMsgParser->getAvpValue("Origin-Host",sVar);
	strncpy(test.Origin_Host,sVar.c_str(),sizeof(test.Origin_Host));
	itent=poOcpMsgParser->getAvpValue("Origin-Realm",sVar);
	strncpy(test.Origin_Realm,sVar.c_str(),sizeof(test.Origin_Realm));

	itent=poOcpMsgParser->getAvpValue("Destination-Host",sVar);
	strncpy(test.Destination_Host,sVar.c_str(),sizeof(test.Destination_Host));
	
	itent=poOcpMsgParser->getAvpValue("Destination-Realm",sVar);
	strncpy(test.Destination_Realm,sVar.c_str(),sizeof(test.Destination_Realm));
	
	itent=poOcpMsgParser->getAvpValue("Service-Context-Id",sVar);
	strncpy(test.Service_Context_Id,sVar.c_str(),sizeof(test.Service_Context_Id));
	
	itent=poOcpMsgParser->getAvpValue("Service-Flow-Id",sVar);
	strncpy(test.Service_Flow_Id,sVar.c_str(),sizeof(test.Service_Flow_Id));	

	itent=poOcpMsgParser->getAvpValue("OutPlatformDescription",sVar);
	strncpy(test.OutPlatformDescription,sVar.c_str(),sizeof(test.OutPlatformDescription));	
	
	itent=poOcpMsgParser->getAvpValue("Auth-Application-Id",iVar);
    test.Auth_Application_Id = iVar;
	
	itent=poOcpMsgParser->getAvpValue("CC-Request-Number",iVar);
    test.CC_Request_Number=iVar;
	
	itent=poOcpMsgParser->getAvpValue("CC-Request-Type",iVar);
    test.CC_Request_Type=iVar;
	
	itent=poOcpMsgParser->getAvpValue("Requested-Action",iVar);
    test.Requested_Action=iVar;

	itent=poOcpMsgParser->getAvpValue("Request-Id",sVar);
	strncpy(test.*ttvecC->Request_Id[0],sVar.c_str(),sizeof(test.*ttvecC->Request_Id[0]));	

	itent=poOcpMsgParser->getAvpValue("Destination-Type",iVar);
    test.ttvecC->Destination_Type[0]=iVar;

	itent=poOcpMsgParser->getAvpValue("Destination-Account",sVar);
	strncpy(test.ttvecC->Destination_Account[0],sVar.c_str(),sizeof(test.ttvecC->Destination_Account[0]));	
	
	itent=poOcpMsgParser->getAvpValue("Destination-Attr",iVar);
    test.ttvecC->Destination_Attr[0]=iVar;

	itent=poOcpMsgParser->getAvpValue("Service-Platform-ID",sVar);
	strncpy(test.ttvecC->Service_Platform_ID[0],sVar.c_str(),sizeof(test.ttvecC->Service_Platform_ID[0]));
	
	itent=poOcpMsgParser->getAvpValue("QueryType",iVar);
    test.ttvecC->QueryType[0]=iVar;

	printf("test",*test);
	
    if (iResult<0){
      printf("parser error.\n");
      delete poOcpMsgParser;
      exit(1);
    }
    poOcpMsgParser->getAllAvp(true);
    delete poOcpMsgParser;
    exit(0);
    
}
