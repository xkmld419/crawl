#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string>
#include <errno.h>
#include <sys/timeb.h>
#include "abmobject.h"
#include "abmcmd.h"
#include "Application.h"
#include "MessageQueue.h"
#include "LogV2.h"
#include "DccMsgParser.h"
#include "dccpublic.h"
#include "dcc_ra.h"
#include "../src/ReadAppConf.h"

#define MAXSIZE 1024

int main(int argc,char* argv[])
{
    
    char sDictFile[256];
    char *p;
    int iResult;
    DccMsgParser *poOcpMsgParser; 
 //0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    char s_buff[]={0x01,0x00,0x02,0x84,0xC0,0x00,0x01,0x10,0x00,0x00,0x00,0x04,0x00,0x03,0xB0,0x78,0x00,0x00,0x00,0x20,
0x00,0x00,0x01,0x07,0x40,0x00,0x00,0x2D,0x56,0x43,0x40,0x30,0x32,0x39,0x2E,0x43,0x68,0x69,0x6E,0x61,
0x54,0x65,0x6C,0x65,0x63,0x6F,0x6D,0x2E,0x63,0x6F,0x6D,0x3B,0x31,0x33,0x31,0x31,0x30,0x33,0x39,0x38,
0x37,0x34,0x3B,0x32,0x32,0x00,0x00,0x00,0x00,0x00,0x01,0x08,0x40,0x00,0x00,0x1F,0x56,0x43,0x40,0x30,
0x32,0x39,0x2E,0x43,0x68,0x69,0x6E,0x61,0x54,0x65,0x6C,0x65,0x63,0x6F,0x6D,0x2E,0x63,0x6F,0x6D,0x00,
0x00,0x00,0x01,0x28,0x40,0x00,0x00,0x1C,0x30,0x32,0x39,0x2E,0x43,0x68,0x69,0x6E,0x61,0x54,0x65,0x6C,
0x65,0x63,0x6F,0x6D,0x2E,0x63,0x6F,0x6D,0x00,0x00,0x01,0x1B,0x40,0x00,0x00,0x1C,0x30,0x32,0x39,0x2E,
0x43,0x68,0x69,0x6E,0x61,0x54,0x65,0x6C,0x65,0x63,0x6F,0x6D,0x2E,0x63,0x6F,0x6D,0x00,0x00,0x01,0x25,
0x40,0x00,0x00,0x20,0x53,0x52,0x33,0x40,0x30,0x32,0x39,0x2E,0x43,0x68,0x69,0x6E,0x61,0x54,0x65,0x6C,
0x65,0x63,0x6F,0x6D,0x2E,0x63,0x6F,0x6D,0x00,0x00,0x01,0x02,0x40,0x00,0x00,0x0C,0x00,0x00,0x00,0x04,
0x00,0x00,0x01,0xCD,0x40,0x00,0x00,0x2F,0x56,0x43,0x52,0x65,0x63,0x68,0x61,0x72,0x67,0x65,0x2E,0x42,
0x61,0x6C,0x61,0x6E,0x63,0x65,0x40,0x30,0x30,0x31,0x2E,0x43,0x68,0x69,0x6E,0x61,0x54,0x65,0x6C,0x65,
0x63,0x6F,0x6D,0x2E,0x63,0x6F,0x6D,0x00,0x00,0x01,0x39,0x2C,0xC0,0x00,0x00,0x5B,0x00,0x01,0x3C,0x68,
0x32,0x30,0x31,0x31,0x30,0x37,0x31,0x39,0x30,0x39,0x34,0x34,0x33,0x34,0x30,0x30,0x30,0x30,0x30,0x30,
0x31,0x36,0x32,0x39,0x2D,0x30,0x32,0x39,0x30,0x30,0x2D,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x34,
0x30,0x30,0x33,0x2D,0x76,0x31,0x2E,0x30,0x2D,0x30,0x31,0x30,0x30,0x30,0x32,0x2D,0x56,0x43,0x52,0x65,
0x63,0x68,0x61,0x72,0x67,0x65,0x2E,0x42,0x61,0x6C,0x61,0x6E,0x63,0x65,0x40,0x30,0x30,0x31,0x3B,0x00,
0x00,0x01,0x3A,0x19,0xC0,0x00,0x00,0x0C,0x00,0x01,0x3C,0x68,0x00,0x00,0x01,0xA0,0x40,0x00,0x00,0x0C,
0x00,0x00,0x00,0x04,0x00,0x00,0x01,0x9F,0x40,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,
0x40,0x00,0x00,0x0C,0xD2,0xD0,0x61,0x02,0x00,0x00,0x01,0xB4,0x40,0x00,0x00,0x0C,0x00,0x00,0x00,0x71,
0x00,0x00,0x03,0x69,0xC0,0x00,0x00,0xD4,0x00,0x00,0x28,0xAF,0x00,0x00,0x50,0x7B,0xC0,0x00,0x00,0xC8,
0x00,0x01,0x3C,0x68,0x00,0x00,0x50,0x9B,0xC0,0x00,0x00,0x26,0x00,0x01,0x3C,0x68,0x32,0x30,0x31,0x31,
0x30,0x37,0x31,0x39,0x30,0x39,0x34,0x34,0x33,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x34,0x31,0x30,
0x32,0x39,0x00,0x42,0x00,0x00,0x50,0xAF,0xC0,0x00,0x00,0x10,0x00,0x01,0x3C,0x68,0x00,0x0F,0x42,0x40,
0x00,0x00,0x50,0x9D,0xC0,0x00,0x00,0x10,0x00,0x01,0x3C,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x99,
0xC0,0x00,0x00,0x10,0x00,0x01,0x3C,0x68,0x00,0x00,0x13,0x88,0x00,0x00,0x50,0xA0,0xC0,0x00,0x00,0x10,
0x00,0x01,0x3C,0x68,0x00,0x00,0x00,0x3C,0x00,0x00,0x50,0x7F,0xC0,0x00,0x00,0x0F,0x00,0x01,0x3C,0x68,
0x35,0x42,0x43,0x00,0x00,0x00,0x50,0x80,0xC0,0x00,0x00,0x17,0x00,0x01,0x3C,0x68,0x31,0x38,0x39,0x39,
0x32,0x38,0x35,0x38,0x31,0x31,0x32,0x00,0x00,0x00,0xC4,0x1F,0x00,0x00,0x00,0x0B,0x30,0x32,0x39,0x00,
0x00,0x00,0x50,0xA7,0xC0,0x00,0x00,0x10,0x00,0x01,0x3C,0x68,0x00,0x00,0x00,0x0C,0x00,0x00,0x50,0xBB,
0xC0,0x00,0x00,0x10,0x00,0x01,0x3C,0x68,0x00,0x00,0x03,0xE7,0x00,0x00,0x01,0x1A,0x40,0x00,0x00,0x20,
0x56,0x43,0x40,0x30,0x32,0x39,0x2E,0x43,0x68,0x69,0x6E,0x61,0x54,0x65,0x6C,0x65,0x63,0x6F,0x6D,0x2E,
0x63,0x6F,0x6D,0x00};
                                                       
//,0x00
     if ((p=getenv ("ABMAPP_DEPLOY")) == NULL)
     {
      cout<<"Please set env value ABM_HOME. For example  export ABM_HOME=/home/abm/ABM_HOME"<<endl;
      return -1;
	 }
	  //get dictionary file
    sprintf (sDictFile, "%s/config/dictionary.xml", p);

    //poOcpMsgParser = new OcpMsgParser(sDictFile);
      poOcpMsgParser = new DccMsgParser(sDictFile);
    
    if(poOcpMsgParser != NULL){
    	iResult=poOcpMsgParser->parseRawToApp(s_buff,sizeof(s_buff));
    } else {
    	cout<<"new error!"<<endl;
    	exit(-1);
    }
    if (iResult<0){
    	 printf("parser error.\n");
    }

    poOcpMsgParser->getAllAvp(true);
    //MessageQueue oMq(10005);
	  //oMq.open(oExp, true, true);
	  //oMq.Send((void *)&s_buff, (s_buff.size()+sizeof(long)));
    delete poOcpMsgParser;
    exit(0);
    	
}


